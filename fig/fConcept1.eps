%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Simplified Chinese
%%Title: fConcept1.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: boqinggo
%%CreationDate: 9/29/2012
%%BoundingBox: 0 0 539 244
%%HiResBoundingBox: 0 0 538.9683 243.4576
%%CropBox: 0 0 538.9683 243.4576
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 60 8%%BeginData: 8733 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C457DFD28A87DA8FFFD53A87DA8FD10FFA9FF7F31FD0EFFA931AFFD04
%FFA8FFA8FFFD0BA8CAFD07A8CFA8A8A8FD3AFFA8A8FD0FFFA9F9855531FD
%0EFF7F09A9FFFFFFA8A8FFA8A8FFA8FFA8FFA8FFCFFF7E7FA8FFA8FFA8FF
%A8FF5AFFFFA8A8FD39FFA87DFFFFFFC2BCCAFFFFFFCAFFFFFF5B55A95585
%FFA9FD0DFFA9A9A9FFA9A9FFFF7DFFA8A8A8FFC3FD04FFA97F5B5BAFFD06
%FFA95BA9FFA8FD3AFFA8A8FFFFFFC2FCFFCAC3CAFD04FF5B09FD12FF5B31
%FFFFA909A9CFA8FFA8A8FFFFC3CAC3FFFF7F85FD09FF5B85AF5BA8A8FD39
%FFA87DFD06FFC3FCC3FD04FFA9AF85FFA9A9FD0EFF5B55FFFFA95BA9FF7D
%FFA8A8A8CFCACAC3CFCAFF5B5B55FD07FFA9FFA9FFA8FD3AFFA8A8FFFFCA
%FFFFFFCACACAFFA9FFFFFF85097F5BF9FD16FFA8FFA8A8FFC3C3BCFFC3C3
%FFFFA9FD0AFFA95BA8FFFFFF7D7DFFFFFFA8A8FFFFFFA8FFFFA8FD29FF7D
%7DFFFFB5BBCAFCC3FFFF7F097FFFFFA955A97F5BA9FD11FFA97FA9FFA8FF
%A8A8A8FFFFFFBCCABCBCFD0AFFBBCAA8AFA8A87D7D5252A8FFFF5227FFFF
%A852A8A87DA8FD28FFA8A8FFFFBBC3CAB5C9FFFFA92BA9FD19FFA9F9A9FF
%A8FFFFA8FD05FFCACACAFD08FFCAC3FFC2CAFFFF7D7DA8FFFF7DA8A82727
%7DFF7DA8527DA87DFD28FFA87DFD06FFCABBCAFFFFA97F5BFD12FFA931AF
%FFFFA97FA9FFA8FFA8A8A8FD0FFFC3C9CACFFFFFA87D7DFFFFFF52A8FF52
%27A87D7DA87D27A87DFD28FFA8A8FD06FFC3FCC3AF09852B31FD12FF5B09
%A9857FFFFFFFA8A8FFA8A8FD0FFFC3FFFFC3C3FFFFA8A87D7D7D52A8FFFF
%A8A8FF7DA87DA8A852A8FD28FFA87DFD07FFCAFFA95585FFA9FD10FFCACA
%FFA9FF0931FD04FF7DFFA8A8A8FFCAFFCAFFCAFF7FA9A9FFFFFFCAC2CAFD
%05FF7DFFFFFF527DFD06FFA8FFA8FFFFA8FD29FFA8A8FD1EFFB4BCFFFFFF
%A9A9FFFFFFA8A8FFA8A8FFCAFFFD05CACFA9A9FD06FFBCC3C3FFFFA8A8FD
%24FFA87DA8FD0EFFA8A8A8FFA87DFD1DFFCAC3C3FD09FF7DFFA8A8A8FFCA
%CAC3FFC3C3CAA985FD05FFFD04CAFFFFA8FD25FF527DA8FD0DFFA8A87D7D
%FFA8A8FD21FFC3B4FD06FFA8FFA8A8FFFFCFCACFA2FFA9AFFD0DFFA8FD24
%FFA87DFFFFA8A8FD06FFA8FD07FF7DFFA87DFD1BFFBCCAFD04FFC2B5CAFD
%05FFA8FFA8A8A8FFA8FFA8A27EA97EFFA8FFA8FFA8FFA8FFA8FFA8FF7DFD
%25FF52FFA85227A8FFA87DA8A87DA8FFA8FFA8FFA87DFFA8A8FD0FFF5BA9
%FD09FFCAB4BCFD0CFFA8FFA8FFFD06A8CAFD10A8FD24FFA87DFFA8525252
%FF7DFF27A8A87D7D7D527DFFFF7DFFA87DFFFFC3C3FFFFCFCAFFFFAFAFFF
%FFFF55FFA97FFD08FFC3CFFD0CFFA8FF7DFD3DFF52FFFF7D52A8FD057DA8
%7DFF7D7D52A8A87DFFA8A8FFFFBBC3FFFFB5C3FFFF09AFFD05FF8531FD0B
%FFCABCCACABCFD05FFA8A8FFA8FD3CFFA87DFD06FFA8A8FFFF7DFD07FF7D
%FFA87DFD06FFCACAFFA9A9A9FF5531FD0FFFC9FCCABCB4CAFD05FF7DFF7D
%FD3DFF52FD11FFA87DFFA8A8FD04FFC3FFFFBBCAFFFF317FFF7FFFFF317F
%FD0FFFCAFD05FFA8A8FFA8A8FFA8A8A8FFA8A8A8FFA8CFA8FFA8A8A8FFA8
%A8A8FFA8FD25FFA87DFD12FF7DFFA87DFD04FFB5C3FFC2FFFFFF7FA9FD04
%FF5BA9FD16FF7DFFA8A8A8FFA8A8A8FFA8AFA8845AA8A8FFA8A8A8FFA85A
%A8FF7DFD25FF52FD11FFA87DFFA8A8FD08FFC2CAAFFFFFFFA9FD1AFFA8FF
%A8A8FFFFCAFD04FFCACB557FAFFD07FF5BFFFFA8FD24FFA87DFD12FF7DFF
%A87DFD07FFCABCA231A9FF5B31FD1AFFA8FFA8A8A8FFBBCAC2FFFFC3BCFD
%09FFBBC9855BA1FD25FF52FD11FFA87DFFA8A8FD0AFF7FFFFFA97FFD19FF
%A8A8FFFFA8FFCAFFCACACAFFFFC3A15BFD08FFCFFFA9A8FFFFFFA8FD12FF
%A8FD0DFFA87DFD12FF7DFFA87DFD0FA87EA8A87D7DFF7DFD14A8FFA8A8AF
%C3BCBCFFC9BCFFCACB85FD09FFC9C2A8FFA8A82752FFFFFFA852FFFFFF7D
%FFFFA8FD04FFA8277DFFFFFF52FFA8A8FFFFA8FFFFFF52FFFFFFA8FFFFFF
%A8FD09FFA87DFFA8FD13FF7DA87D7DA8FD14FFA8A8FFFFFFCAC2855B55FD
%0AFFC2C9CACAA87D7D7DA8A87DFFFF2727A8FFA87D7DA87DA8FFA852FD04
%7DFF7D277DA8FD087DFFFF2752A8FF7DA8A8FF7DFD07FF7DFFA8FD12FFA8
%7D7D277D7DFD14FFA8A8A8FFFFFFCAA97FA9FD08FFC3C3CAC2C3FFA87DA8
%FFFFFF52A8A827277DA87DA85252A87DFF7DA8FFFFFF52A87D27527DA827
%A87D52527D7DFF7D525252A87DA8277DA852A8525252FFA87DFFA8FD13FF
%7D7D527DA8FD14FFA8A8FD10FFCAC9FFCAFFFFA87D7D7DA87D7DFFFF5252
%FF7D52A87D527DA8FFA87DA8A8A87DFFFF52A8A8A85252A8A8FFA87DFFFF
%5252A87D7DA8527D7DA8A87D7D7DA8FF7DFFFD14A87DA7A852FD14A8FFA8
%A8A8FD07FFA9FD05FFCAC3FFFFBCC3FFFFA8FFA8FF5252FD04FFA8FF52A8
%7DFFA87DA8FFA8A87D527DFFFFFFA8FFA8A8FFA87DFFFFFF52FD05FF7DA8
%7DFFA8A8FD04FF7DFFA87DFFA8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%CAFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8AFA8AFA8FFA8A8FFA8A8FF
%CAFD06FFA9A9AFFD04FFC2FD06FFA8FD16FF7DFD0DFFA87DFD12FF7DFFA8
%7DFD0FFFA9A9A95B31FD0EFF852BA9FD04FFA8FFA8A8A8CACACAC9A97EAF
%A9AF7FFD05FFCAC2BCC9FFFF7DFD25FF52FD11FFA87DFFA8A8FD0FFFA9F9
%855531FD0EFF7F31A9FD04FFA8FFFFA8FFFFCFCACAFFCAA2FFA9A9FD06FF
%CAFFCAFFFFA8FD24FFA87DFD12FF7DFFA87DFFFFFFBCBBCFFD07FF5B31A9
%7FA9FFA9FD0DFFA9A9A9FFA9A9A9FFA8FFA8A8A8FFCAFFCAC9CAFFCAFFAF
%FD0BFFA8FD25FF52FD11FFA87DFFA8A8FFFFFFC2B4FFCAC2CAFD04FF7F09
%FD12FF5509FFFF85F985CFA8FFA87DA8A8FFA8CFA1CAA1CAAFFFA8FFA8FF
%A8FFA8FFA8FFA8A8A8FD23FFA87DFD12FF7DFFA87DFD06FFC3FCC3FFFFA8
%AEFFFF7FAFA985A9FD0DFF7F5BFFFFA95BA9FF7DFFA8FFFD17A8FD25FF52
%FD11FFA87DFFA8A8FFFFCAFFFFFFCACACAFFA95F348385F97F5BF9AFFD0E
%FF83AEFD04FFA8A8FFA8FD3CFFA87DFFFFA8FD07FFA8FD07FF7DFFA87DFF
%FFB5BBCAFCC9FFAE5A097FFF5F355BA97F7FA9FD0DFFA85F345FA97FA9FF
%A7FFA8FD3DFF52FFA85227FFFFA87DFFA87DA8FFA8FFA8FFA87DFFA8A8FF
%FFBCC3CABBCAFF5E8455A9FFFF34AEFD0EFFAF84FD04FF5F35F9A9FFA8FF
%A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD25FFA87DFF
%7D525252FF7DFF27A8A87D7D7D527DFFFF7DFFA87DFD06FFCA9234AFAFA9
%5B55835FFD0EFF8434A931AFFFFF3485A9FFA8FFA8A87DA884A8A8A87DA8
%A8A87DA8A8A87DA8A8A87D7E7EA87DFD25FF52FFA85252A8527DA87D7DA8
%7DA8527D52A8A87DFFA8A8FD06FFC3B45885F9853131AEFD0FFF848A7F09
%A9857F5FCFFFFFA8FFFFA8FD08FFA9555BA9FD07FF55FFFFA8FD24FFA87D
%FD04FFFD04A8FFFF7DFD04FFA8A8FF7DFFA87DFD07FFCAFFA95BA9FFA8FD
%10FFA17CFFA9FF0931FD04FFA8FFA8A8A8FFBBCACAFFFF7F5BAFAFFD07FF
%C2CACAC384FD25FF52FD11FFA87DFFA8A8FD0AFFA85F3484FD10FFFCBCFF
%FFFF8484FFFFFFA8A8FFA8A8FFFFFFCAC2FFFFAFC3C2C3FD07FFC9CAFFCA
%A8A8FD24FF52527DFD0EFF7D7D52FFA87DFD0BFF84AEFD10FFCAC3C9FF34
%3434AEFD04FF7DFFA8A8A9C3BCC2FFCAC2FFC3C3C3FD09FFCAC9A8FFFFFF
%A852FD04FFA8FFFFFFA8FD17FFA8FFA8FD0DFFA8A87DA8FFA8A8FD21FFC3
%B4FD05FFA8A8FFA8A8FFCACAC9C9C9C2C2FD0AFFC3CFCAC9A8FFA87D7D52
%7DFFFF5252FFFFA87DA8FF7DFD29FFA87DFD1BFFBCCAFD04FFC3BCCAFD05
%FF7DFFA8A8A8FFFFFFC3CABCC3FD08FFCACAC3BCC3FFA8FF52A8A8FF7D7D
%A827277DFF7D7D527DA87DFD28FFA8A8FD0BFFAF345F845BA9FD09FFCAB4
%C2FD0CFFA8FFA8A8FD10FFC3C2FFCAFFFFA8FF7DA8FFFFA852FF52277DA8
%7DFF7D52A87DFD28FF7D7DFFFFC2C3FFFFCACAFFA8A9A8FF83340EFF855B
%A9FD07FFC3CFFFFFCAFD09FFA8FFA8A8A8FD0DFFCACAFFFFBCC9FFFF7DFF
%7D7D525252FFFFA87DFF277D7DA8527D7DFD28FFA8A8FFFFBCC9FFFFB4CA
%AF5F09FFFFFF845FFFA931FD0BFFC9BCCAC9BBFD06FFA8FFFFA8FD08FFA9
%A9FD04FFCFBBFFFFFFCFFFFFA8FD04FF52FD08FFA8FFFFA8FD29FFA87DFD
%06FFCAFF8459FFAFFF5B3134FD0EFFC3FCCAC2B4CAFD05FFA8FFA8A8AFFD
%05CAC3FFA8A97FFD05FFCAC3C3CAFFFF7DFD3AFFA8A8FD04FFC3FFCFBB7D
%84FF317FFF85AEFF317FFD0FFFCAFD05FFA8A8FFA8A8FFFFCFCACAFFCAC3
%CFA9A9FD06FFC3C9C3FFFFA8A8FD39FFA87DFD04FFB5C3FFC3FFA8FF7FCB
%FD04FF7FA9FD16FF7DFFA8A8A8FFC3CAC3CFC9CFCFA9A9FD0BFFA8FD3AFF
%A8A8FD04FFCFFFFFFFBCFFA984835F84FD19FFA8A8FFA8A8FD05FFC2CACA
%CAFD0DFFA8A8FD39FFA8A8FD08FFBCA8315A8A3031FD1AFFA8FFA8A87DA8
%A8A884A8A1A87DA8A8A87DA8A8A87DA8A8A87DA87DFD3AFFA87DA8FFA8FF
%A8FFA8FFA8AF7EFFCFA97EFFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8A8FFA8A8FFA8FFA8A8A8FFA8AFA8FFA8A8A8FFA8A8A8FF
%A8A8A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FF7D7DFD13A852A8A87DFD13A8FFFD2CA87DFD27A8FD13FFA87D52A87D
%FD3DFF7DFFA87DFD3AFF7D52527D7DA8FD3BFFA87D7DA852A8FD39FF7D7D
%52A87DFD3CFFA8527D7D7DA8FD3AFF7DFFA8A8FD3DFF7DA8A87DFD26FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.351735, 2008/07/22-18:11:12        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2012-09-29T23:14:28-07:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>116</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgAdAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9AeVfKvlh/LGju+j2TO1&#xA;lbFmNtESSYlJJJXFVTTLP8vNUnu7fT7HTbmaxYR3aJbRVjYlgA3weKN92VY80JkiJuublajRZsMY&#xA;yyRMRPePn+LCYf4T8q/9Wax/6Rof+actcVK/MEX5a+XraO61u00ywt5n9KOSW3iAZ6FuIoh7DMrS&#xA;6LNqJGOKJkRvs15MsYC5GmIXP6cvdY8z6Npvkiytjp8DNoepz2SrDcyh0AHOVFiPwsx2btm2hodH&#xA;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&#xA;VdirsVdirsVdir//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:stFnt="http://ns.adobe.com/xap/1.0/sType/Font#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.001480</stDim:w>
            <stDim:h>297.000132</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:Fonts>
            <rdf:Bag>
               <rdf:li rdf:parseType="Resource">
                  <stFnt:fontName>TimesNewRomanPSMT</stFnt:fontName>
                  <stFnt:fontFamily>Times New Roman</stFnt:fontFamily>
                  <stFnt:fontFace>Regular</stFnt:fontFace>
                  <stFnt:fontType>Open Type</stFnt:fontType>
                  <stFnt:versionString>Version 5.07</stFnt:versionString>
                  <stFnt:composite>False</stFnt:composite>
                  <stFnt:fontFileName>times.ttf</stFnt:fontFileName>
               </rdf:li>
            </rdf:Bag>
         </xmpTPg:Fonts>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>默认色板组</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -243.458 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 243.458 li
538.968 243.458 li
538.968 0 li
cp
clp
[1 0 0 1 0 0 ]ct
1 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
.5 122.313 mo
177.831 122.313 li
177.831 224.724 li
.5 224.724 li
.5 122.313 li
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
.580072 .46009 .410468 .949004 cmyk
@
18.5562 135.52 mo
25.0244 135.52 li
25.0244 141.988 li
18.5562 141.988 li
18.5562 135.52 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
32.5703 140.91 mo
39.0381 140.91 li
39.0381 147.377 li
32.5703 147.377 li
32.5703 140.91 li
cp
f
13.166 150.612 mo
19.6343 150.612 li
19.6343 157.08 li
13.166 157.08 li
13.166 150.612 li
cp
f
24.4849 150.612 mo
30.9531 150.612 li
30.9531 157.08 li
24.4849 157.08 li
24.4849 150.612 li
cp
f
32.5703 160.313 mo
39.0381 160.313 li
39.0381 166.782 li
32.5703 166.782 li
32.5703 160.313 li
cp
f
45.5059 150.612 mo
51.9741 150.612 li
51.9741 157.08 li
45.5059 157.08 li
45.5059 150.612 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
45.5059 162.47 mo
51.9741 162.47 li
51.9741 168.938 li
45.5059 168.938 li
45.5059 162.47 li
cp
f
55.7476 160.313 mo
62.2153 160.313 li
62.2153 166.782 li
55.7476 166.782 li
55.7476 160.313 li
cp
f
66.5273 145.76 mo
72.9951 145.76 li
72.9951 152.228 li
66.5273 152.228 li
66.5273 145.76 li
cp
f
77.8462 145.76 mo
84.3145 145.76 li
84.3145 152.228 li
77.8462 152.228 li
77.8462 145.76 li
cp
f
60.5981 135.52 mo
67.0659 135.52 li
67.0659 141.988 li
60.5981 141.988 li
60.5981 135.52 li
cp
f
70.8394 129.59 mo
77.3071 129.59 li
77.3071 136.058 li
70.8394 136.058 li
70.8394 129.59 li
cp
f
81.0801 127.434 mo
87.5483 127.434 li
87.5483 133.902 li
81.0801 133.902 li
81.0801 127.434 li
cp
f
133.902 167.589 mo
135.112 171.5 li
139.028 171.5 li
135.86 173.917 li
137.07 177.828 li
133.902 175.412 li
130.734 177.828 li
131.944 173.917 li
128.776 171.5 li
132.692 171.5 li
133.902 167.589 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
120.966 182.951 mo
122.176 186.862 li
126.092 186.862 li
122.924 189.279 li
124.134 193.19 li
120.966 190.772 li
117.798 193.19 li
119.008 189.279 li
115.84 186.862 li
119.756 186.862 li
120.966 182.951 li
cp
f
136.598 194.271 mo
137.807 198.181 li
141.723 198.181 li
138.555 200.598 li
139.766 204.509 li
136.598 202.091 li
133.429 204.509 li
134.639 200.598 li
131.471 198.181 li
135.387 198.181 li
136.598 194.271 li
cp
f
148.455 194.271 mo
149.666 198.181 li
153.582 198.181 li
150.413 200.598 li
151.623 204.509 li
148.455 202.091 li
145.287 204.509 li
146.497 200.598 li
143.329 198.181 li
147.245 198.181 li
148.455 194.271 li
cp
f
148.455 177.022 mo
149.666 180.933 li
153.582 180.933 li
150.413 183.349 li
151.623 187.26 li
148.455 184.843 li
145.287 187.26 li
146.497 183.349 li
143.329 180.933 li
147.245 180.933 li
148.455 177.022 li
cp
f
147.916 136.058 mo
149.126 139.969 li
153.042 139.969 li
149.875 142.386 li
151.084 146.296 li
147.916 143.879 li
144.748 146.296 li
145.958 142.386 li
142.79 139.969 li
146.707 139.969 li
147.916 136.058 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
155.462 162.47 mo
156.672 166.381 li
160.588 166.381 li
157.42 168.797 li
158.63 172.708 li
155.462 170.292 li
152.294 172.708 li
153.504 168.797 li
150.336 166.381 li
154.252 166.381 li
155.462 162.47 li
cp
f
144.682 157.888 mo
145.892 161.798 li
149.808 161.798 li
146.64 164.215 li
147.851 168.126 li
144.682 165.708 li
141.514 168.126 li
142.724 164.215 li
139.556 161.798 li
143.472 161.798 li
144.682 157.888 li
cp
f
166.242 150.612 mo
167.452 154.523 li
171.368 154.523 li
168.2 156.939 li
169.41 160.85 li
166.242 158.433 li
163.074 160.85 li
164.285 156.939 li
161.116 154.523 li
165.032 154.523 li
166.242 150.612 li
cp
f
166.242 135.52 mo
167.452 139.431 li
171.368 139.431 li
168.2 141.847 li
169.41 145.757 li
166.242 143.341 li
163.074 145.757 li
164.285 141.847 li
161.116 139.431 li
165.032 139.431 li
166.242 135.52 li
cp
f
153.306 125.008 mo
154.517 128.919 li
158.432 128.919 li
155.264 131.336 li
156.474 135.247 li
153.306 132.83 li
150.138 135.247 li
151.348 131.336 li
148.18 128.919 li
152.096 128.919 li
153.306 125.008 li
cp
f
18.687 193.601 mo
19.9497 194.864 19.9497 196.912 18.687 198.174 cv
17.4243 199.437 15.3765 199.437 14.1133 198.174 cv
12.8501 196.912 12.8501 194.864 14.1133 193.601 cv
15.3765 192.337 17.4243 192.337 18.687 193.601 cv
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
26.2329 206.538 mo
27.4956 207.799 27.4956 209.847 26.2329 211.111 cv
24.9702 212.373 22.9219 212.373 21.6592 211.111 cv
20.3965 209.847 20.3965 207.799 21.6592 206.538 cv
22.9219 205.274 24.9702 205.274 26.2329 206.538 cv
f
34.8574 195.218 mo
36.1201 196.481 36.1201 198.528 34.8574 199.792 cv
33.5938 201.053 31.5459 201.053 30.2837 199.792 cv
29.0205 198.528 29.0205 196.481 30.2837 195.218 cv
31.5459 193.956 33.5938 193.956 34.8574 195.218 cv
f
38.0908 204.38 mo
39.354 205.644 39.354 207.691 38.0908 208.955 cv
36.8286 210.216 34.7803 210.216 33.5171 208.955 cv
32.2544 207.691 32.2544 205.644 33.5171 204.38 cv
34.7803 203.118 36.8286 203.118 38.0908 204.38 cv
f
42.9419 213.543 mo
44.2051 214.807 44.2051 216.854 42.9419 218.118 cv
41.6792 219.381 39.6309 219.381 38.3687 218.118 cv
37.1055 216.854 37.1055 214.807 38.3687 213.543 cv
39.6309 212.281 41.6792 212.281 42.9419 213.543 cv
f
51.0269 215.7 mo
52.2896 216.962 52.2896 219.01 51.0269 220.274 cv
49.7642 221.537 47.7163 221.537 46.4536 220.274 cv
45.1899 219.01 45.1899 216.962 46.4536 215.7 cv
47.7163 214.436 49.7642 214.436 51.0269 215.7 cv
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
66.1187 215.7 mo
67.3818 216.962 67.3818 219.01 66.1187 220.274 cv
64.8564 221.537 62.8086 221.537 61.5454 220.274 cv
60.2822 219.01 60.2822 216.962 61.5454 215.7 cv
62.8086 214.436 64.8564 214.436 66.1187 215.7 cv
f
55.8779 204.38 mo
57.1406 205.644 57.1406 207.691 55.8779 208.955 cv
54.6147 210.216 52.5674 210.216 51.3047 208.955 cv
50.0415 207.691 50.0415 205.644 51.3047 204.38 cv
52.5674 203.118 54.6147 203.118 55.8779 204.38 cv
f
51.0269 195.218 mo
52.2896 196.481 52.2896 198.528 51.0269 199.792 cv
49.7642 201.053 47.7163 201.053 46.4536 199.792 cv
45.1899 198.528 45.1899 196.481 46.4536 195.218 cv
47.7163 193.956 49.7642 193.956 51.0269 195.218 cv
f
66.1187 200.069 mo
67.3818 201.332 67.3818 203.379 66.1187 204.643 cv
64.8564 205.906 62.8086 205.906 61.5454 204.643 cv
60.2822 203.379 60.2822 201.332 61.5454 200.069 cv
62.8086 198.805 64.8564 198.805 66.1187 200.069 cv
f
83.3667 193.601 mo
84.6299 194.864 84.6299 196.912 83.3667 198.174 cv
82.104 199.437 80.0562 199.437 78.7939 198.174 cv
77.5308 196.912 77.5308 194.864 78.7939 193.601 cv
80.0562 192.337 82.104 192.337 83.3667 193.601 cv
f
81.2109 204.38 mo
82.4741 205.644 82.4741 207.691 81.2109 208.955 cv
79.9482 210.216 77.8999 210.216 76.6372 208.955 cv
75.3745 207.691 75.3745 205.644 76.6372 204.38 cv
77.8999 203.118 79.9482 203.118 81.2109 204.38 cv
f
72.0479 188.75 mo
73.3105 190.013 73.3105 192.06 72.0479 193.324 cv
70.7852 194.586 68.7373 194.586 67.4741 193.324 cv
66.2114 192.06 66.2114 190.013 67.4741 188.75 cv
68.7373 187.486 70.7852 187.486 72.0479 188.75 cv
f
3 lw
[12 12 ] 0 dsh
158.443 154.864 mo
163.811 159.994 163.811 168.314 158.443 173.444 cv
153.076 178.575 144.373 178.575 139.006 173.444 cv
133.639 168.314 133.639 159.994 139.006 154.864 cv
144.373 149.733 153.076 149.733 158.443 154.864 cv
65.7358 193.335 mo
71.103 198.466 71.103 206.785 65.7358 211.916 cv
60.3682 217.045 51.6655 217.045 46.2983 211.916 cv
40.9302 206.785 40.9302 198.466 46.2983 193.335 cv
51.6655 188.204 60.3682 188.204 65.7358 193.335 cv
63.3096 151.63 mo
68.6772 156.76 68.6772 165.08 63.3096 170.21 cv
57.9429 175.341 49.2397 175.341 43.8726 170.21 cv
38.5049 165.08 38.5049 156.76 43.8726 151.63 cv
49.2397 146.5 57.9429 146.5 63.3096 151.63 cv
1 .243015 .939818 .040589 cmyk
@
1 lw
[] 0 dsh
.5 .5 mo
177.831 .5 li
177.831 102.91 li
.5 102.91 li
.5 .5 li
cp
.580072 .46009 .410468 .949004 cmyk
@
18.5562 13.7056 mo
25.0244 13.7056 li
25.0244 20.1733 li
18.5562 20.1733 li
18.5562 13.7056 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
32.5703 19.0957 mo
39.0381 19.0957 li
39.0381 25.5635 li
32.5703 25.5635 li
32.5703 19.0957 li
cp
f
13.166 28.7979 mo
19.6343 28.7979 li
19.6343 35.2656 li
13.166 35.2656 li
13.166 28.7979 li
cp
f
24.4849 28.7979 mo
30.9531 28.7979 li
30.9531 35.2656 li
24.4849 35.2656 li
24.4849 28.7979 li
cp
f
32.5703 38.499 mo
39.0381 38.499 li
39.0381 44.9673 li
32.5703 44.9673 li
32.5703 38.499 li
cp
f
45.5059 28.7979 mo
51.9741 28.7979 li
51.9741 35.2656 li
45.5059 35.2656 li
45.5059 28.7979 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
45.5059 40.6558 mo
51.9741 40.6558 li
51.9741 47.1235 li
45.5059 47.1235 li
45.5059 40.6558 li
cp
f
55.7476 38.499 mo
62.2153 38.499 li
62.2153 44.9673 li
55.7476 44.9673 li
55.7476 38.499 li
cp
f
66.5273 23.9468 mo
72.9951 23.9468 li
72.9951 30.4146 li
66.5273 30.4146 li
66.5273 23.9468 li
cp
f
77.8462 23.9468 mo
84.3145 23.9468 li
84.3145 30.4146 li
77.8462 30.4146 li
77.8462 23.9468 li
cp
f
60.5981 13.7056 mo
67.0659 13.7056 li
67.0659 20.1733 li
60.5981 20.1733 li
60.5981 13.7056 li
cp
f
70.8394 7.77637 mo
77.3071 7.77637 li
77.3071 14.2441 li
70.8394 14.2441 li
70.8394 7.77637 li
cp
f
81.0801 5.62061 mo
87.5483 5.62061 li
87.5483 12.0884 li
81.0801 12.0884 li
81.0801 5.62061 li
cp
f
133.902 45.7759 mo
135.112 49.6865 li
139.028 49.6865 li
135.86 52.1035 li
137.07 56.0142 li
133.902 53.5972 li
130.734 56.0142 li
131.944 52.1035 li
128.776 49.6865 li
132.692 49.6865 li
133.902 45.7759 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
120.966 61.1377 mo
122.176 65.0483 li
126.092 65.0483 li
122.924 67.4653 li
124.134 71.376 li
120.966 68.9585 li
117.798 71.376 li
119.008 67.4653 li
115.84 65.0483 li
119.756 65.0483 li
120.966 61.1377 li
cp
f
136.598 72.4561 mo
137.807 76.3667 li
141.723 76.3667 li
138.555 78.7837 li
139.766 82.6953 li
136.598 80.2778 li
133.429 82.6953 li
134.639 78.7837 li
131.471 76.3667 li
135.387 76.3667 li
136.598 72.4561 li
cp
f
148.455 72.4561 mo
149.666 76.3667 li
153.582 76.3667 li
150.413 78.7837 li
151.623 82.6953 li
148.455 80.2778 li
145.287 82.6953 li
146.497 78.7837 li
143.329 76.3667 li
147.245 76.3667 li
148.455 72.4561 li
cp
f
148.455 55.2085 mo
149.666 59.1191 li
153.582 59.1191 li
150.413 61.5361 li
151.623 65.4468 li
148.455 63.0298 li
145.287 65.4468 li
146.497 61.5361 li
143.329 59.1191 li
147.245 59.1191 li
148.455 55.2085 li
cp
f
147.916 14.2441 mo
149.126 18.1548 li
153.042 18.1548 li
149.875 20.5718 li
151.084 24.4829 li
147.916 22.0659 li
144.748 24.4829 li
145.958 20.5718 li
142.79 18.1548 li
146.707 18.1548 li
147.916 14.2441 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
155.462 40.6558 mo
156.672 44.5664 li
160.588 44.5664 li
157.42 46.9834 li
158.63 50.894 li
155.462 48.4766 li
152.294 50.894 li
153.504 46.9834 li
150.336 44.5664 li
154.252 44.5664 li
155.462 40.6558 li
cp
f
144.682 36.0742 mo
145.892 39.9844 li
149.808 39.9844 li
146.64 42.4019 li
147.851 46.3125 li
144.682 43.8955 li
141.514 46.3125 li
142.724 42.4019 li
139.556 39.9844 li
143.472 39.9844 li
144.682 36.0742 li
cp
f
166.242 28.7979 mo
167.452 32.708 li
171.368 32.708 li
168.2 35.1255 li
169.41 39.0356 li
166.242 36.6187 li
163.074 39.0356 li
164.285 35.1255 li
161.116 32.708 li
165.032 32.708 li
166.242 28.7979 li
cp
f
166.242 13.7056 mo
167.452 17.6162 li
171.368 17.6162 li
168.2 20.0332 li
169.41 23.9438 li
166.242 21.5264 li
163.074 23.9438 li
164.285 20.0332 li
161.116 17.6162 li
165.032 17.6162 li
166.242 13.7056 li
cp
f
153.306 3.19482 mo
154.517 7.10547 li
158.432 7.10547 li
155.264 9.52246 li
156.474 13.4331 li
153.306 11.0161 li
150.138 13.4331 li
151.348 9.52246 li
148.18 7.10547 li
152.096 7.10547 li
153.306 3.19482 li
cp
f
18.687 71.7871 mo
19.9497 73.0498 19.9497 75.0977 18.687 76.3599 cv
17.4243 77.623 15.3765 77.623 14.1133 76.3599 cv
12.8501 75.0977 12.8501 73.0498 14.1133 71.7871 cv
15.3765 70.5239 17.4243 70.5239 18.687 71.7871 cv
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
26.2329 84.7231 mo
27.4956 85.9854 27.4956 88.0337 26.2329 89.2964 cv
24.9702 90.5596 22.9219 90.5596 21.6592 89.2964 cv
20.3965 88.0337 20.3965 85.9854 21.6592 84.7231 cv
22.9219 83.46 24.9702 83.46 26.2329 84.7231 cv
f
34.8574 73.4038 mo
36.1201 74.667 36.1201 76.7144 34.8574 77.9771 cv
33.5938 79.2397 31.5459 79.2397 30.2837 77.9771 cv
29.0205 76.7144 29.0205 74.667 30.2837 73.4038 cv
31.5459 72.1411 33.5938 72.1411 34.8574 73.4038 cv
f
38.0908 82.5669 mo
39.354 83.8296 39.354 85.8774 38.0908 87.1401 cv
36.8286 88.4033 34.7803 88.4033 33.5171 87.1401 cv
32.2544 85.8774 32.2544 83.8296 33.5171 82.5669 cv
34.7803 81.3042 36.8286 81.3042 38.0908 82.5669 cv
f
42.9419 91.73 mo
44.2051 92.9927 44.2051 95.0405 42.9419 96.3032 cv
41.6792 97.5664 39.6309 97.5664 38.3687 96.3032 cv
37.1055 95.0405 37.1055 92.9927 38.3687 91.73 cv
39.6309 90.4668 41.6792 90.4668 42.9419 91.73 cv
f
51.0269 93.8857 mo
52.2896 95.1489 52.2896 97.1968 51.0269 98.4595 cv
49.7642 99.7222 47.7163 99.7222 46.4536 98.4595 cv
45.1899 97.1968 45.1899 95.1489 46.4536 93.8857 cv
47.7163 92.623 49.7642 92.623 51.0269 93.8857 cv
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
66.1187 93.8857 mo
67.3818 95.1489 67.3818 97.1968 66.1187 98.4595 cv
64.8564 99.7222 62.8086 99.7222 61.5454 98.4595 cv
60.2822 97.1968 60.2822 95.1489 61.5454 93.8857 cv
62.8086 92.623 64.8564 92.623 66.1187 93.8857 cv
f
55.8779 82.5669 mo
57.1406 83.8296 57.1406 85.8774 55.8779 87.1401 cv
54.6147 88.4033 52.5674 88.4033 51.3047 87.1401 cv
50.0415 85.8774 50.0415 83.8296 51.3047 82.5669 cv
52.5674 81.3042 54.6147 81.3042 55.8779 82.5669 cv
f
51.0269 73.4038 mo
52.2896 74.667 52.2896 76.7144 51.0269 77.9771 cv
49.7642 79.2397 47.7163 79.2397 46.4536 77.9771 cv
45.1899 76.7144 45.1899 74.667 46.4536 73.4038 cv
47.7163 72.1411 49.7642 72.1411 51.0269 73.4038 cv
f
66.1187 78.2549 mo
67.3818 79.5176 67.3818 81.5654 66.1187 82.8281 cv
64.8564 84.0918 62.8086 84.0918 61.5454 82.8281 cv
60.2822 81.5654 60.2822 79.5176 61.5454 78.2549 cv
62.8086 76.9917 64.8564 76.9917 66.1187 78.2549 cv
f
83.3667 71.7871 mo
84.6299 73.0498 84.6299 75.0977 83.3667 76.3599 cv
82.104 77.623 80.0562 77.623 78.7939 76.3599 cv
77.5308 75.0977 77.5308 73.0498 78.7939 71.7871 cv
80.0562 70.5239 82.104 70.5239 83.3667 71.7871 cv
f
81.2109 82.5669 mo
82.4741 83.8296 82.4741 85.8774 81.2109 87.1401 cv
79.9482 88.4033 77.8999 88.4033 76.6372 87.1401 cv
75.3745 85.8774 75.3745 83.8296 76.6372 82.5669 cv
77.8999 81.3042 79.9482 81.3042 81.2109 82.5669 cv
f
72.0479 66.936 mo
73.3105 68.1992 73.3105 70.2466 72.0479 71.5093 cv
70.7852 72.772 68.7373 72.772 67.4741 71.5093 cv
66.2114 70.2466 66.2114 68.1992 67.4741 66.936 cv
68.7373 65.6729 70.7852 65.6729 72.0479 66.936 cv
f
95.4556 120.644 mo
96.4746 119.057 97.144 117.855 97.4673 117.04 cv
97.9819 115.77 98.2397 114.325 98.2397 112.705 cv
98.2397 112.085 98.1831 111.442 98.0703 110.775 cv
97.958 110.107 97.7715 109.431 97.5088 108.746 cv
97.3003 108.194 97.1069 107.76 96.9297 107.445 cv
96.7505 107.13 96.2407 106.3 95.3984 104.953 cv
94.4048 104.953 li
95.2095 106.475 95.7485 107.641 96.0225 108.45 cv
96.4663 109.764 96.687 111.212 96.687 112.794 cv
96.687 114.377 96.4956 115.756 96.1128 116.933 cv
95.8608 117.71 95.2998 118.947 94.4292 120.644 cv
95.4556 120.644 li
95.4556 120.644 li
cp
87.9346 112.186 mo
87.1074 112.289 86.4399 112.565 85.9307 113.014 cv
85.4214 113.462 85.167 114.093 85.167 114.908 cv
85.167 115.651 85.4253 116.271 85.9434 116.766 cv
86.4604 117.261 87.1265 117.508 87.9419 117.508 cv
88.6211 117.508 89.2422 117.362 89.8062 117.073 cv
90.3701 116.782 90.8027 116.44 91.104 116.046 cv
91.1533 116.397 91.2378 116.668 91.3584 116.859 cv
91.5879 117.221 91.958 117.401 92.4668 117.401 cv
92.6748 117.401 92.8384 117.394 92.959 117.376 cv
93.0796 117.36 93.2549 117.318 93.4849 117.252 cv
93.4849 116.161 li
93.3916 116.177 93.3047 116.189 93.2222 116.197 cv
93.1401 116.207 93.0664 116.21 93.0005 116.21 cv
92.7974 116.21 92.6646 116.165 92.6021 116.07 cv
92.5391 115.979 92.5078 115.854 92.5078 115.702 cv
92.5078 110.635 li
92.5078 109.802 92.188 109.189 91.5483 108.795 cv
90.9033 108.401 90.0635 108.205 89.0308 108.205 cv
88.1387 108.205 87.3555 108.417 86.6807 108.843 cv
86.0049 109.269 85.6538 110.024 85.6265 111.111 cv
87.0063 111.111 li
87.061 110.654 87.1777 110.311 87.3589 110.08 cv
87.6807 109.661 88.2271 109.452 88.9976 109.452 cv
89.6636 109.452 90.1763 109.567 90.5337 109.794 cv
90.8911 110.022 91.0708 110.389 91.0708 110.896 cv
91.0708 111.142 91.0376 111.332 90.9722 111.463 cv
90.8569 111.704 90.6304 111.846 90.2905 111.889 cv
87.9346 112.186 li
87.9346 112.186 li
cp
86.71 114.875 mo
86.71 114.312 86.9385 113.903 87.396 113.646 cv
87.666 113.493 88.0688 113.382 88.604 113.311 cv
89.498 113.195 li
89.771 113.163 90.0488 113.108 90.333 113.031 cv
90.6167 112.954 90.8491 112.858 91.0293 112.743 cv
91.0293 113.931 li
91.0293 114.838 90.6187 115.492 89.7979 115.891 cv
89.3105 116.131 88.8071 116.251 88.2871 116.251 cv
87.8604 116.251 87.4907 116.128 87.1792 115.883 cv
86.8667 115.637 86.71 115.301 86.71 114.875 cv
86.71 114.875 li
86.71 114.875 li
cp
82.8438 104.953 mo
81.8188 106.557 81.146 107.761 80.8232 108.566 cv
80.3135 109.83 80.0596 111.273 80.0596 112.893 cv
80.0596 113.326 80.0889 113.78 80.1494 114.256 cv
80.2695 115.175 80.4834 116.041 80.7905 116.851 cv
81.0146 117.442 81.2231 117.91 81.4141 118.255 cv
81.606 118.6 82.1011 119.396 82.9009 120.644 cv
83.894 120.644 li
83.0898 119.123 82.5503 117.957 82.2759 117.146 cv
81.833 115.833 81.6113 114.382 81.6113 112.794 cv
81.6113 111.224 81.8057 109.838 82.1943 108.639 cv
82.4521 107.851 83.0107 106.622 83.8701 104.953 cv
82.8438 104.953 li
82.8438 104.953 li
cp
.580072 .46009 .410468 .949004 cmyk
f
98.0166 242.458 mo
99.0342 240.871 99.7046 239.669 100.028 238.853 cv
100.542 237.583 100.799 236.139 100.799 234.519 cv
100.799 233.901 100.744 233.255 100.631 232.589 cv
100.519 231.92 100.332 231.244 100.069 230.559 cv
99.8613 230.007 99.6675 229.573 99.4907 229.258 cv
99.3115 228.945 98.8018 228.113 97.958 226.767 cv
96.9653 226.767 li
97.7695 228.29 98.3091 229.455 98.583 230.263 cv
99.0259 231.578 99.248 233.026 99.248 234.608 cv
99.248 236.191 99.0562 237.57 98.6738 238.748 cv
98.4209 239.523 97.8599 240.761 96.9902 242.458 cv
98.0166 242.458 li
98.0166 242.458 li
cp
91.8662 237.999 mo
90.7998 237.999 90.0728 237.515 89.6826 236.545 cv
89.4731 236.031 89.3696 235.361 89.3696 234.534 cv
89.3696 233.39 89.6235 232.569 90.1313 232.071 cv
90.6392 231.574 91.2314 231.324 91.9072 231.324 cv
92.6821 231.324 93.2681 231.628 93.6665 232.234 cv
94.0645 232.843 94.2632 233.61 94.2632 234.534 cv
94.2632 235.574 94.0645 236.412 93.6665 237.047 cv
93.2681 237.681 92.668 237.999 91.8662 237.999 cv
91.8662 237.999 li
91.8662 237.999 li
cp
88.0146 239.026 mo
89.3774 239.026 li
89.3774 237.901 li
89.6909 238.323 89.9844 238.628 90.2598 238.82 cv
90.7212 239.144 91.2876 239.306 91.958 239.306 cv
93.1563 239.306 94.0923 238.845 94.769 237.926 cv
95.4438 237.006 95.7827 235.851 95.7827 234.46 cv
95.7827 232.995 95.4409 231.883 94.7563 231.13 cv
94.0723 230.377 93.1802 230.001 92.0815 230.001 cv
91.5532 230.001 91.0645 230.113 90.6147 230.334 cv
90.1641 230.557 89.7754 230.877 89.4517 231.299 cv
89.4517 226.923 li
88.0146 226.923 li
88.0146 239.026 li
88.0146 239.026 li
cp
85.4033 226.767 mo
84.3799 228.371 83.7065 229.576 83.3833 230.379 cv
82.8745 231.645 82.6206 233.085 82.6206 234.707 cv
82.6206 235.138 82.6494 235.594 82.7104 236.07 cv
82.8306 236.99 83.0439 237.855 83.3506 238.666 cv
83.5752 239.255 83.7827 239.724 83.9751 240.068 cv
84.166 240.414 84.6616 241.21 85.4614 242.458 cv
86.4551 242.458 li
85.6499 240.936 85.1099 239.771 84.8369 238.959 cv
84.394 237.647 84.1719 236.196 84.1719 234.608 cv
84.1719 233.038 84.3662 231.652 84.7544 230.454 cv
85.0122 229.665 85.5703 228.435 86.4297 226.767 cv
85.4033 226.767 li
85.4033 226.767 li
cp
f
193.397 8.0459 mo
289.339 8.0459 li
289.339 65.7188 li
193.397 65.7188 li
193.397 8.0459 li
cp
187.468 .5 mo
538.365 224.568 mo
187.468 224.568 li
187.468 .5 li
538.365 .5 li
@
203.043 15.3652 mo
206.543 15.3652 li
206.543 19.0073 li
203.043 19.0073 li
203.043 15.3652 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
210.625 18.4009 mo
214.125 18.4009 li
214.125 22.043 li
210.625 22.043 li
210.625 18.4009 li
cp
f
200.127 23.8643 mo
203.627 23.8643 li
203.627 27.5073 li
200.127 27.5073 li
200.127 23.8643 li
cp
f
206.251 23.8643 mo
209.75 23.8643 li
209.75 27.5073 li
206.251 27.5073 li
206.251 23.8643 li
cp
f
210.625 29.3281 mo
214.125 29.3281 li
214.125 32.9707 li
210.625 32.9707 li
210.625 29.3281 li
cp
f
217.624 23.8643 mo
221.123 23.8643 li
221.123 27.5073 li
217.624 27.5073 li
217.624 23.8643 li
cp
f
217.624 30.5425 mo
221.123 30.5425 li
221.123 34.1851 li
217.624 34.1851 li
217.624 30.5425 li
cp
f
223.165 29.3281 mo
226.664 29.3281 li
226.664 32.9707 li
223.165 32.9707 li
223.165 29.3281 li
cp
f
228.997 21.1328 mo
232.497 21.1328 li
232.497 24.7749 li
228.997 24.7749 li
228.997 21.1328 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
235.121 21.1328 mo
238.62 21.1328 li
238.62 24.7749 li
235.121 24.7749 li
235.121 21.1328 li
cp
f
225.789 15.3652 mo
229.288 15.3652 li
229.288 19.0073 li
225.789 19.0073 li
225.789 15.3652 li
cp
f
231.33 12.0264 mo
234.83 12.0264 li
234.83 15.6689 li
231.33 15.6689 li
231.33 12.0264 li
cp
f
236.871 10.812 mo
240.371 10.812 li
240.371 14.4541 li
236.871 14.4541 li
236.871 10.812 li
cp
f
265.449 33.4263 mo
266.104 35.6284 li
268.223 35.6284 li
266.509 36.9893 li
267.164 39.1914 li
265.449 37.8306 li
263.735 39.1914 li
264.39 36.9893 li
262.676 35.6284 li
264.794 35.6284 li
265.449 33.4263 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
258.45 42.0767 mo
259.105 44.2793 li
261.224 44.2793 li
259.51 45.6406 li
260.165 47.8423 li
258.45 46.481 li
256.736 47.8423 li
257.392 45.6406 li
255.677 44.2793 li
257.796 44.2793 li
258.45 42.0767 li
cp
f
266.907 48.4512 mo
267.561 50.6533 li
269.68 50.6533 li
267.967 52.0142 li
268.622 54.2163 li
266.907 52.856 li
265.193 54.2163 li
265.848 52.0142 li
264.134 50.6533 li
266.253 50.6533 li
266.907 48.4512 li
cp
f
273.323 48.4512 mo
273.977 50.6533 li
276.096 50.6533 li
274.382 52.0142 li
275.038 54.2163 li
273.323 52.856 li
271.609 54.2163 li
272.263 52.0142 li
270.548 50.6533 li
272.669 50.6533 li
273.323 48.4512 li
cp
f
273.323 38.7383 mo
273.977 40.9404 li
276.096 40.9404 li
274.382 42.3018 li
275.038 44.5034 li
273.323 43.1426 li
271.609 44.5034 li
272.263 42.3018 li
270.548 40.9404 li
272.669 40.9404 li
273.323 38.7383 li
cp
f
273.032 15.6689 mo
273.686 17.8711 li
275.804 17.8711 li
274.09 19.2319 li
274.746 21.4346 li
273.032 20.0732 li
271.317 21.4346 li
271.972 19.2319 li
270.257 17.8711 li
272.376 17.8711 li
273.032 15.6689 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
277.114 30.5425 mo
277.769 32.7446 li
279.886 32.7446 li
278.173 34.1055 li
278.828 36.3076 li
277.114 34.9468 li
275.401 36.3076 li
276.055 34.1055 li
274.34 32.7446 li
276.458 32.7446 li
277.114 30.5425 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
271.282 27.9619 mo
271.937 30.1641 li
274.055 30.1641 li
272.34 31.5259 li
272.996 33.728 li
271.282 32.3667 li
269.567 33.728 li
270.222 31.5259 li
268.508 30.1641 li
270.626 30.1641 li
271.282 27.9619 li
cp
f
282.946 23.8643 mo
283.601 26.0664 li
285.718 26.0664 li
284.005 27.4277 li
284.661 29.6299 li
282.946 28.2686 li
281.233 29.6299 li
281.887 27.4277 li
280.172 26.0664 li
282.292 26.0664 li
282.946 23.8643 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
282.946 15.3652 mo
283.601 17.5674 li
285.718 17.5674 li
284.005 18.9282 li
284.661 21.1313 li
282.946 19.7695 li
281.233 21.1313 li
281.887 18.9282 li
280.172 17.5674 li
282.292 17.5674 li
282.946 15.3652 li
cp
f
275.948 9.44629 mo
276.602 11.6484 li
278.72 11.6484 li
277.006 13.0093 li
277.662 15.2114 li
275.948 13.8506 li
274.233 15.2114 li
274.888 13.0093 li
273.174 11.6484 li
275.293 11.6484 li
275.948 9.44629 li
cp
f
203.114 48.0742 mo
203.797 48.7852 203.797 49.9385 203.114 50.6494 cv
202.431 51.3613 201.323 51.3613 200.64 50.6494 cv
199.956 49.9385 199.956 48.7852 200.64 48.0742 cv
201.323 47.3623 202.431 47.3623 203.114 48.0742 cv
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
207.196 55.3589 mo
207.88 56.0703 207.88 57.2231 207.196 57.9351 cv
206.513 58.646 205.405 58.646 204.722 57.9351 cv
204.039 57.2231 204.039 56.0703 204.722 55.3589 cv
205.405 54.6479 206.513 54.6479 207.196 55.3589 cv
f
211.862 48.9844 mo
212.546 49.6958 212.546 50.8486 211.862 51.5605 cv
211.179 52.2715 210.071 52.2715 209.388 51.5605 cv
208.705 50.8486 208.705 49.6958 209.388 48.9844 cv
210.071 48.2734 211.179 48.2734 211.862 48.9844 cv
f
213.612 54.145 mo
214.295 54.8564 214.295 56.0093 213.612 56.7207 cv
212.929 57.4321 211.821 57.4321 211.138 56.7207 cv
210.455 56.0093 210.455 54.8564 211.138 54.145 cv
211.821 53.4336 212.929 53.4336 213.612 54.145 cv
f
216.236 59.3052 mo
216.92 60.0161 216.92 61.1694 216.236 61.8804 cv
215.553 62.5918 214.445 62.5918 213.762 61.8804 cv
213.079 61.1694 213.079 60.0161 213.762 59.3052 cv
214.445 58.5938 215.553 58.5938 216.236 59.3052 cv
f
220.611 60.519 mo
221.294 61.2305 221.294 62.3838 220.611 63.0947 cv
219.928 63.8062 218.82 63.8062 218.137 63.0947 cv
217.453 62.3838 217.453 61.2305 218.137 60.519 cv
218.82 59.8076 219.928 59.8076 220.611 60.519 cv
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
228.776 60.519 mo
229.459 61.2305 229.459 62.3838 228.776 63.0947 cv
228.093 63.8062 226.985 63.8062 226.302 63.0947 cv
225.618 62.3838 225.618 61.2305 226.302 60.519 cv
226.985 59.8076 228.093 59.8076 228.776 60.519 cv
f
223.235 54.145 mo
223.919 54.8564 223.919 56.0093 223.235 56.7207 cv
222.552 57.4321 221.444 57.4321 220.761 56.7207 cv
220.078 56.0093 220.078 54.8564 220.761 54.145 cv
221.444 53.4336 222.552 53.4336 223.235 54.145 cv
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
220.611 48.9844 mo
221.294 49.6958 221.294 50.8486 220.611 51.5605 cv
219.928 52.2715 218.82 52.2715 218.137 51.5605 cv
217.453 50.8486 217.453 49.6958 218.137 48.9844 cv
218.82 48.2734 219.928 48.2734 220.611 48.9844 cv
f
228.776 51.7163 mo
229.459 52.4277 229.459 53.5811 228.776 54.2925 cv
228.093 55.0034 226.985 55.0034 226.302 54.2925 cv
225.618 53.5811 225.618 52.4277 226.302 51.7163 cv
226.985 51.0059 228.093 51.0059 228.776 51.7163 cv
f
238.107 48.0742 mo
238.792 48.7852 238.792 49.9385 238.107 50.6494 cv
237.424 51.3613 236.316 51.3613 235.634 50.6494 cv
234.951 49.9385 234.951 48.7852 235.634 48.0742 cv
236.316 47.3623 237.424 47.3623 238.107 48.0742 cv
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
236.941 54.145 mo
237.625 54.8564 237.625 56.0093 236.941 56.7207 cv
236.258 57.4321 235.15 57.4321 234.467 56.7207 cv
233.784 56.0093 233.784 54.8564 234.467 54.145 cv
235.15 53.4336 236.258 53.4336 236.941 54.145 cv
f
231.984 45.3418 mo
232.667 46.0537 232.667 47.2065 231.984 47.918 cv
231.301 48.6294 230.193 48.6294 229.51 47.918 cv
228.826 47.2065 228.826 46.0537 229.51 45.3418 cv
230.193 44.6309 231.301 44.6309 231.984 45.3418 cv
f
193.397 85.3926 mo
289.339 85.3926 li
289.339 143.065 li
193.397 143.065 li
193.397 85.3926 li
cp
.580072 .46009 .410468 .949004 cmyk
@
203.043 92.7119 mo
206.543 92.7119 li
206.543 96.3545 li
203.043 96.3545 li
203.043 92.7119 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
210.625 95.7471 mo
214.125 95.7471 li
214.125 99.3896 li
210.625 99.3896 li
210.625 95.7471 li
cp
f
200.127 101.211 mo
203.627 101.211 li
203.627 104.853 li
200.127 104.853 li
200.127 101.211 li
cp
f
206.25 101.211 mo
209.75 101.211 li
209.75 104.853 li
206.25 104.853 li
206.25 101.211 li
cp
f
210.625 106.674 mo
214.125 106.674 li
214.125 110.317 li
210.625 110.317 li
210.625 106.674 li
cp
f
217.625 101.211 mo
221.123 101.211 li
221.123 104.853 li
217.625 104.853 li
217.625 101.211 li
cp
f
217.625 107.889 mo
221.123 107.889 li
221.123 111.531 li
217.625 111.531 li
217.625 107.889 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
223.164 106.674 mo
226.664 106.674 li
226.664 110.317 li
223.164 110.317 li
223.164 106.674 li
cp
f
228.997 98.4785 mo
232.497 98.4785 li
232.497 102.121 li
228.997 102.121 li
228.997 98.4785 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
235.121 98.4785 mo
238.621 98.4785 li
238.621 102.121 li
235.121 102.121 li
235.121 98.4785 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
225.789 92.7119 mo
229.289 92.7119 li
229.289 96.3545 li
225.789 96.3545 li
225.789 92.7119 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
231.33 89.3726 mo
234.829 89.3726 li
234.829 93.0151 li
231.33 93.0151 li
231.33 89.3726 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
236.871 88.1587 mo
240.371 88.1587 li
240.371 91.8013 li
236.871 91.8013 li
236.871 88.1587 li
cp
f
265.449 110.772 mo
266.104 112.975 li
268.223 112.975 li
266.509 114.336 li
267.164 116.539 li
265.449 115.177 li
263.735 116.539 li
264.39 114.336 li
262.676 112.975 li
264.794 112.975 li
265.449 110.772 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
258.45 119.423 mo
259.105 121.625 li
261.224 121.625 li
259.51 122.987 li
260.165 125.189 li
258.45 123.828 li
256.736 125.189 li
257.391 122.987 li
255.677 121.625 li
257.796 121.625 li
258.45 119.423 li
cp
f
266.907 125.798 mo
267.561 128 li
269.68 128 li
267.967 129.362 li
268.622 131.562 li
266.907 130.202 li
265.193 131.562 li
265.848 129.362 li
264.134 128 li
266.253 128 li
266.907 125.798 li
cp
f
273.323 125.798 mo
273.977 128 li
276.096 128 li
274.382 129.362 li
275.038 131.562 li
273.323 130.202 li
271.609 131.562 li
272.263 129.362 li
270.548 128 li
272.669 128 li
273.323 125.798 li
cp
f
273.323 116.084 mo
273.977 118.287 li
276.096 118.287 li
274.382 119.648 li
275.038 121.85 li
273.323 120.489 li
271.609 121.85 li
272.263 119.648 li
270.548 118.287 li
272.669 118.287 li
273.323 116.084 li
cp
f
273.032 93.0151 mo
273.686 95.2173 li
275.804 95.2173 li
274.09 96.5791 li
274.746 98.7813 li
273.032 97.4199 li
271.317 98.7813 li
271.972 96.5791 li
270.257 95.2173 li
272.376 95.2173 li
273.032 93.0151 li
cp
f
277.114 107.889 mo
277.769 110.091 li
279.886 110.091 li
278.173 111.452 li
278.828 113.655 li
277.114 112.293 li
275.399 113.655 li
276.054 111.452 li
274.34 110.091 li
276.458 110.091 li
277.114 107.889 li
cp
f
271.282 105.309 mo
271.937 107.511 li
274.055 107.511 li
272.34 108.872 li
272.996 111.074 li
271.282 109.713 li
269.569 111.074 li
270.222 108.872 li
268.508 107.511 li
270.626 107.511 li
271.282 105.309 li
cp
f
282.946 101.211 mo
283.601 103.413 li
285.718 103.413 li
284.005 104.774 li
284.661 106.976 li
282.946 105.615 li
281.233 106.976 li
281.887 104.774 li
280.172 103.413 li
282.292 103.413 li
282.946 101.211 li
cp
f
282.946 92.7119 mo
283.601 94.9141 li
285.718 94.9141 li
284.005 96.2754 li
284.661 98.4775 li
282.946 97.1167 li
281.233 98.4775 li
281.887 96.2754 li
280.172 94.9141 li
282.292 94.9141 li
282.946 92.7119 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
275.948 86.792 mo
276.602 88.9941 li
278.72 88.9941 li
277.006 90.356 li
277.662 92.5581 li
275.948 91.1973 li
274.233 92.5581 li
274.887 90.356 li
273.174 88.9941 li
275.293 88.9941 li
275.948 86.792 li
cp
f
203.114 125.42 mo
203.797 126.131 203.797 127.285 203.114 127.996 cv
202.431 128.708 201.323 128.708 200.64 127.996 cv
199.956 127.285 199.956 126.131 200.64 125.42 cv
201.323 124.71 202.431 124.71 203.114 125.42 cv
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
207.196 132.706 mo
207.88 133.417 207.88 134.57 207.196 135.282 cv
206.513 135.993 205.405 135.993 204.722 135.282 cv
204.039 134.57 204.039 133.417 204.722 132.706 cv
205.405 131.995 206.513 131.995 207.196 132.706 cv
f
211.862 126.331 mo
212.546 127.042 212.546 128.196 211.862 128.907 cv
211.179 129.618 210.071 129.618 209.388 128.907 cv
208.705 128.196 208.705 127.042 209.388 126.331 cv
210.071 125.62 211.179 125.62 211.862 126.331 cv
f
213.612 131.492 mo
214.295 132.203 214.295 133.356 213.612 134.067 cv
212.929 134.779 211.821 134.779 211.138 134.067 cv
210.455 133.356 210.455 132.203 211.138 131.492 cv
211.821 130.781 212.929 130.781 213.612 131.492 cv
f
216.236 136.651 mo
216.92 137.363 216.92 138.516 216.236 139.227 cv
215.553 139.939 214.445 139.939 213.762 139.227 cv
213.079 138.516 213.079 137.363 213.762 136.651 cv
214.445 135.941 215.553 135.941 216.236 136.651 cv
f
220.611 137.866 mo
221.294 138.577 221.294 139.73 220.611 140.441 cv
219.928 141.153 218.82 141.153 218.137 140.441 cv
217.453 139.73 217.453 138.577 218.137 137.866 cv
218.82 137.155 219.928 137.155 220.611 137.866 cv
f
228.776 137.866 mo
229.459 138.577 229.459 139.73 228.776 140.441 cv
228.093 141.153 226.985 141.153 226.302 140.441 cv
225.619 139.73 225.619 138.577 226.302 137.866 cv
226.985 137.155 228.093 137.155 228.776 137.866 cv
f
223.235 131.492 mo
223.919 132.203 223.919 133.356 223.235 134.067 cv
222.552 134.779 221.444 134.779 220.761 134.067 cv
220.078 133.356 220.078 132.203 220.761 131.492 cv
221.444 130.781 222.552 130.781 223.235 131.492 cv
f
220.611 126.331 mo
221.294 127.042 221.294 128.196 220.611 128.907 cv
219.928 129.618 218.82 129.618 218.137 128.907 cv
217.453 128.196 217.453 127.042 218.137 126.331 cv
218.82 125.62 219.928 125.62 220.611 126.331 cv
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
228.776 129.063 mo
229.459 129.775 229.459 130.927 228.776 131.639 cv
228.093 132.35 226.985 132.35 226.302 131.639 cv
225.619 130.927 225.619 129.775 226.302 129.063 cv
226.985 128.352 228.093 128.352 228.776 129.063 cv
f
238.107 125.42 mo
238.792 126.131 238.792 127.285 238.107 127.996 cv
237.424 128.708 236.316 128.708 235.634 127.996 cv
234.951 127.285 234.951 126.131 235.634 125.42 cv
236.316 124.71 237.424 124.71 238.107 125.42 cv
f
236.942 131.492 mo
237.625 132.203 237.625 133.356 236.942 134.067 cv
236.258 134.779 235.151 134.779 234.467 134.067 cv
233.784 133.356 233.784 132.203 234.467 131.492 cv
235.151 130.781 236.258 130.781 236.942 131.492 cv
f
231.984 122.688 mo
232.667 123.4 232.667 124.553 231.984 125.264 cv
231.301 125.975 230.193 125.975 229.51 125.264 cv
228.826 124.553 228.826 123.4 229.51 122.688 cv
230.193 121.977 231.301 121.977 231.984 122.688 cv
f
193.397 160.044 mo
289.339 160.044 li
289.339 217.717 li
193.397 217.717 li
193.397 160.044 li
cp
.580072 .46009 .410468 .949004 cmyk
@
203.043 167.363 mo
206.543 167.363 li
206.543 171.005 li
203.043 171.005 li
203.043 167.363 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
210.625 170.399 mo
214.125 170.399 li
214.125 174.041 li
210.625 174.041 li
210.625 170.399 li
cp
f
200.127 175.862 mo
203.627 175.862 li
203.627 179.504 li
200.127 179.504 li
200.127 175.862 li
cp
f
206.25 175.862 mo
209.75 175.862 li
209.75 179.504 li
206.25 179.504 li
206.25 175.862 li
cp
f
210.625 181.326 mo
214.125 181.326 li
214.125 184.968 li
210.625 184.968 li
210.625 181.326 li
cp
f
217.625 175.862 mo
221.123 175.862 li
221.123 179.504 li
217.625 179.504 li
217.625 175.862 li
cp
f
217.625 182.541 mo
221.123 182.541 li
221.123 186.182 li
217.625 186.182 li
217.625 182.541 li
cp
f
223.164 181.326 mo
226.664 181.326 li
226.664 184.968 li
223.164 184.968 li
223.164 181.326 li
cp
f
228.997 173.13 mo
232.497 173.13 li
232.497 176.773 li
228.997 176.773 li
228.997 173.13 li
cp
f
235.121 173.13 mo
238.621 173.13 li
238.621 176.773 li
235.121 176.773 li
235.121 173.13 li
cp
f
225.789 167.363 mo
229.289 167.363 li
229.289 171.005 li
225.789 171.005 li
225.789 167.363 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
231.33 164.024 mo
234.829 164.024 li
234.829 167.667 li
231.33 167.667 li
231.33 164.024 li
cp
f
236.871 162.81 mo
240.371 162.81 li
240.371 166.453 li
236.871 166.453 li
236.871 162.81 li
cp
f
265.449 185.423 mo
266.104 187.625 li
268.223 187.625 li
266.509 188.987 li
267.164 191.19 li
265.449 189.83 li
263.735 191.19 li
264.39 188.987 li
262.676 187.625 li
264.794 187.625 li
265.449 185.423 li
cp
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
258.45 194.076 mo
259.105 196.277 li
261.224 196.277 li
259.51 197.637 li
260.165 199.839 li
258.45 198.479 li
256.736 199.839 li
257.391 197.637 li
255.677 196.277 li
257.796 196.277 li
258.45 194.076 li
cp
f
266.907 200.449 mo
267.561 202.651 li
269.68 202.651 li
267.967 204.012 li
268.622 206.214 li
266.907 204.853 li
265.193 206.214 li
265.848 204.012 li
264.134 202.651 li
266.253 202.651 li
266.907 200.449 li
cp
f
273.323 200.449 mo
273.977 202.651 li
276.096 202.651 li
274.382 204.012 li
275.038 206.214 li
273.323 204.853 li
271.609 206.214 li
272.263 204.012 li
270.548 202.651 li
272.669 202.651 li
273.323 200.449 li
cp
f
273.323 190.736 mo
273.977 192.938 li
276.096 192.938 li
274.382 194.299 li
275.038 196.501 li
273.323 195.14 li
271.609 196.501 li
272.263 194.299 li
270.548 192.938 li
272.669 192.938 li
273.323 190.736 li
cp
f
273.032 167.667 mo
273.686 169.869 li
275.804 169.869 li
274.09 171.23 li
274.746 173.432 li
273.032 172.071 li
271.317 173.432 li
271.972 171.23 li
270.257 169.869 li
272.376 169.869 li
273.032 167.667 li
cp
f
277.114 182.541 mo
277.769 184.743 li
279.886 184.743 li
278.173 186.104 li
278.828 188.306 li
277.114 186.945 li
275.399 188.306 li
276.054 186.104 li
274.34 184.743 li
276.458 184.743 li
277.114 182.541 li
cp
f
271.282 179.96 mo
271.937 182.163 li
274.055 182.163 li
272.34 183.524 li
272.996 185.726 li
271.282 184.365 li
269.569 185.726 li
270.222 183.524 li
268.508 182.163 li
270.626 182.163 li
271.282 179.96 li
cp
f
282.946 175.862 mo
283.601 178.064 li
285.718 178.064 li
284.005 179.425 li
284.661 181.627 li
282.946 180.266 li
281.233 181.627 li
281.887 179.425 li
280.172 178.064 li
282.292 178.064 li
282.946 175.862 li
cp
f
282.946 167.363 mo
283.601 169.565 li
285.718 169.565 li
284.005 170.927 li
284.661 173.128 li
282.946 171.767 li
281.233 173.128 li
281.887 170.927 li
280.172 169.565 li
282.292 169.565 li
282.946 167.363 li
cp
f
275.948 161.444 mo
276.602 163.646 li
278.72 163.646 li
277.006 165.007 li
277.662 167.209 li
275.948 165.848 li
274.233 167.209 li
274.887 165.007 li
273.174 163.646 li
275.293 163.646 li
275.948 161.444 li
cp
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
203.114 200.072 mo
203.797 200.783 203.797 201.937 203.114 202.648 cv
202.431 203.359 201.323 203.359 200.64 202.648 cv
199.956 201.937 199.956 200.783 200.64 200.072 cv
201.323 199.362 202.431 199.362 203.114 200.072 cv
3.0518e-5 .977325 .964996 3.0518e-5 cmyk
f
207.196 207.357 mo
207.88 208.07 207.88 209.222 207.196 209.933 cv
206.513 210.644 205.405 210.644 204.722 209.933 cv
204.039 209.222 204.039 208.07 204.722 207.357 cv
205.405 206.646 206.513 206.646 207.196 207.357 cv
f
211.862 200.983 mo
212.546 201.694 212.546 202.847 211.862 203.558 cv
211.179 204.269 210.071 204.269 209.388 203.558 cv
208.705 202.847 208.705 201.694 209.388 200.983 cv
210.071 200.272 211.179 200.272 211.862 200.983 cv
f
213.612 206.142 mo
214.295 206.854 214.295 208.007 213.612 208.718 cv
212.929 209.43 211.821 209.43 211.138 208.718 cv
210.455 208.007 210.455 206.854 211.138 206.142 cv
211.821 205.432 212.929 205.432 213.612 206.142 cv
f
216.236 211.303 mo
216.92 212.015 216.92 213.167 216.236 213.878 cv
215.553 214.591 214.445 214.591 213.762 213.878 cv
213.079 213.167 213.079 212.015 213.762 211.303 cv
214.445 210.591 215.553 210.591 216.236 211.303 cv
f
220.611 212.517 mo
221.294 213.229 221.294 214.381 220.611 215.092 cv
219.928 215.804 218.82 215.804 218.137 215.092 cv
217.453 214.381 217.453 213.229 218.137 212.517 cv
218.82 211.806 219.928 211.806 220.611 212.517 cv
f
228.776 212.517 mo
229.459 213.229 229.459 214.381 228.776 215.092 cv
228.093 215.804 226.985 215.804 226.302 215.092 cv
225.619 214.381 225.619 213.229 226.302 212.517 cv
226.985 211.806 228.093 211.806 228.776 212.517 cv
f
223.235 206.142 mo
223.919 206.854 223.919 208.007 223.235 208.718 cv
222.552 209.43 221.444 209.43 220.761 208.718 cv
220.078 208.007 220.078 206.854 220.761 206.142 cv
221.444 205.432 222.552 205.432 223.235 206.142 cv
f
220.611 200.983 mo
221.294 201.694 221.294 202.847 220.611 203.558 cv
219.928 204.269 218.82 204.269 218.137 203.558 cv
217.453 202.847 217.453 201.694 218.137 200.983 cv
218.82 200.272 219.928 200.272 220.611 200.983 cv
f
228.776 203.714 mo
229.459 204.426 229.459 205.58 228.776 206.291 cv
228.093 207.001 226.985 207.001 226.302 206.291 cv
225.619 205.58 225.619 204.426 226.302 203.714 cv
226.985 203.003 228.093 203.003 228.776 203.714 cv
f
238.107 200.072 mo
238.792 200.783 238.792 201.937 238.107 202.648 cv
237.424 203.359 236.316 203.359 235.634 202.648 cv
234.951 201.937 234.951 200.783 235.634 200.072 cv
236.316 199.362 237.424 199.362 238.107 200.072 cv
.836423 .687343 3.0518e-5 3.0518e-5 cmyk
f
236.942 206.142 mo
237.625 206.854 237.625 208.007 236.942 208.718 cv
236.258 209.43 235.151 209.43 234.467 208.718 cv
233.784 208.007 233.784 206.854 234.467 206.142 cv
235.151 205.432 236.258 205.432 236.942 206.142 cv
f
231.984 197.34 mo
232.667 198.051 232.667 199.205 231.984 199.915 cv
231.301 200.627 230.193 200.627 229.51 199.915 cv
228.826 199.205 228.826 198.051 229.51 197.34 cv
230.193 196.629 231.301 196.629 231.984 197.34 cv
f
372.236 243.458 mo
373.252 241.871 373.924 240.669 374.247 239.853 cv
374.76 238.583 375.018 237.139 375.018 235.519 cv
375.018 234.901 374.962 234.255 374.849 233.589 cv
374.738 232.92 374.55 232.244 374.289 231.559 cv
374.081 231.007 373.886 230.573 373.708 230.258 cv
373.531 229.945 373.02 229.113 372.177 227.767 cv
371.183 227.767 li
371.988 229.29 372.528 230.455 372.8 231.263 cv
373.245 232.578 373.467 234.026 373.467 235.608 cv
373.467 237.191 373.274 238.57 372.892 239.748 cv
372.639 240.523 372.08 241.761 371.208 243.458 cv
372.236 243.458 li
372.236 243.458 li
cp
366.693 230.976 mo
365.531 230.976 364.575 231.406 363.826 232.266 cv
363.076 233.125 362.702 234.328 362.702 235.871 cv
362.702 237.13 363.044 238.18 363.728 239.02 cv
364.413 239.861 365.328 240.281 366.478 240.281 cv
367.501 240.281 368.342 240.012 369 239.471 cv
369.656 238.933 370.067 238.08 370.231 236.915 cv
368.795 236.915 li
368.658 237.563 368.411 238.075 368.051 238.448 cv
367.693 238.821 367.207 239.009 366.593 239.009 cv
365.793 239.009 365.208 238.707 364.835 238.106 cv
364.463 237.504 364.278 236.763 364.278 235.883 cv
364.278 235.007 364.408 234.274 364.671 233.678 cv
365.077 232.759 365.75 232.299 366.693 232.299 cv
367.38 232.299 367.882 232.478 368.196 232.837 cv
368.507 233.195 368.707 233.645 368.795 234.188 cv
370.231 234.188 li
370.104 233.01 369.732 232.181 369.11 231.699 cv
368.489 231.217 367.683 230.976 366.693 230.976 cv
366.693 230.976 li
366.693 230.976 li
cp
360.566 227.767 mo
359.542 229.371 358.87 230.576 358.547 231.379 cv
358.037 232.645 357.783 234.085 357.783 235.707 cv
357.783 236.138 357.812 236.594 357.872 237.07 cv
357.993 237.99 358.208 238.855 358.513 239.666 cv
358.738 240.255 358.946 240.724 359.138 241.068 cv
359.33 241.414 359.824 242.21 360.624 243.458 cv
361.617 243.458 li
360.812 241.936 360.273 240.771 360 239.959 cv
359.557 238.647 359.334 237.196 359.334 235.608 cv
359.334 234.038 359.529 232.652 359.918 231.454 cv
360.175 230.665 360.732 229.435 361.593 227.767 cv
360.566 227.767 li
360.566 227.767 li
cp
.580072 .46009 .410468 .949004 cmyk
f
%ADOBeginSubsetFont: TimesNewRomanPSMT Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /TimesNewRomanPSMT def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/FSType 8 def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 127 /Phi put
def
/FontBBox {-568 -307 2000 1007} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/.notdef <1C60D8A8C9B6FF86FBD66B095379F45880CA28D0F0C4629F99B72E
FEDBB222483BD74F8B> |-
/Phi <1C60D8A8C9B60E3AA590701702B87C4D4D42E3DD07A9FA6114894514D5
A2AD92DD88854A51DF664D76861BB550CFDCD59BB5EFCEACD9F30BF4050BC1E7
23AB30A31587FB4070C6118140C931AD887E77B7F2C2228F066CAF432313DA63
F43DD906D1E513C370ADC670A43335AEC0555E8C63F31CA3E4ABAA1DE0B8BA86
8AD1FD974E0118753CDD47E0AB62E89731EC50827AF0E733E3757085D7C23346
35BCEED1677964EF3F62A1D3543C0649> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/ROYQKJ+TimesNewRomanPSMT /TimesNewRomanPSMT findfont ct_VMDictPut
/ROYQKJ+TimesNewRomanPSMT*1 
[127{/.notdef}rp /Phi 128{/.notdef}rp]
ROYQKJ+TimesNewRomanPSMT nf
ROYQKJ+TimesNewRomanPSMT*1 [19.4175 0 0 -18 0 0 ]msf
322.359 42.0957 mo
(\177)sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ROYQKJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/one <1C60D8A8C9B7A73DB92A3F8C4B412A6756A4F8D8439622AB29A83C93F5
89D112DBEAB54F9ACF0D9BFA06C28638F8F8CA9EE7AFD734575522301B5C0272
0FA00A934493EC3D856AF45EEE1D7462FF2375B7250579D34D9C249B6BEBF8EF
41DB28C0847307B8DCBC66> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ROYQKJ+TimesNewRomanPSMT /Encoding get
dup 49 /one put
pop
%ADOEndSubsetFont
/ROYQKJ+TimesNewRomanPSMT*1 
[49{/.notdef}rp /one 77{/.notdef}rp /Phi 128{/.notdef}rp]
ROYQKJ+TimesNewRomanPSMT nf
ROYQKJ+TimesNewRomanPSMT*1 [12.0149 0 0 -11.1378 0 0 ]msf
335.703 44.4834 mo
(1)sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ROYQKJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/parenleft <1C60D8A8C9B81F2C3AC09B674C4ECE2BEF4D70AD3508D915EA9A
E12419376F6EEF231ECE8179CA4531F29291ACACE060AEF98AD6F2FFF2BEA533
946FFA1C8BC3953D72A31BB8ABD9782D71B2146F964D99646263E2D414F84FA0
49D36B9B13B7F6C8AA7A4A5EB0> |-
/parenright <1C60D8A8C9B81F2C3CA029BC286E27661FD7F18B990CFF4A0AF
58404A2F35E11D14FBA406192D392AD203A879E34B8FA3132863211808E5BD63
BDAA607B8E04E23E92C61AAA8B57E5E7609689020D20EB927A1EC6CC0BC06B54
0A016D558248DC4A3E8183F5F> |-
/x <1C60D8A8C9B7A73DD670F5272DD145294083C4293196A1DBA349EF195DAA
DD76F8FA5D95CD31B7A1C2B32491F1D3BDEAF32234D0995EB67A2BEF06777B5B
8AB01E1FC457D70FEE563CF2C0C851F3CC8B137B00E8CC0DDAE3A128D9A2319F
3FF89B241236A311487E7B00ABDB18C5C11783A73226CB9112660CA259881698
31DBD8D37F0570522652B666847FB24934B522403DA00EF77D9BF6494155BEAC
D6C4576905B10BBFDD62A70CAEE193F073806BE591E56E5DC8424D64A808D752
8EBE8928C7E8D537D6DCC6918CF06863B4A936B7CA4331A2F9> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ROYQKJ+TimesNewRomanPSMT /Encoding get
dup 40 /parenleft put
dup 41 /parenright put
dup 120 /x put
pop
%ADOEndSubsetFont
/ROYQKJ+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one 70{/.notdef}rp /x 6{/.notdef}rp 
/Phi 128{/.notdef}rp]
ROYQKJ+TimesNewRomanPSMT nf
ROYQKJ+TimesNewRomanPSMT*1 [19.4175 0 0 -18 0 0 ]msf
342.471 42.0957 mo
(\(x\))
[6.46582 9.70898 0 ]xsh
2 lw
294.999 42.2729 mo
294.999 31.4927 li
305.779 31.4927 li
305.779 26.1025 li
316.558 36.8823 li
305.779 47.6626 li
305.779 42.2729 li
294.999 42.2729 li
cp
.594812 .526696 .492805 .766567 cmyk
@
.580072 .46009 .410468 .949004 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ROYQKJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/two <1C60D8A8C9B7A73DB6F198797B24E7DF20E340C763AB9A17095FFDDA6B
4B0E4D4AC4BE83AF302018AACAF29AB5FCEB98A93FCCD2C9A968B7CB1B433E25
003CA8A63287F6BD1729C8188A209A7171C9BFB11D2FACEF2FADF63141D976A0
F90EDDE709834FFBF963952A5213F00F39F098C30D0F91D40A57CAEF920CE11E
C41D90433CE0F55F0A42A96AF852FD50FA> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ROYQKJ+TimesNewRomanPSMT /Encoding get
dup 50 /two put
pop
%ADOEndSubsetFont
/ROYQKJ+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two 69{/.notdef}rp /x 
6{/.notdef}rp /Phi 128{/.notdef}rp]
ROYQKJ+TimesNewRomanPSMT nf
ROYQKJ+TimesNewRomanPSMT*1 [19.4175 0 0 -18 0 0 ]msf
322.359 117.829 mo
(\177)sh
ROYQKJ+TimesNewRomanPSMT*1 [12.0149 0 0 -11.1378 0 0 ]msf
335.703 120.214 mo
(2)sh
ROYQKJ+TimesNewRomanPSMT*1 [19.4175 0 0 -18 0 0 ]msf
342.471 117.825 mo
(\(x\))
[6.46582 9.70898 0 ]xsh
297.155 192.923 mo
297.155 182.143 li
307.936 182.143 li
307.936 176.752 li
318.715 187.534 li
307.936 198.313 li
307.936 192.923 li
297.155 192.923 li
cp
.594812 .526696 .492805 .766567 cmyk
@
.580072 .46009 .410468 .949004 cmyk
ROYQKJ+TimesNewRomanPSMT*1 [19.1348 0 0 -18 0 0 ]msf
322.359 193.104 mo
(\177)sh
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ROYQKJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/three <1C60D8A8C9B7A73D83638F79AE86E17D4CE334FAA90E146D21CDA0FE
B71815E9499D6C6A6E581E78F34038D792771470EBF894DABD777E9B4FDE68E7
E1544BCF1EFB2DCE59357B716B4D2ADF3EAC3A9FF8BD07EC79AF5536B9B74185
F8F7489AD909079119E88D2BB755D6F6AC02C01BDFADB347EC55DAC49C8BB047
661CC7AAA3BDC1DB8E01EC56137B53ED31B24F4502353853D049BB0515CA4217
D33D10484933F30AD1EAA43CFDF00AFA5462EE9B1772CE60A3392B8D9C1A3598
CF2273E36A1FF3A58B2E24B1EACE5E34650257902678998DAAFF235764CCCA14
3A> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ROYQKJ+TimesNewRomanPSMT /Encoding get
dup 51 /three put
pop
%ADOEndSubsetFont
/ROYQKJ+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two /three 68{/.notdef}rp 
/x 6{/.notdef}rp /Phi 128{/.notdef}rp]
ROYQKJ+TimesNewRomanPSMT nf
ROYQKJ+TimesNewRomanPSMT*1 [11.2867 0 0 -10.6174 0 0 ]msf
335.885 195.383 mo
(3)sh
ROYQKJ+TimesNewRomanPSMT*1 [19.1348 0 0 -18 0 0 ]msf
342.8 193.104 mo
(\(x\))sh
294.999 116.924 mo
294.999 106.144 li
305.779 106.144 li
305.779 100.754 li
316.558 111.534 li
305.779 122.313 li
305.779 116.924 li
294.999 116.924 li
cp
.594812 .526696 .492805 .766567 cmyk
@
.580072 .46009 .410468 .949004 cmyk
%ADOBeginSubsetFont: TimesNewRomanPSMT AddGlyphs
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2012 Adobe System Incorporated. All rights reserved.
systemdict begin
ROYQKJ+TimesNewRomanPSMT dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/equal <1C60D8A8C9B7E7C1C5666C28B48CD4A694178AF152D7001F5F174D4D
8F120B3533D4> |-
systemdict /gcheck known {setglobal} if end {end} if
end
ROYQKJ+TimesNewRomanPSMT /Encoding get
dup 61 /equal put
pop
%ADOEndSubsetFont
/ROYQKJ+TimesNewRomanPSMT*1 
[40{/.notdef}rp /parenleft /parenright 7{/.notdef}rp /one /two /three 9{/.notdef}rp 
/equal 58{/.notdef}rp /x 6{/.notdef}rp /Phi 128{/.notdef}rp]
ROYQKJ+TimesNewRomanPSMT nf
ROYQKJ+TimesNewRomanPSMT*1 [17.6321 0 0 -18 0 0 ]msf
400.697 117.828 mo
(\177\(x\)=)
[12.8887 5.87109 8.81641 5.87109 0 ]xsh
373.984 118.002 mo
373.984 107.222 li
384.763 107.222 li
384.763 101.832 li
395.543 112.612 li
384.763 123.392 li
384.763 118.002 li
373.984 118.002 li
cp
.594812 .526696 .492805 .766567 cmyk
@
1 lw
538.468 222.568 mo
538.468 .5 li
.580072 .46009 .410468 .949004 cmyk
@
464.359 62.4263 mo
464.359 70.02 li
465.402 69.979 466.241 69.6802 466.876 69.1235 cv
467.511 68.5669 467.83 67.5532 467.83 66.0825 cv
467.83 63.7681 466.672 62.5493 464.359 62.4263 cv
cp
462.539 62.4263 mo
461.458 62.4849 460.611 62.7969 459.998 63.3623 cv
459.384 63.9277 459.078 64.9312 459.078 66.3726 cv
459.078 68.6812 460.232 69.897 462.539 70.02 cv
462.539 62.4263 li
cp
464.359 70.5034 mo
464.441 71.4058 465.048 71.8569 466.179 71.8569 cv
466.179 72.1821 li
460.718 72.1821 li
460.718 71.8569 li
461.85 71.8569 462.457 71.4058 462.539 70.5034 cv
460.87 70.5034 459.535 70.0874 458.533 69.2554 cv
457.531 68.4233 457.03 67.4126 457.03 66.2231 cv
457.03 64.9517 457.539 63.9365 458.556 63.1777 cv
459.574 62.4189 460.902 62.0073 462.539 61.9429 cv
462.462 61.0405 461.856 60.5894 460.718 60.5894 cv
460.718 60.2642 li
466.179 60.2642 li
466.179 60.5894 li
465.048 60.5894 464.441 61.0405 464.359 61.9429 cv
466.167 61.9956 467.537 62.4365 468.469 63.2656 cv
469.402 64.0947 469.868 65.0806 469.868 66.2231 cv
469.868 67.4126 469.369 68.4233 468.37 69.2554 cv
467.371 70.0874 466.034 70.5034 464.359 70.5034 cv
cp
f
471.109 67.9185 mo
473.044 67.043 li
473.239 67.043 li
473.239 73.27 li
473.239 73.6836 473.256 73.9409 473.294 74.0425 cv
473.332 74.144 473.409 74.2217 473.526 74.2764 cv
473.643 74.3306 473.881 74.3613 474.242 74.3687 cv
474.242 74.5698 li
471.25 74.5698 li
471.25 74.3687 li
471.625 74.3613 471.868 74.3315 471.977 74.2788 cv
472.086 74.2266 472.163 74.1558 472.206 74.0669 cv
472.249 73.978 472.27 73.7124 472.27 73.27 cv
472.27 69.2891 li
472.27 68.7524 472.25 68.4082 472.211 68.2559 cv
472.184 68.1396 472.134 68.0547 472.062 68 cv
471.99 67.9458 471.903 67.9185 471.801 67.9185 cv
471.656 67.9185 471.455 67.9751 471.197 68.0874 cv
471.109 67.9185 li
cp
f
482.5 75.7065 mo
482.5 76.0317 li
481.544 75.5864 480.749 75.0649 480.11 74.4673 cv
479.2 73.6177 478.499 72.6157 478.005 71.4614 cv
477.512 70.3071 477.266 69.1089 477.266 67.8667 cv
477.266 66.0503 477.75 64.3936 478.716 62.8965 cv
479.683 61.3994 480.945 60.3286 482.5 59.6841 cv
482.5 60.0532 li
481.722 60.4517 481.083 60.9966 480.584 61.688 cv
480.084 62.3794 479.711 63.2554 479.465 64.3159 cv
479.219 65.3765 479.095 66.4839 479.095 67.6382 cv
479.095 68.8921 479.2 70.0317 479.409 71.0571 cv
479.573 71.8657 479.772 72.5146 480.005 73.0039 cv
480.24 73.4932 480.554 73.9634 480.949 74.4146 cv
481.344 74.8657 481.861 75.2964 482.5 75.7065 cv
cp
f
483.191 64.1313 mo
487.278 64.1313 li
487.278 64.4565 li
487.018 64.4565 486.836 64.4976 486.732 64.5796 cv
486.628 64.6616 486.576 64.77 486.576 64.9048 cv
486.576 65.0454 486.686 65.2622 486.908 65.5552 cv
486.977 65.6489 487.082 65.7954 487.22 65.9946 cv
487.836 66.9087 li
488.548 65.9946 li
489.003 65.4146 489.231 65.0483 489.231 64.896 cv
489.231 64.7729 489.177 64.6689 489.07 64.584 cv
488.961 64.499 488.788 64.4565 488.548 64.4565 cv
488.548 64.1313 li
491.487 64.1313 li
491.487 64.4565 li
491.177 64.4741 490.909 64.5532 490.681 64.6938 cv
490.372 64.8931 489.948 65.3267 489.411 65.9946 cv
488.225 67.4624 li
490.387 70.3452 li
490.918 71.0542 491.297 71.4805 491.525 71.624 cv
491.752 71.7676 492.046 71.8481 492.407 71.8657 cv
492.407 72.1821 li
488.311 72.1821 li
488.311 71.8657 li
488.595 71.8657 488.817 71.8071 488.974 71.6899 cv
489.094 71.6079 489.155 71.4995 489.155 71.3647 cv
489.155 71.23 488.953 70.8901 488.548 70.3452 cv
487.278 68.6226 li
485.883 70.3452 li
485.454 70.8784 485.239 71.1948 485.239 71.2944 cv
485.239 71.4351 485.31 71.5625 485.453 71.6768 cv
485.594 71.791 485.808 71.854 486.092 71.8657 cv
486.092 72.1821 li
483.257 72.1821 li
483.257 71.8657 li
483.485 71.8364 483.684 71.7632 483.855 71.646 cv
484.095 71.4761 484.5 71.0425 485.068 70.3452 cv
486.889 68.104 li
485.239 65.8892 li
484.771 65.2563 484.41 64.8594 484.154 64.6982 cv
483.897 64.5371 483.577 64.4565 483.191 64.4565 cv
483.191 64.1313 li
cp
f
493.081 60.0532 mo
493.081 59.6841 li
494.041 60.1235 494.84 60.6421 495.479 61.2397 cv
496.382 62.0952 497.082 63.0986 497.575 64.25 cv
498.067 65.4014 498.314 66.6011 498.314 67.8491 cv
498.314 69.6655 497.832 71.3223 496.868 72.8193 cv
495.904 74.3164 494.641 75.3872 493.081 76.0317 cv
493.081 75.7065 li
493.858 75.3022 494.498 74.7559 495 74.0674 cv
495.502 73.3789 495.875 72.5029 496.119 71.4395 cv
496.362 70.376 496.484 69.2671 496.484 68.1128 cv
496.484 66.8647 496.379 65.7251 496.171 64.6938 cv
496.013 63.8853 495.816 63.2378 495.579 62.7515 cv
495.341 62.2651 495.027 61.7964 494.635 61.3452 cv
494.243 60.894 493.725 60.4634 493.081 60.0532 cv
cp
f
512.099 64.228 mo
512.753 70.8198 li
513.853 69.6245 514.732 68.5024 515.389 67.4536 cv
515.775 66.8384 515.967 66.3931 515.967 66.1177 cv
515.967 65.9888 515.936 65.8745 515.873 65.7749 cv
515.847 65.7222 515.748 65.6445 515.574 65.542 cv
515.4 65.4395 515.279 65.334 515.209 65.2256 cv
515.139 65.1172 515.105 65.0015 515.105 64.8784 cv
515.105 64.6968 515.177 64.543 515.323 64.417 cv
515.468 64.291 515.655 64.228 515.882 64.228 cv
516.141 64.228 516.361 64.3174 516.542 64.4961 cv
516.721 64.6748 516.811 64.9136 516.811 65.2124 cv
516.811 65.5171 516.764 65.8013 516.669 66.0649 cv
516.48 66.5688 516.11 67.2192 515.56 68.0161 cv
514.89 68.9712 514.2 69.8574 513.488 70.6748 cv
512.777 71.4922 512.248 72.0649 511.9 72.3931 cv
511.549 72.3931 li
510.933 66.311 li
507.017 72.3931 li
506.6 72.3931 li
506.556 69.8911 506.42 67.9165 506.193 66.4692 cv
506.097 65.8657 505.94 65.4702 505.718 65.2827 cv
505.56 65.1479 505.32 65.0806 504.998 65.0806 cv
504.814 65.0806 504.581 65.0981 504.296 65.1333 cv
504.296 64.8169 li
507.017 64.228 li
507.397 65.2065 507.643 66.7095 507.756 68.7368 cv
507.794 69.5044 507.827 69.9878 507.852 70.187 cv
511.749 64.228 li
512.099 64.228 li
cp
f
518.753 68.3745 mo
517.227 73.3008 li
517.139 73.5908 517.094 73.8003 517.094 73.9292 cv
517.094 74.0376 517.135 74.1201 517.215 74.1777 cv
517.296 74.2344 517.485 74.2734 517.782 74.2939 cv
517.735 74.4565 li
515.293 74.4565 li
515.36 74.2939 li
515.619 74.2881 515.79 74.269 515.872 74.2368 cv
516.004 74.1841 516.104 74.1138 516.17 74.0259 cv
516.275 73.8911 516.38 73.6494 516.488 73.3008 cv
517.587 69.7632 li
517.654 69.5493 517.69 69.4263 517.697 69.394 cv
517.707 69.3354 517.711 69.2783 517.711 69.2227 cv
517.711 69.1201 517.681 69.0396 517.621 68.981 cv
517.561 68.9224 517.479 68.8931 517.375 68.8931 cv
517.292 68.8931 517.165 68.9106 516.991 68.9458 cv
516.929 68.7876 li
518.526 68.3745 li
518.753 68.3745 li
cp
f
502.031 67.1592 mo
502.36 67.1592 502.637 67.2744 502.864 67.5049 cv
503.089 67.7354 503.202 68.0146 503.202 68.3428 cv
503.202 68.6709 503.087 68.9502 502.858 69.1807 cv
502.628 69.4111 502.352 69.5264 502.031 69.5264 cv
501.709 69.5264 501.436 69.4111 501.21 69.1807 cv
500.985 68.9502 500.872 68.6709 500.872 68.3428 cv
500.872 68.0146 500.985 67.7354 501.21 67.5049 cv
501.436 67.2744 501.709 67.1592 502.031 67.1592 cv
cp
f
464.359 107.626 mo
464.359 115.22 li
465.402 115.179 466.241 114.88 466.876 114.323 cv
467.511 113.767 467.83 112.753 467.83 111.282 cv
467.83 108.968 466.672 107.749 464.359 107.626 cv
cp
462.539 107.626 mo
461.458 107.685 460.611 107.997 459.998 108.562 cv
459.384 109.127 459.078 110.131 459.078 111.572 cv
459.078 113.881 460.232 115.097 462.539 115.22 cv
462.539 107.626 li
cp
464.359 115.703 mo
464.441 116.605 465.048 117.057 466.179 117.057 cv
466.179 117.382 li
460.718 117.382 li
460.718 117.057 li
461.85 117.057 462.457 116.605 462.539 115.703 cv
460.87 115.703 459.535 115.287 458.533 114.455 cv
457.531 113.623 457.03 112.612 457.03 111.423 cv
457.03 110.151 457.539 109.136 458.556 108.377 cv
459.574 107.619 460.902 107.207 462.539 107.143 cv
462.462 106.24 461.856 105.789 460.718 105.789 cv
460.718 105.464 li
466.179 105.464 li
466.179 105.789 li
465.048 105.789 464.441 106.24 464.359 107.143 cv
466.167 107.195 467.537 107.636 468.469 108.465 cv
469.402 109.294 469.868 110.28 469.868 111.423 cv
469.868 112.612 469.369 113.623 468.37 114.455 cv
467.371 115.287 466.034 115.703 464.359 115.703 cv
cp
f
475.209 118.35 mo
474.652 119.77 li
469.958 119.77 li
469.958 119.568 li
471.339 118.401 472.311 117.447 472.875 116.708 cv
473.438 115.968 473.719 115.292 473.719 114.679 cv
473.719 114.211 473.565 113.827 473.256 113.526 cv
472.947 113.226 472.578 113.075 472.147 113.075 cv
471.756 113.075 471.405 113.181 471.094 113.393 cv
470.783 113.605 470.553 113.916 470.405 114.326 cv
470.188 114.326 li
470.286 113.655 470.537 113.14 470.942 112.781 cv
471.346 112.422 471.852 112.243 472.458 112.243 cv
473.103 112.243 473.642 112.435 474.075 112.819 cv
474.506 113.204 474.722 113.657 474.722 114.179 cv
474.722 114.552 474.628 114.926 474.441 115.299 cv
474.152 115.887 473.682 116.508 473.033 117.165 cv
472.059 118.151 471.451 118.745 471.208 118.948 cv
473.286 118.948 li
473.708 118.948 474.003 118.934 474.174 118.905 cv
474.344 118.876 474.498 118.817 474.634 118.728 cv
474.771 118.639 474.891 118.513 474.993 118.35 cv
475.209 118.35 li
cp
f
482.5 120.906 mo
482.5 121.232 li
481.544 120.786 480.749 120.265 480.11 119.667 cv
479.2 118.817 478.499 117.815 478.005 116.661 cv
477.512 115.507 477.266 114.309 477.266 113.066 cv
477.266 111.25 477.75 109.593 478.716 108.096 cv
479.683 106.599 480.945 105.528 482.5 104.884 cv
482.5 105.253 li
481.722 105.651 481.083 106.196 480.584 106.888 cv
480.084 107.579 479.711 108.455 479.465 109.516 cv
479.219 110.576 479.095 111.684 479.095 112.838 cv
479.095 114.092 479.2 115.231 479.409 116.257 cv
479.573 117.065 479.772 117.714 480.005 118.204 cv
480.24 118.693 480.554 119.163 480.949 119.614 cv
481.344 120.065 481.861 120.496 482.5 120.906 cv
cp
f
483.191 109.331 mo
487.278 109.331 li
487.278 109.656 li
487.018 109.656 486.836 109.697 486.732 109.779 cv
486.628 109.861 486.576 109.97 486.576 110.104 cv
486.576 110.245 486.686 110.462 486.908 110.755 cv
486.977 110.849 487.082 110.995 487.22 111.194 cv
487.836 112.108 li
488.548 111.194 li
489.003 110.614 489.231 110.248 489.231 110.096 cv
489.231 109.973 489.177 109.869 489.07 109.784 cv
488.961 109.699 488.788 109.656 488.548 109.656 cv
488.548 109.331 li
491.487 109.331 li
491.487 109.656 li
491.177 109.674 490.909 109.753 490.681 109.894 cv
490.372 110.093 489.948 110.526 489.411 111.194 cv
488.225 112.662 li
490.387 115.545 li
490.918 116.254 491.297 116.68 491.525 116.824 cv
491.752 116.967 492.046 117.048 492.407 117.065 cv
492.407 117.382 li
488.311 117.382 li
488.311 117.065 li
488.595 117.065 488.817 117.007 488.974 116.89 cv
489.094 116.808 489.155 116.699 489.155 116.564 cv
489.155 116.43 488.953 116.09 488.548 115.545 cv
487.278 113.822 li
485.883 115.545 li
485.454 116.078 485.239 116.395 485.239 116.494 cv
485.239 116.635 485.31 116.762 485.453 116.876 cv
485.594 116.991 485.808 117.054 486.092 117.065 cv
486.092 117.382 li
483.257 117.382 li
483.257 117.065 li
483.485 117.036 483.684 116.963 483.855 116.846 cv
484.095 116.676 484.5 116.242 485.068 115.545 cv
486.889 113.304 li
485.239 111.089 li
484.771 110.456 484.41 110.059 484.154 109.898 cv
483.897 109.737 483.577 109.656 483.191 109.656 cv
483.191 109.331 li
cp
f
493.081 105.253 mo
493.081 104.884 li
494.041 105.323 494.84 105.842 495.479 106.439 cv
496.382 107.295 497.082 108.298 497.575 109.45 cv
498.067 110.601 498.314 111.801 498.314 113.049 cv
498.314 114.865 497.832 116.522 496.868 118.019 cv
495.904 119.516 494.641 120.587 493.081 121.232 cv
493.081 120.906 li
493.858 120.502 494.498 119.956 495 119.267 cv
495.502 118.579 495.875 117.703 496.119 116.639 cv
496.362 115.576 496.484 114.467 496.484 113.313 cv
496.484 112.064 496.379 110.925 496.171 109.894 cv
496.013 109.085 495.816 108.438 495.579 107.951 cv
495.341 107.465 495.027 106.996 494.635 106.545 cv
494.243 106.094 493.725 105.663 493.081 105.253 cv
cp
f
512.099 109.428 mo
512.753 116.02 li
513.853 114.824 514.732 113.702 515.389 112.653 cv
515.775 112.038 515.967 111.593 515.967 111.317 cv
515.967 111.188 515.936 111.074 515.873 110.975 cv
515.847 110.922 515.748 110.844 515.574 110.742 cv
515.4 110.639 515.279 110.534 515.209 110.425 cv
515.139 110.317 515.105 110.201 515.105 110.078 cv
515.105 109.896 515.177 109.743 515.323 109.617 cv
515.468 109.491 515.655 109.428 515.882 109.428 cv
516.141 109.428 516.361 109.517 516.542 109.696 cv
516.721 109.875 516.811 110.113 516.811 110.412 cv
516.811 110.717 516.764 111.001 516.669 111.265 cv
516.48 111.769 516.11 112.419 515.56 113.216 cv
514.89 114.171 514.2 115.057 513.488 115.875 cv
512.777 116.692 512.248 117.265 511.9 117.593 cv
511.549 117.593 li
510.933 111.511 li
507.017 117.593 li
506.6 117.593 li
506.556 115.091 506.42 113.116 506.193 111.669 cv
506.097 111.065 505.94 110.67 505.718 110.482 cv
505.56 110.348 505.32 110.28 504.998 110.28 cv
504.814 110.28 504.581 110.298 504.296 110.333 cv
504.296 110.017 li
507.017 109.428 li
507.397 110.406 507.643 111.909 507.756 113.937 cv
507.794 114.704 507.827 115.188 507.852 115.387 cv
511.749 109.428 li
512.099 109.428 li
cp
f
518.052 119.656 mo
514.852 119.656 li
514.852 119.494 li
516.483 118.169 517.561 117.131 518.085 116.378 cv
518.329 116.029 518.451 115.663 518.451 115.279 cv
518.451 114.975 518.349 114.727 518.147 114.535 cv
517.945 114.343 517.682 114.247 517.36 114.247 cv
516.915 114.247 516.548 114.444 516.26 114.84 cv
516.094 114.77 li
516.255 114.392 516.491 114.098 516.8 113.888 cv
517.111 113.679 517.446 113.574 517.806 113.574 cv
518.213 113.574 518.556 113.704 518.834 113.963 cv
519.113 114.222 519.251 114.537 519.251 114.906 cv
519.251 115.164 519.203 115.402 519.105 115.622 cv
518.953 115.965 518.673 116.349 518.265 116.773 cv
517.646 117.424 516.82 118.172 515.787 119.019 cv
517.398 119.019 li
517.657 119.019 517.871 118.969 518.038 118.87 cv
518.206 118.77 518.326 118.637 518.398 118.47 cv
518.588 118.47 li
518.052 119.656 li
cp
f
502.031 112.359 mo
502.36 112.359 502.637 112.474 502.864 112.705 cv
503.089 112.935 503.202 113.214 503.202 113.542 cv
503.202 113.871 503.087 114.15 502.858 114.38 cv
502.628 114.611 502.352 114.726 502.031 114.726 cv
501.709 114.726 501.436 114.611 501.21 114.38 cv
500.985 114.15 500.872 113.871 500.872 113.542 cv
500.872 113.214 500.985 112.935 501.21 112.705 cv
501.436 112.474 501.709 112.359 502.031 112.359 cv
cp
f
464.359 152.826 mo
464.359 160.419 li
465.402 160.378 466.241 160.08 466.876 159.523 cv
467.511 158.966 467.83 157.953 467.83 156.482 cv
467.83 154.167 466.672 152.949 464.359 152.826 cv
cp
462.539 152.826 mo
461.458 152.884 460.611 153.197 459.998 153.761 cv
459.384 154.328 459.078 155.331 459.078 156.772 cv
459.078 159.081 460.232 160.296 462.539 160.419 cv
462.539 152.826 li
cp
464.359 160.903 mo
464.441 161.805 465.048 162.256 466.179 162.256 cv
466.179 162.582 li
460.718 162.582 li
460.718 162.256 li
461.85 162.256 462.457 161.805 462.539 160.903 cv
460.87 160.903 459.535 160.487 458.533 159.655 cv
457.531 158.823 457.03 157.812 457.03 156.623 cv
457.03 155.351 457.539 154.335 458.556 153.578 cv
459.574 152.818 460.902 152.407 462.539 152.342 cv
462.462 151.44 461.856 150.989 460.718 150.989 cv
460.718 150.664 li
466.179 150.664 li
466.179 150.989 li
465.048 150.989 464.441 151.44 464.359 152.342 cv
466.167 152.395 467.537 152.835 468.469 153.666 cv
469.402 154.494 469.868 155.48 469.868 156.623 cv
469.868 157.812 469.369 158.823 468.37 159.655 cv
467.371 160.487 466.034 160.903 464.359 160.903 cv
cp
f
470.311 158.998 mo
470.538 158.501 470.824 158.118 471.17 157.847 cv
471.516 157.578 471.948 157.443 472.464 157.443 cv
473.101 157.443 473.59 157.634 473.93 158.019 cv
474.189 158.305 474.318 158.612 474.318 158.938 cv
474.318 159.474 473.954 160.029 473.226 160.602 cv
473.715 160.78 474.085 161.034 474.335 161.364 cv
474.585 161.693 474.71 162.082 474.71 162.527 cv
474.71 163.166 474.492 163.718 474.054 164.186 cv
473.483 164.795 472.656 165.099 471.572 165.099 cv
471.037 165.099 470.671 165.039 470.478 164.916 cv
470.285 164.792 470.188 164.66 470.188 164.518 cv
470.188 164.413 470.234 164.32 470.326 164.241 cv
470.417 164.161 470.528 164.121 470.657 164.121 cv
470.754 164.121 470.854 164.135 470.957 164.165 cv
471.023 164.183 471.173 164.249 471.408 164.363 cv
471.642 164.477 471.805 164.544 471.895 164.567 cv
472.04 164.607 472.194 164.626 472.358 164.626 cv
472.757 164.626 473.104 164.484 473.4 164.197 cv
473.695 163.911 473.842 163.572 473.842 163.18 cv
473.842 162.894 473.774 162.615 473.637 162.342 cv
473.536 162.14 473.424 161.986 473.303 161.88 cv
473.134 161.736 472.904 161.604 472.611 161.486 cv
472.317 161.369 472.018 161.309 471.713 161.309 cv
471.525 161.309 li
471.525 161.146 li
471.834 161.11 472.144 161.006 472.456 160.835 cv
472.766 160.666 472.992 160.46 473.132 160.222 cv
473.274 159.982 473.344 159.719 473.344 159.433 cv
473.344 159.06 473.217 158.757 472.965 158.527 cv
472.713 158.297 472.399 158.182 472.024 158.182 cv
471.417 158.182 470.912 158.483 470.504 159.085 cv
470.311 158.998 li
cp
f
482.5 166.106 mo
482.5 166.431 li
481.544 165.986 480.749 165.464 480.11 164.867 cv
479.2 164.017 478.499 163.015 478.005 161.861 cv
477.512 160.707 477.266 159.508 477.266 158.266 cv
477.266 156.45 477.75 154.792 478.716 153.296 cv
479.683 151.798 480.945 150.728 482.5 150.083 cv
482.5 150.453 li
481.722 150.851 481.083 151.396 480.584 152.087 cv
480.084 152.779 479.711 153.655 479.465 154.715 cv
479.219 155.776 479.095 156.883 479.095 158.038 cv
479.095 159.292 479.2 160.431 479.409 161.457 cv
479.573 162.265 479.772 162.914 480.005 163.404 cv
480.24 163.892 480.554 164.363 480.949 164.814 cv
481.344 165.265 481.861 165.696 482.5 166.106 cv
cp
f
483.191 154.531 mo
487.278 154.531 li
487.278 154.856 li
487.018 154.856 486.836 154.897 486.732 154.979 cv
486.628 155.061 486.576 155.169 486.576 155.304 cv
486.576 155.445 486.686 155.662 486.908 155.955 cv
486.977 156.048 487.082 156.195 487.22 156.394 cv
487.836 157.308 li
488.548 156.394 li
489.003 155.814 489.231 155.448 489.231 155.295 cv
489.231 155.172 489.177 155.068 489.07 154.984 cv
488.961 154.898 488.788 154.856 488.548 154.856 cv
488.548 154.531 li
491.487 154.531 li
491.487 154.856 li
491.177 154.874 490.909 154.953 490.681 155.093 cv
490.372 155.292 489.948 155.726 489.411 156.394 cv
488.225 157.862 li
490.387 160.745 li
490.918 161.454 491.297 161.88 491.525 162.023 cv
491.752 162.167 492.046 162.248 492.407 162.265 cv
492.407 162.582 li
488.311 162.582 li
488.311 162.265 li
488.595 162.265 488.817 162.207 488.974 162.089 cv
489.094 162.007 489.155 161.899 489.155 161.764 cv
489.155 161.629 488.953 161.29 488.548 160.745 cv
487.278 159.022 li
485.883 160.745 li
485.454 161.278 485.239 161.594 485.239 161.694 cv
485.239 161.834 485.31 161.962 485.453 162.076 cv
485.594 162.191 485.808 162.253 486.092 162.265 cv
486.092 162.582 li
483.257 162.582 li
483.257 162.265 li
483.485 162.236 483.684 162.163 483.855 162.045 cv
484.095 161.875 484.5 161.442 485.068 160.745 cv
486.889 158.503 li
485.239 156.289 li
484.771 155.656 484.41 155.259 484.154 155.097 cv
483.897 154.937 483.577 154.856 483.191 154.856 cv
483.191 154.531 li
cp
f
493.081 150.453 mo
493.081 150.083 li
494.041 150.523 494.84 151.042 495.479 151.639 cv
496.382 152.495 497.082 153.498 497.575 154.65 cv
498.067 155.8 498.314 157 498.314 158.249 cv
498.314 160.065 497.832 161.722 496.868 163.218 cv
495.904 164.716 494.641 165.787 493.081 166.431 cv
493.081 166.106 li
493.858 165.702 494.498 165.156 495 164.466 cv
495.502 163.779 495.875 162.902 496.119 161.839 cv
496.362 160.775 496.484 159.667 496.484 158.512 cv
496.484 157.264 496.379 156.125 496.171 155.093 cv
496.013 154.285 495.816 153.637 495.579 153.151 cv
495.341 152.665 495.027 152.196 494.635 151.745 cv
494.243 151.293 493.725 150.863 493.081 150.453 cv
cp
f
512.099 154.627 mo
512.753 161.219 li
513.853 160.024 514.732 158.902 515.389 157.853 cv
515.775 157.238 515.967 156.792 515.967 156.517 cv
515.967 156.388 515.936 156.274 515.873 156.174 cv
515.847 156.122 515.748 156.044 515.574 155.941 cv
515.4 155.839 515.279 155.734 515.209 155.625 cv
515.139 155.517 515.105 155.401 515.105 155.278 cv
515.105 155.096 515.177 154.943 515.323 154.816 cv
515.468 154.691 515.655 154.627 515.882 154.627 cv
516.141 154.627 516.361 154.716 516.542 154.896 cv
516.721 155.074 516.811 155.313 516.811 155.612 cv
516.811 155.917 516.764 156.201 516.669 156.464 cv
516.48 156.968 516.11 157.619 515.56 158.416 cv
514.89 159.371 514.2 160.257 513.488 161.074 cv
512.777 161.892 512.248 162.464 511.9 162.792 cv
511.549 162.792 li
510.933 156.71 li
507.017 162.792 li
506.6 162.792 li
506.556 160.291 506.42 158.316 506.193 156.869 cv
506.097 156.265 505.94 155.87 505.718 155.682 cv
505.56 155.547 505.32 155.48 504.998 155.48 cv
504.814 155.48 504.581 155.498 504.296 155.533 cv
504.296 155.216 li
507.017 154.627 li
507.397 155.606 507.643 157.109 507.756 159.136 cv
507.794 159.904 507.827 160.387 507.852 160.586 cv
511.749 154.627 li
512.099 154.627 li
cp
f
516.184 161.599 mo
516.184 161.472 li
516.95 161.364 517.52 161.153 517.896 160.839 cv
518.167 160.617 518.303 160.351 518.303 160.044 cv
518.303 159.812 518.224 159.622 518.067 159.47 cv
517.909 159.32 517.717 159.244 517.493 159.244 cv
517.139 159.244 516.825 159.448 516.549 159.855 cv
516.375 159.806 li
516.539 159.466 516.75 159.21 517.007 159.035 cv
517.264 158.861 517.546 158.774 517.853 158.774 cv
518.226 158.774 518.528 158.876 518.758 159.083 cv
518.99 159.291 519.105 159.552 519.105 159.869 cv
519.105 160.138 518.997 160.397 518.78 160.646 cv
518.563 160.895 518.191 161.118 517.664 161.314 cv
517.993 161.44 518.241 161.621 518.408 161.857 cv
518.576 162.093 518.659 162.376 518.659 162.707 cv
518.659 163.074 518.545 163.441 518.318 163.808 cv
518.09 164.175 517.778 164.46 517.381 164.66 cv
516.985 164.861 516.569 164.961 516.132 164.961 cv
515.734 164.961 515.432 164.897 515.227 164.768 cv
515.091 164.68 515.023 164.578 515.023 164.46 cv
515.023 164.358 515.063 164.27 515.144 164.197 cv
515.224 164.124 515.324 164.087 515.44 164.087 cv
515.522 164.087 515.605 164.099 515.687 164.123 cv
515.737 164.136 515.861 164.195 516.059 164.298 cv
516.256 164.4 516.411 164.468 516.521 164.501 cv
516.631 164.537 516.746 164.552 516.863 164.552 cv
517.147 164.552 517.381 164.4 517.566 164.093 cv
517.751 163.788 517.843 163.461 517.843 163.116 cv
517.843 162.834 517.782 162.583 517.657 162.365 cv
517.532 162.144 517.334 161.966 517.066 161.83 cv
516.797 161.695 516.503 161.617 516.184 161.599 cv
cp
f
502.031 157.558 mo
502.36 157.558 502.637 157.673 502.864 157.904 cv
503.089 158.134 503.202 158.414 503.202 158.742 cv
503.202 159.07 503.087 159.349 502.858 159.58 cv
502.628 159.81 502.352 159.925 502.031 159.925 cv
501.709 159.925 501.436 159.81 501.21 159.58 cv
500.985 159.349 500.872 159.07 500.872 158.742 cv
500.872 158.414 500.985 158.134 501.21 157.904 cv
501.436 157.673 501.709 157.558 502.031 157.558 cv
cp
f
2 lw
448.082 53.0044 mo
457.03 53.0044 li
@
448.082 53.0044 mo
448.082 173.519 li
@
448.082 173.519 mo
458.03 173.519 li
@
528.082 53.3354 mo
528.082 173.85 li
@
518.064 53.0044 mo
527.012 53.0044 li
@
517.564 174.952 mo
527.512 174.952 li
@
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
/ROYQKJ+TimesNewRomanPSMT*1 uf
/ROYQKJ+TimesNewRomanPSMT uf
/TimesNewRomanPSMT uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 14.0
%%AI8_CreatorVersion: 14.0.0
%%For: (boqinggo) ()
%%Title: (fConcept1.eps)
%%CreationDate: 9/29/2012 11:41 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb!j.8T-+PZQSE'"nWm-boB.&a?_Upc*MLK9:R9tLa"8Xp\XA_Gi=A4cOFu7)R*XgD;]]u#+em;JGqG)iP#4,Nl[nDX&r@Q%]=_^
%qcmB`XNJbCN/W^SLlBD[>0=8YX]hLmSo+LM4WpX(8id^6Fnf<Bk'gN<g1ssCHaY[a8P^Y:?qc_]=?7=`PXHFia>#9/:pF?@>oe=C
%>Q(mG]3=[rEp[JNgKP3Lr[>5Wa5qMi;\%U5S'CY6!nh1rqC0uE[Te/.He%nkpJ1"'\S-JX>A';C=(7T@6)W1Je8$+:1].#AZ-fWh
%gYK&R59NTRM*.&gQgCBmXITd6.eW4U5YWNGF7k5pH//Sp!)rg@T's.gbsAI\#)LiGqd8j,8)>LuaH+Mj^CSfp1h9!/GC4T_G'c@p
%`UoB?,o-3L,pXq!Iq;2EUu4mL91tE`=FKu!s8"tXe)12+J,]?Fj!hpol*`Z\jmFKQ/AZg^>)t+((nMGg3L,n@<pZjceS1?HFYZ!M
%3Z1S(OrVg_Cg0trTC?S\)EONPInqTY.J=mP<l>@-OOeo"eGlfqfW1?Soe*"]VVAk%r#H>DehfsmTBt+ITNU_i[i0ZaU!.tSP5;[o
%X#Ki1dR:?CIV7Jj2U"rtii:d^YP3SmgW`%!d;H&k;?dgPcD0qPor\;UZr:mK[;Q>VCU+pYolN6VOOB(A!EfS\:TAG#8J"]i2'C'K
%"1l]@)$Fac)rk=fD3iIt!D^7dpI8qhj-b9DFW33%.q%:6oRlc^Q4j0moD]]N5_+<uhVrq`?HjL[/P/k,plrV)q>gM3PoE7Z,mE*3
%U_'/7*DjkEqdlEp;H7.erYilWd3fna_*:r=cU7h!dqSa(jnMbS`P8F1DcIP0W[`F$/<];*)GG,c5Ohf!J]/6./=&g@MnIGZ)U"r*
%==+LW8G.'CMl"m)%):aK(<bgD=>#A/F#eW3b@-fJ&`4@^M$0ea/7O0>O]J2I;j8_#'IJ6d<V^tV3>hd(1$f^*@PR3cmk&sCS\e/R
%K:TkTdW\Fr=rI3kTD/dUKqI!3,o1>94,'<&n+[&.A%rR)V('@`Mdb6,'?_)Jpl(7H6(UuCdZTb#5A=-OHeJLX5/iQ!-cknQi^N&q
%/;ASk:Mbmu,jdU?`s*$g?nq!m+)+=c=rI3nTD/dU8GN6M)=mP.5Hu(!&O5Mf;KebPV&1=Kc3jc#c:NEI.#O8_=H!lRdt[RfG(:]2
%;594egO.Xe&cN<a?jA]Q@L#JIg2m*/qhUkHN:K%'Oj\qa`_S.<*JE^JbP=i+jJ+CWVfR%D9Z-[d+AZ-p1'O9qHu(8).=RNT'J^sU
%6(SSqmiOt?MfJO!H.i7H:]E01ksVA<9uih<Lc/*Us!TCeZ_,g"l?r;oo8F@+S-P;-q&D(KO]49MM9gQjZoP85d6O3]3D"@W,TL*M
%15AOBVH%21,6.-c'9t?MV^V2&q3V)u,nBsCJ*B1rY3Y_Bq3V(R-L#I?0E%50dGLpf!BnF$AMWnCq3V*(B'F7*0Du.+o6L2Rr(I&)
%$M:h'Qi<2-In\/J(ucn`?i$8lU49G/MO)``AA4F4;OLK>T1Qlj]WSR/Go;KOJ@`js.Mq\S!Iq(h#0KIT)'H"G.nSDf.[P_$8b`\>
%n@rF=bnQ*.)Zk_jdO?:^2MOa<Y[o8S8Q1:560$Gl+,;s]86VVD$4;:TN);=5VXYUILA]4Dfj$/I^9bS#<nB-A:lTUTHlCASj519]
%+i?"M-<LM13>MFKmugd99DY5fe_qm,.J/h?7\"OfS4Y3(+_1n0aU3JqAPsNf^qSuhB!2df<[1]\;`[lQA!Ic#'7d?*1<SX]8I9uX
%c9sI@eS&%*J75'!0T'^&c`6#T3CFM-,UC8+km0(:8):.c\I:j>8?6?91&RBd,snCOp,#V\\ci)`Cl\KPq@7I"$nXrWA=a='8P8gq
%Yu!FNZk2/a"m@sA/;2:EWRJ[M&@+ubNcg&]NS-@u82^^O&R;P+GXnDO0"Rc-[%siQ8N(-8.=B2aLa!6J</8<5lFAaj6_P>n65%jY
%9M>7-klqIc;MqafZ4:GHKMTeNhb6X6.S838I%W"b8LLZp(G^Xn7F&-%kNJ^!-uY9$:K**j?5dcj<&_jLdQg<$;G#:Qpdr4.'G,LD
%"/>lFAoXD@SsP7R$kMSF=lqbtcF@6CD\3P@!Moi:38/^O'(SZ]J!/*!3l<D)T`@FmoD&lP&P8kQApMDo5AA1>;AI6)#V2HHTd8Uh
%2WULHU9mQKbe1$Cbo)[&j!a$1:]Vpdh:\#e&?Z`25bKVGm3NoW_*jge>g>->UJcYOm2Du*PdaV&:`KY]I7OU_/;Ur64%;KrbqUoj
%"Vd*(OfTo'SV`%El%25J&8qP`BVr!`MMsn$-98*%'3R@<l0*Zmecj2(bf[[NaTA\e_7EU%s'qfp3mo[/KX7$Zc'Z@7'i$[0OXNI+
%GsYAq<uMYa3QmkXTPL,MdCu'/T]dLsL@u2;RN,%9@J!g_q]&h?5R()o+l&sD8^#$T#\t(am%^#I*Q2<,:.REhbn(]`Z-Y]^XJcu4
%IjI-l3f7o46aBYlbM\K?-[f]f5[M]lEecTskFo^MVI6,sPKj91!g%]"/lERgOca:?N)o+)UJb>:*fUO90'uUu8QGlkSIQX-_,eLV
%N5YabCG>^&8/j`I(lKjf_]fk\HoZm4@!#PH4O4e9KQT<_J)UElVJ#8AoaG%OLih0Q.$1/r7>?_!"I66nECJ`2NDL]tp10;EE>!7I
%B"_gF*3!hu;]r:GX%/Un/g_9m0TH/#5?[$gKM@ZNW9RqMZ:?8tI)m^_b@q@TVI6:FK+KdnY%\MI$A"U=21]k"P)bA@LEXRM"[3_O
%M.Orq%^DC#U(@<7AuQ9,j_>V`Ns[P?,^"f.k2.$%1YG7]W[,h8_jhtlBsS+eR7L1WS4nI)b1AbQP&$e<KX=6)UY:HecOdP#FZdS'
%%A3GEKhV<_QVl<7b-[BYLc"3J?B$SSZmg!TRri;kL/t0N2-GSVb4H/r`)O%NWa$G]=sXn`LakoWWaT0(0hWZD\mQ-##TmGO5-e,j
%djAa<pkq>D':9rhQTp,B>^o:c)o<jM=-*PF:SG$_N)bU2T6?0;a'<VO+\!u'h2W!b<s)#[_Q*)e8V`6\/tXn(Ds*Q8'p(GY8^RK/
%mhp=ISCk?@m(b\k18bjm3gltG(92GY2qKqQK'iJ#;,4c^R,Tl2_8`QOQ_6064c&f>C)K\H43@\`4L7cP5:Y\i_a=<e8omkd;-B,V
%UZR\IH<i7.1h_n=-at8TjW5/hW*O@XR$tl[c5I8iB9"R80SQHS`RI:F3^JB;P3(hfJPaPP%-`h'Yj^Ak)`!%_"p1./Baui7<nOLa
%6ost)c?pq=R@5tkOJ5-#.q0I]&g8)_=]dBQ6Hj!M=dipc\P1U9JSf5i5o!AL7IHXWEfj.c!aDpfW"="g,l,l%=NbLpnoE1F-q/T`
%YGSp_CHHi>eP[l?N>ffi579kaUf>-[NV/B.`>=Z4q:?T];Va$VEM*YbL75jW&(b(]Shu3[KimPnh1pDkm;gI6WlA;XM6`dfN/'+I
%R"`CN9t^O1N)$Jo<?n&$V7`2DR-Oin.]+d%\@CbuphOVP<)@WR5#S_!RV,e)]Z<@5UkQ33"W4LIY/)XRdN[lg:,#cWWK>Q<&2tl:
%.G+CQA-'(F@Eo\"SEGX<+Y)_$RmPC;1ooji3Y,1-E%4[]Oj[,F2J&fjXVZ$[M7>U&AhV[paW/q";LqSFX[kjUTWK.Q.$2]\U^[hN
%<%$Nf3LMDO/En=#OErTW"#_u2'NPQ`2BcRTWJ$LEZ'7p=ph\50Ki7]5p"`jUfUO2?<!IIQKc%ZuU9\?t$-WO*7[HBgb5sV_N.,CO
%"O`jCq^P>o'icJYA%XC>%aq:,,$YJGBJh7u(itFPb.L3<A7nP6d[4Nra_c-Yg"T>oR+sSML+YmT5D?1_)/:.3aP;P^Gg,BI0kWFR
%=0?>mc#8kqf*r\MU<T[U0N8M-<JFILMhY7u!>)Eog)R$!eT41UNlq\?;BSR[$T"9AY`3=>)bQMjl-AGm<t2,iNoJ8l!](:K^uUq'
%<BgrA1e"O'PcAJ?rR\Ad`\C4dF,\GTJo7_P;P#g688.d[%BWO(4Gk[eca3EY=`lQV&N\-YM7ZhHSLdIa3i</hNcd6q\mn-B^lc[b
%KPAO4cJUi0RMAlUW+tl*=q_37@=X;tMc=ao2*,m$HAWW%B%kmr-:R(+Th6_2<`"p7lHc;fYWop>HGl)Q%F0'1eq6dOYj\_Q]r39?
%.3gn'Lhfq.W#7Z#U(,G92[KQ+&=%>P[G13#8"W05;Dc0C9aEgk.c_MG30#O"$4&=c-VL5)[WI$t7q',(d_i^4>s>P:?rO),_ZNoE
%)s"j[7Fj'DBsBGnRNl4CpD2!\FB]aLU:6oBVU+!31I8o581<coia9Md5KWpmcmPj=/6LGEp![9XFM\;\5sj'eRH^2?]GNg_F!X9?
%RV!udbUaRTgk2`+%8k6d'NG9M,uuU-nfS1SEDmKdQ!#TDC)AnH^?4-V)!ll`,;c:YXP7X$hq;6*#C1MrmghI#^HKg>VP`D2K6G#d
%CUDrfoftPMJ+&\QY@EA\]J/QX"0sB_,qA"_4oX#KG8i.1ZrWmHlHNq9dq\sYGcgoC?LP0an31/qFK:%t[q>TBnP6dPs(Dphj]3s^
%=Y4jPXn_ddd3NQflYlasBd"U73c,fX5^VR=\+0IF2aEP#r!.XM)8O^M]\]ZRHQVeS(\uNu1i)c/^K[kk0e`tRle-g:b3aMff'YK_
%]j;p+lfn1MX\nORO*cG&Y>_S*3>,N.3p:bQXm."t,8%,$gRn.>V;.X=9hqMD]R7BGmejoTm+1%Y?]A*]"kAf/*9c:YQCG""5Q:1C
%kG-mkG@;nGd'\0Or`-*F>!Q+*Uj/dtkX!HZ0Ac_%]/K_a2;6l2s.`f%)o'PG6,+K@)?f,c)CNjG<>^56>.%[P1n28unTN*W!=4+=
%HdtEG@$F:BbO7a-$[(t)8%JFb@BbO#J=K[")8Zp2</*``#c!f]oZ\5dcX7";R6j$V:l#oYolu$eL/nXJon$%ZT9e3/+SLLEqaQu?
%s!)tZ!(&K>[)+8oE%4gHV)Y"aotCXTI\YBi,C\?^,#;J8%UIQ+f0\S7UXgH6H1fSQ!k6[k?biq3AhRJfJBPSiAYF:8JhA"%PR0@m
%oluacUJ@lAC$ToJ1,Muil8<7S"te@:5W"ETFWa24!c6?FD2qP!W6f-FN-_nOmgXY0M(tZ'#8GV%K$V62o*9^"-cGe45G%c>$E`(,
%^9/Qj>kJ;.p%?*,0[^pM59tiXd&ON/&p6A,1)0<D'En7D+"e?OY"9l;Y3tHY,`lpa:>i-6W*fMNTh+A]M&3tm%#1KPB%KV0]M#r.
%2$`WVe85^WqlR@$gi'6]>.[[f-=BZDWRK#9HF4h%X?OMTql&cmr7)i'9nl0>biPMFYK+eF:2!%b`FcYb&(%d^Sc"/UDtqp[rI"RG
%h>K)JTMHYp7.O4*PXea)*`WBX/+>K[JA2^>RXA(t1Ah<OPOM7?6H):WpNj1%W<[sG"$araNZ[Itc#Tl?%?MAQE)fp=!M01Si@k2&
%,_$P7omt=a"'1ks15q/F/B[pP5dgt3^*c`"M*loT.MTBWTX5S$:bVkDWjJ7ThNs5e!11KcFEh4.o%=P8Y-$.gm8/#RqZpH7gJ*g9
%3]%=;-_M,EM0)YCF[fr]7jg+K5&L=,,XOt/B4M\Z8GQ"Tkl8Ca-<CC7$Y4GDUJZ.O.=eD@KLZc*P*'bciG5Sq#q*8+L4GZ0d*r@5
%)fGU]*_n]?DiId,WfXVU'P%1g+UTu,Dr_$5lgPl$@bmbTf7]s[&h'o'CMP0H^GL@oB`S)rRM]o`5A[b-dNZF-lU\ck)jZrf8boD.
%Lr/K$``K'@2r72Y;tq3#.7)SNgG7?Aq6*$Pf)^9r$.&S`ciV7=LF4NIRtGo$[,c'5@$8JPYVGlV+:_$eIW<4[TI85R5Getkl2UQ$
%s7tRP02J>t-,K/&Jbp8[+%>j3SBb]cl(%+s3Pn(tFTVT%B#M#2QtWFm,4Mq](jK95D+L,9mGB'Y/P.p7<VSdo,%?'AD^l`X;'le)
%E+`mA#q);qd?dgF^o%)]rYui_5BVUoE99/EbRs=Wk7<ZDn7SMRGrOjQ+7-i2n^0q?<d/i&&Qo"t(RV//qARG_DPI8J5:B`5;E3.m
%QN+9L1F";7\`sE%6X[j=;G&(G&#:sej$t2M#PNId\^c'&^"i!l^m)P!UG6C5qg5k60FHiuSkHm8b]d*J@FMR^r"i-YOMZ-)<,/kB
%TCnX+1@_*d5=Gf-%?aU<qroBqb[nJ;6@.[eULNar1<&lROhHV2NtdRoV-3OM1]34(s6#>k6D6I(p"Nig:b;MnH9%S\>Q<N/0<skG
%SGl/aFM1aF/I^6-R"tZ$ofpL0!JLGgq#$I9Q$[G!q=?9.Ith[cCGr3mjbRnF;e)8fe-#6!HF`:fm>j<rk4fj>?M%#:_0%UM9.*X&
%a:A3G;<r`,l5qPPVs#0deRDMHrp"FEr^hEISC''k>CZG5efTC)DLq<![bG-eWO2Pq:`\*DqXeS.?el[(oV^(cLp4O.&%^:P3K3(G
%TiAg2pSYgeX55M]5hh_.1?kd#=f='AM(bG68s;aXK9'Z[A@hGS#,]u?FU)egPlgkJ3C]4AR6(qnn.T9\,X4.5RF20\>)sCRdGq_R
%0G+Z\Ni^3mL<u:5b^OQYCi[SC9tf;6aU`;MP'1i<)H*tAY1:aFdOG)omX<feFg'9^gWPkO%6j$>>WgLsN>R#>Yt*>fZYNGtZQI6s
%qX)'e)<2nZIoj+gRb:IA3os,M)sB/n#0enIDIZ<j;XX6/m;fZOW8b'>]Keg&jcC5:oZ3;%^R';6-EPaQs7h*Cmsk49s6W&NLO])s
%J+MQk\+[D`Vue2_JnF^f3FMX88172_*<QCgSTX83H9WNSo*J](F][W*EhHl^UX2j<_Kda&fkOSQgOjt5SSl8iQ#60IGe+Hn=sk@!
%hKrPf_hpu)f6\SDR0a`5jtT#(KhsTPjc6h`kSilWO[\0>F^r^sOp.-"6,*M-)hEql[,18;>J3e"7cV.*)`?OXA,Jfj,*704d$Qs9
%=]Fa]C`+/.'&DI2JZJWSqgh)9d4\Q>bsq^DRga:GXJ9h%I8GBr#L;$Da,u\iD[,Y2LQLGc?6>r+H4J#PV)o[!p@%Zl#MmRuC/g[^
%%eLQsjhD!RHDt`u3hoO:6e?VLP0dXBCmT+Vg@+]L+"1;A2p8>'.=-PTWpO]+??6Z^JbVgKDga;45m`'L3G"R_>)4E6'tY(i2US?i
%m.@U/`5:3hLfRUqHS_G.`5rcReXH9ZFsR>4Lbmlla'OXR.Q<ha/)sGl?oOH\n"UffI5X,$(o,E=2gX:@FL5,iNc]^/a<qe%bj)DH
%[TDQj7*ITK$&I>;#OMld_?Q+E_i1/s[+aY9#W,_<dG)?(hcq!><J>8o@g!'b-QC#C4Hja5<d>=D?-Y!-.mm4DE>FgjnJaLkZBc@^
%`6^N7NB&m90.aHW,4'%.;A\BA!#Pq>;!Dm7YnjlDCE4Q3B=bGc&RRo5`[2)TIP8:R6hAF#YHF)83n(2fTd>*u73!OUa_R!>,c'OM
%cu>/9hs#5me.:q$WN]4$r`1's3QidX?l=^mJtd[c9Y2(H\2dUil/2I"J,8(%nSeI+5Q&tpr9M,rhuECgs8INEO8mhhHV[^Z7*qq[
%-U:Zn6LL[$pc)-.PTi/@IrSr:Dn*o$2tdF*4d#']@dWT1be"+]&9irRP&%=/[G7i&Xc4n,],1=><2Wmt_h3/HTk^Xk8R!Um#A(p%
%1EBWkrTc8j_k$BrKg9@Sf1$LTK&,I<pKO[?X#7#Sj&i6=W#0q]SUgBB9j##r?Lt36X#+eLHK!Y;[Hd3l_(KgY<Gf5AA/j(":fGAV
%WSAR234=FP%m95Xe,gYKU&*<>pNh"&-PlSp-W[LU78AP55P2`49!g\1p8ATe0+*dR[=M[hbuSu*X9S%m#Vp'nrQ,@D]\I6>`il^D
%7>d(heC?3LTWDJ?/n9GSoa36rT\@otO/nU3:<stKJ_q2\UnF8R\,Fl3k*k9<%$[9._f0+A_+@smK;Md!/!Y7b*Wj^S2u1$PoI30!
%)aRB'a!q@)jel"SL?*-Yr8Z>,q/;i7T34V1gfDH"ShM/%";ROtqh?fRdj'`nKnV.I*)W)L7n9bfmC0Q2]g&gXLV94Q!ai#&)Xjf6
%KAGsol;s?ke?_kI;WMN;K&p=8dJk\CaWW3.$[(ioR+kdTU)?XW5!$9fd)D`6%8jr_Z:?I:m4PE2j\Zj[aZ#<`+78LREF*W67P#<J
%CG%XQ@+d)THmgADTU.]*<onW8pP41B.CtP'8L4eHT1Ue^rC5]*Kp\Src3#U*1E?o*Ri:OM5$GW/0Fp[=UIe\G;+!f7Lp!FD\_H^"
%ZDmT6$kif"O4'oln56]2<Kfof\&aV`CO'sY\IEU%V+o0^'G`Ft;;?c6UXj&Akb)#'\#W[0kr#rL>1r/S[9K4XJ1,GF-sCpA=9N`Q
%HJbTLWKN1jdiFTO`1V6&qX."XTtX!m>(>0rj]moD'h9]L<^GZBG>^kfGlW.R&)]jHTmk/Lf,pUDe1B;@J(-'^$AK'>_omsE+MiJM
%=oQ*`9G7Wr)4M:S_ne#C,,&kI\-S>=kb?2F?Xb'&]FZ0Y_4S9^mI-tFHlYWtBfWK$^Et0e2jLleNuUY64!/kc^F@n!q7:=R3&eR6
%(E;Yb<Blt&9:%j:(,!&<q)@PUgN]be[Or17_,.VA"f"$&qZ%tQQ<Hob,LtFX0_G4-_T.@<oVJDi6]KE(0\"E,V"iMHLqqVp\^7n<
%;gQK7?2ddW3IT^aZRIbs\5.M.Dm$bhgW:P;<&<E(HS9M(>.WJEhPt+\SWe]^_fTgDj8S6gS_o9?*5T,8Fsbq+T@/Em24=t3YDU<$
%bZ7`D/LNUc3p[Y>J8p0Y".e0#r"1Hfn$SWOp[MS4h\Yaa#XCD?8[]HQFn%SW>74d<^nZRBec<]Zd$T-D?5t#KUL(FAdCTH.d=!IH
%?*9?NR#(E5`Vtkfh#:Q5^<-TNWS&[4m7HS[6K>%2A@iO\2L?O(pJN:hotBl/I[6F!r@W#BqUg3WIQVh/>"V!Elhf!_!YrN'!-b%O
%:QA\R-5qZ9-"j0G_:<F!?KsR;"YdX>RJa#./*gWAme0\Ua(m;(ooIYob$Dh$WciS:'rCCSJVs'=f%p.2/[:\U#b<q@Q&8X-nh*`P
%$VP-!R>_eY_U.#mX&N94^NLmnHtdGAA\SkiFb8=qr)lcKW+RV22@?K(rFV$S"Yd`VQ%F-ln%)<;_$NF;%1d=B6/+HG70'@=[R5Ih
%hCL]R"Y^(`hE7@t'>P)SbMD@CV&L5L`G2-TP#*0mp+fDnJP'J,:j;Z@p;:1j)=$A^C2YE/gi\5&*PBNfU",]h-Q?"f6\dR*fQJEY
%@U\ftVRtdq<P*U@MGJR8Nd[HOp,84#j#<;Q"WY*(Q(imE=/[YBpYAc7^'<WR?KZ,:TnZ:?#_iuf]GTKsmKS`/>dQj]8nRN/e@W+g
%)q;gfdH:sm>'Trr>5EQ[.igbeF<]0bJ6@*j^3duJL%BsBeDkMWi<j`%o-Ka.6)C<>!.G2FQg==91Xs=Ma2;(Dg383rq6I?c$MEJ"
%miY8):T*VEjJ891gQXMDUP6PGH_m$KKR.\b[r"qj(^BcH'JD?"TH6]a*Hfs;l;$R*q8[9j&aGFJ8f4J(>BaF\1Ar:I:`hRZl1?Id
%%/&]RrTA$H1MfA]0EU11IdGi)lIT0Lq:6!i;0k8&hK4Ku\r..Ph1nZWkLeV-caAE6eC7goa,+n+TpFm=-0sXFkmi/)BF'l<9%Y(K
%6Cf`FKUrEU0*$-qCPVa)^0"oB5LX&qb-NW>TBHEXZEh0TB8%8AhXoY8((fuhYcKgA"WnNn7=_u()j6,?m50O.ZW`1=-lgGF:KJso
%VuHMn=k3^"LTVj@HWp^\2*NQ-YN<1QdIL(`=rc1gFrNLd#'Kl,B'nn*J@WrX/T29;lH](MOeoYt%m@VsE/%2cTf(aR]f^f!5Ml^E
%b)i^mAh'qKaHF,+h@;3eh/5-YEd)s(Gi2\P:_%A8qi?lRbM/;!\_K8NYe;n^kBsNO%5)3.o2rdo`)TutA8tJd[uoXY+!&)(3PB:g
%D-G'1V`ik45eiqS\*oO+DtfTN];Ik#k:U]M)i+:q$U+(38[CFASrP!,IGeB/0_'1h]0089H$f=0[[t-7Zb86JS!/2e0<[ui=DCEc
%`deOTr_[/#])5CWG'U]VHJ2)2o>e",JSb,%@^hJBH+Ol@aX+)2S_kK$MEeR:C5BNF,21/Xa3WU8+lZc*jS%c'g5@I6Dnj$@CS19a
%mB+KEG>Dk.Mt3<0or%;3_;rLP?bUHgA9<'#^.$:YCHe1<3Z"aPSeV(nVfh13Dpm+Tb0U$3a1"]+c>,A>_35lUU34(P0B_Wgq<BFF
%L^h+!ZMUQ_fe7_7,`fO)Q`j`bBdI\EbD?E)COJ(QZl+76X?Lmb$AE\RKZiN4m7q?$@i0n?,-A<&H](+F,a7q.cZ4d1Q4u`bh,\.=
%E;4B>%S$%+5LB,;7,.Gc\G?aTi4$$8X9lGqg>RrB`G[u)[+b4Sq\.>ega)q,BW_`]O&N.qYZbrM`#\tWqmL3(?&1GJ.NqXejpPQ*
%`N;J640P`%SZOVVBX'-ANnXpkXp,,<<)j0MW3U[<BhE:UWYTo&LH8di??:fM'si`qX"Ic[VFko&h0<pjHM?b,[1q,]TGjhVWRSU;
%\uT#-VY1e>'8&db[FDQ]pdp.=>qV!K52X&Xl2nBTjTW!&OcAMrM$m;]"*q'0$rspOF+R#d2+$AJEG2INM.toM'eE*6/LkX7b64ie
%d+7X1Q_\b*W'j3sKo/LF[1+T_eJXLEmR3X"mP!=L<fVb56K"&GCbSTg25bKEN3X3^?)[X7ErL/2kbDC,nFF-.AJu:(fPssVojGh1
%`)M38QD:LCCqFmXVZ;+fTjkN-BZ#[Bbl,uS"d&O>8j366ZEb\]hB(fTd\7Q;F?Wn5=h4*b@n;h;Z@M4dHb6Uf]<]U.J=hgNeFQ?.
%Ys=be=DKh8(guutQc%LK74b1]2G=.]]j4_Q5!Vf1RQ0nc)25'+^AQ5KYs+XJ9*b=A')=eQYh1*-Yu@D.q8d_Jh%OI8O<21;dar.$
%A/U_e6.d,.`2VpZ;nTB>*[MnmV!-Q!.6nh-=b[RgBJ>nEjPrQ`h&UgO,9ItHgN/1cbT;q.nnm61%+Uo<X(0a9,[e\I7ZSGE:m9#+
%LE#1Ya3a)lUr-<GClLq<GE+*-:u'#Yg7@WEkp=$FI,B76SuNcZpo?!5(K^<"bodhNS$j]>IXG0PW)W#LUpp2orQr_7L$kZe]+c_W
%juVM[6N7L#@*B4.0$&aE?HJk6l:f+DiA+9]gnn`Cn[*5PaGLH>ohkX3&7)\2j=?moI;#1CU)\BISrVPHUiYh\`o3%qkKN24qrcD<
%`s'f7&R$j:\`A8I'qNYSWEt%a*ndaD1?k,]ceh/Qel>)F/HisYk0g)RbeiefI'g,i<'Q9m>8?s4OjaX;k4*d:g/,Z!XfpU9#fBYb
%>eA;kk(sub*V!ep(OL+""7/ae769E_!@pds4orju7m;5NbW`2_%-(PE)Pp[c@'gKA+)JUNQ8<GYe9M2W@oVuNM+$A%G$pF&r3>VB
%'S)$iZm/em\?17mi21lPg&(DmF#TlI<Dtt88(^9fgTZ(&3jrIJlIT=f7F+g<M-s"C<'o:Q>uiFPRrh[WKb:JQLkoW4k-@n\*TYPr
%^jDKdZ#S-kS-BkXY6;Q'KftAViFFgu61LOj7E\*>+&3mc*inJ,3IaOP-7,DPH"\-MK,&<_^bUl*\t4s;AA'/(fJQ^5WB$[\o:T>B
%S$J$u\?1`G96aBeYjlJQU0^MdZr%1f(u;QVh._^XQ#>UqNHrAX].)Ff]/?X3]8'=^0Zn(fC,7a"h)+<op';fckdo''iI-cGKXXW2
%[;Us)+a1tBYYR&<htNA562#7+F.2M(4*"MSB5))^\Om7!T&rb?db0soItN)d[X0n=1!*73/'s"Wp1?-:-75MKJI<g!f"!`8FcJa'
%',-i8YS#.%I]TIka#,AoqkB']4JELPmZ&4REM:M+FgBtT+aV(.oDS4';fmLKCGu''#abH]&uUT'E@T0?_T"fDc8^dt"[i^m;7M)C
%:Ep3_>7moijm`ZGfYa9Qo4,+^`60kaiUd"Fg&pMCZopQ0IH@I&+]$o]-3[c[96VDk1XjNhs1'eran'^7NY%/d1$RdVfj/7%)$Ato
%07=1R#rA-X^fGquZHEIT+(j;A?do+El$f-O?;:aPTbkDi+aQ:14M:?6F`AEb$DU:-G=SgG&00?qqh[AClI7gL2C!Vn,,K-,[6I.e
%nYZ\0s)fI7H_3O"m*`_ck1"HMDFZaEeA_'hk(=1=_Dn_X8=Pt63:7D<h[WHfI60V0=qD#VQ\8A``[GZFWb*?AC::>ikmbHtbm&I.
%i.HEuBjRl`kd@N=C<>>u,'?4q%]rC!Mn@S69/\giMg9AW>8@+B]5<[:57^p6`"?m'7s<e#?;bWGZKr1umZMu-*%;6Irf*2r4,<ME
%Durl:KJ?Ol-9>FG1K)Id![[e"['2B4W4AVPLc$R`qK7.![r^A;T3t7&fsr5ga4f?gl8>!$jd.hH/"hsb&"AIRS2[4V[+Lg(!stM#
%WpU@oFQ8RI@r%_Sr@hAA<b'UT(#juidEn7ZdA[kdhFt]16.#.(#[)(nY(`Z/EMLqMZ>'^cRmXl2fs5Cfph[h7$$3#kg=gA/++c'3
%)ND:+kXs)MDeb/>,O2.4dOjf.h6+Gf)mos!``KqqR8CItQShT!*C\C%d]N6mfTNZcMt*WJmo,X*!gNiqic9M%aa6aY^a)OdXW_WI
%-?@i(L*i4(JgF,0RU3R2%nS^arC(L==/u"uj,B=po`ONQD+LgQ[Uo>5oQ"&U(WI$qR2%E>\&5YA0rJ-28L(faDsX('$$Q)P84@as
%P^C9oR]FB7q4[`mh7J\k5_YE?YluW;e9tO=e$*q)OMYKki`"KgChSKJB=:,dc(gt(UFN@I`-lOaO)2mc"rX/ak"9ZbO3lUJIR9eY
%VK1>?a/HoPpqs</n$G(.]Gr'CVUkao"LH-7$lao7f10N!DIU10N[$]rf\5uHLi,Z2(T/#J5J.e&s3'+,^Y8^dAaRN3[/V4CMkb@#
%h<9TJejo2JEG1h4S<)e-A&[p5ke/s]9eZ,_SOID]j%rFoaA=7nrnimDEF0g,cn$u[_mTMpfX%?pb-iKF">shhMf/]7M%R=rXXU7[
%]$9j><F7P'ZkA=-"0LfO>4WoUJS;/3&#,'DN4lptW=B<jY`;339@qAM4]_%o_<LLE&=p^Pq+sCpb>c\oRCXWde9HFU=#7#-o2qla
%fi<+Ndh3\a7Y3^K#f"\Wk2I:WZF?I_`fo<,?>SnRd:7"4MW;b.qX.(;ktJYZjbFo6<H)L49$^S705Jg$n&WK-Ag!D'k>i"[N8)^"
%`6#odbh*!K)u"WtgdS(U5m,LT!/c&KWu$]9@.`LB-0FD3iAieL!+n.RHkF\05.7OeT?cVjb;Vpd)4<cOh_8"aQ]Go?;lB54kOQmF
%;b!W[kMo7uSBGP!oX*k1hRS#T`[N-2VXlf8jgfb[cDc`^Vt52so$*T%MpnNoH0=bGr0nS"o*K0/6S9J6OISa#T6Do[TrLnQc=[T:
%G0`SAfF<":j&f:Uh"/=)h.,3lZK;t*m\g9$XidZ-k&(]&GfYr'TCM6/3a3ZXI5[iljd)\RcCF]e?h^g(GdcTQ^[=fGq[WKjhS/aq
%LU)V^jo\)CE:Vj7oOog;<Y+"B<^nJ,q<qa.jLk"KG_VD>LWGA%*7$)+LXla?RJ4@^."?.dZ"$8&hF5'*H@Q@*Ed#`!q=PP56F*f7
%hr$:L,ji]kC\-#!cHtmj_g+_Kh>*$`@1;OlG3@W/lnMggO'i0+G9c-@k_A.Hg3Dsbpp3jdL@4h1'Q\0:)W1dRD(/qo(!Oiu*9C`)
%.4E@1[pC,SZ&I]eaa5%@.m)fEU!#m&N696^D+3aREo.i1j(Pc:`'oDD.Q*A12^1i0Il`Ve_#nafHCV`t["lB)N\OR0U!)[-j3$%Y
%8_fDLUXsM?oPqG)aDLZq%U<s^C:<TPHU,b;o%k3I[kY8WhgD:;7kMWma&)DSc8fLtqjj[^d5a2pU,-A&CEj=((kJ'a'iB"rd[@&'
%io\AT6lV8n1FCN)G>]b2RT6qYfp^GuSEu\1<-)LUeh#>+pH>GHWB"bBOtl?0gDH2Dl.gfn\+[NpdN6&al,O'4h;>J5EjqFjdIuL[
%8(b_LG<<o5akk8qqea5&)([\o`&3>)Ke/utp+3!"(d\)6BAZg22q6X3rd77fd1gTXWH9>>P?6Qd@F')0F44dqbipa_2kGI?%h2H_
%l;_:oa47mu]ps/boWi1um^Ye=h[0.#_GSAA\U$FCOF(0^:iOk$H5b`&DYs%H']4!3WP@_Bh?kE$%\*`:XiuN!VBa0HBp8,(W#RsP
%P;kI,M03<RDh`8k*[jELSIqh@]Jm]R1ENMbV!$EMZC+Qjn'-l?d'J"9eAZOM4'(4cHfN%Yo&8(.NWYdFAkpRh*S7=d3q2IK&_qPI
%&k>,jRC[HMCaMacZ=%],nFk_+OcZ@/iV^V=]69&,"V,,VQ\;>W0&E'XlUcLLBeq6ie0R1i33Eo$PaEXk`MuJt%Yu<G2$u(3BiLI[
%+%<b^30OcmSSQp5%;3-ikk&u(C(A;Y!4d7_^l0A645@BKO>iN3h'c&gm2SlLlktug6._=H`_#]AO3=i/*2?F0-4ZCZQ8MA+F8+.C
%9P1\-$_,o#Q(^^&"-QbO!55UGgQ7,%X7geATh%_(>Ee)Zk.+T0Zd-ed)0S/[AtFKIRjp3i%#2If)6>b_B&4fLYS1R03L[IRTp]NT
%RIb%=/9P<fH0.T18#Xu1R<aGhr8`].Q^MKI]P#?3j"+ek1@mtpc&=FL>^$PRm0fW:`Qp0oS<(=jU,O%en\6i]1H0E/o&QL26\-$e
%8qH<uQ$^Q%bFA26N`II.E-KtlS&O$Ac,=d@Kj)or%8D0P!4KaraPF]X`XB&cG4h1`7GdnKZ$+b2`*>?i9j08&_:O'f_3c>sCX.C-
%G&DK$*+Mo+_6IR?l[16GhMk'FoqSMhc)3G-l"9HkB,:(N>B.am(rsQ@%JcNTSu7OoL8LT(fSX5q3r*T>.fQe4lZpNgVhtf'XbT7_
%HPj#u]^XTF24L)kF!HiYJ'9*.QK3;7/4oR*H^77/O5I98P*P5/AGqH`+j0Ds6JS1j@qFGMHje=^Y9[7aBZ+lm51,L?>&,?%E^/cV
%UsU&@o]RN?a@,PX$J$_Vaj=kjo5T193]%r1=%<[Rn'GB7RJI(YH-XUeb`hV[r1A-q9i@S3o_\kaGr)Zfr?UK-Cekij2M7efdJ\%M
%Br4[kPUD'nRn[E8Y,Ipphd`7,O"#ODQj`Z;n&8k_/&cGL,N5^lS!E"OS$F$T30e)Skuj'DG2J^TF$BT@3hUJ"&\K1$&@fW<Ymg&L
%4WdhY2Op;i_@5Vt)t(l(7H`_]4_Lq[3[)%"2#6k7L0*g)mu',k]CC@DW6ftLHJ,mPJ',<<r8:(oTmgsKhhbTED7*^q$2@O^K5rKQ
%ipC6\VQ=U[kNUto]YoCDqIV,dD%<``5M6X4_JEq1$TE9BU:8<dXk`VrmbuIY$GBZIA3[`3:j.Ob/gGRkRTR@paIh7OrU)e3rApr?
%<4n(C'e8'.r[pl?HW!te,OOnm<s5JQ4>_(?[fLV"fh_X`)ap/J$#h&KAA@qL3T^ZK.NWK!M:$K6Bm89&rm`Ufm_p^DDDC)QFj@Lp
%n9j3OWOmhWQ;/C>AN-P(*Y^du]]";?a6j]Mf1##P0%'h:pc"KQ3!aHAI?[)o)lPd=7oAM.]UnXj0!a@%(X0i4H@;\/DS+k!]].k7
%aa&U:Hc5Zi.(;HF4_3A[b)a-s^hX7c/CMo?QB/ANrS<$:;3?8pFL`b8j[MY@g*=1@HG,on&JMLb?I*?\`c^#FS_E3Z3Rc)9I(%gr
%7\#f_N?.Z$gPnX;Hc-ChE3l-O%p@u,O&XI!aGX(]H71iCo0-WkrSlo$NYT<^*u1R<J)7P&>n>j-!'Qk&7l+1XRb6efeMjbZ`]^TQ
%a\#rY]3-KS\N5OZS(QoR\N/[mc']mO3CT5&8B;YqpA$b?BDTP1+7AQ",ka60p!$3QR#,HbT2Sd_F!TgGM1&.r4FDJ#0X8r<>j:N6
%e&4GJ-j=T6Qr.=b;]^QS@q>k$I83pnEunt99pjSrP`A/IbVl`PBlPo;,%d.nkCf%/SBZ/4I?lTu=acV#3MGRrFI\bo!]B;^5,Y94
%2N+J/m'AN+q?H(R'DnXSR]jXnhaEqdZ-Uj_O#3I8'Dn<*qRB1@U3L53`',Q>e<[6kMo7fcJYB\"Asq<7('?GS`'+tNGLhV!:0j=c
%D<?\':8:2Ya(Cgn2p1ia;.?.23JKH_VbcZ#lI)3Oa[pCH.OH*0Ag:Jjg<OHICVQ\?WV8SCmr1luEsdb2/Hl#Mh`L_X<Go=F*7N^&
%k?I&8mM8%7T?4;+o2[mLO_Wqt^goCH(TBl=)r>sMkg4Rfh8h[)I1G/=:`'f&mr@H\n(!52YBlm"8h9Ch'3PT1gskYV<-@qL4="_q
%ge9&Mdq-9(X=Jrk@$@5kGe)'/V@U)ObPt&Og%a+L]eBDTF1Gf"AI'Wrr6OZiE4c-gbT+jcR#;:1TdRDKcb\H)E<"ft:+[]W:RcnK
%EkKTqQkOMYrI:RJ2"L3%Y,Zj+s#3XTM7RaK=dY]TN3:IbluG43f$AajjLV>NQG#0>htlWfSTB\WYdoL9jn-(gnG/.55+Lch!OGG-
%87U6OR$$"oGm"QO:6.cr9TtQRV,!lMMkPQr1nB%(V_jrmOd0i[37Z0"nag#]0Q/R%@PiLe`*^eHeEV'tTiRM/6`igG;P/C5MR)f8
%L`)Xn-cKnUW3Y82i3T-)CERa2O)/L"WT`>j+:V&4C%$_=dijQCU=3b`YJ]nRn8-9fi>-X4HmcSBMk#"ZN*YoDYR%Hj`E+n-YaDst
%PDmc4HJ%9-8Om:>.tn&3\<+u%B0Mg+-q2jNZOg'>>kIm_&n>h5';eSc"^,5KZb"r^VG0r:VNq:s:I!G_c1soKg^$\k-0-IAgQ#^6
%-t`QaESkWq/leMQ9mU69B]"o+X@XFB?:JHG[)gU+Z0s4Nk7if=n*j-\`QIr=`#,-<dJ(>(F5H_aG?u6VA*fH*Yq3PUbt$rDs2J'h
%-bT1l86*-+rAWstZ3G/>CuUJ!n))oV$Nt+()hn%cfmPdX0C*[mc2Hu`Mm2`>].q.8IrkUMDo^Ls8SMk'C#_U4GUl#*e;Fm\-n];!
%AG_\U.gnNLe[Z:$A,hqqBJ#O+3K%_2a)>nZQf!TOChU+j?^j_6%8EJ^Mlh5qD)Yepr=@4[/pee-i?7i_O)#6snTHHB(^oVMR?-[7
%4u6e?,uW-%mA9,-Qc`C<gotoSN6PIu44)\@eif2uXp4m-0E:ae6n1qg^U[==;_hiXG.t$El*<h\8T3D'[&_41k'fS&I'SGJN=gO/
%QA_jS.?1mjaK*a;BoI7(A$i6Ue)]=sDa3RnZC!t08Ed>LDKE&pG*CC8O6bHZ@_NK.I@R;@9dN9s7et?A[7>n[mRI#`5]H)50HH4A
%^q0\]FW'>4)4Y8iR4.OTSAnI>pp0#bd#<a/WTUkK*I3Jg$sr<Hn+-4l];tjXTt?fI93`LuZE\-sQ]3(r]]`p^018H-.sB,QAPM&c
%\F)0qk/86_CQ@2&HY-ULI/Q`L-qe/YA>=HccNg8pP@%%nZl*\l,U2+$HK>7[iiZ+Si`5^-C>[ZajMYjl44I?8bQ$/A!`VinUZ">T
%eTC,>ScRB5,H'@H*,W2j9fKiPRNpE)]ZMrMTB;@_(YRU=Ekd@Tj2s[Tm_K*m"^)[1rc1eaP`"k/.p&[m8+hq3)q6p!nOa*M^NG<8
%3-cp_;V8Y6Oo%2AJBs"*(?R#t:VJQ,?h[]@K9R%'ND!.9n]4dq>3Lp2@ghHs_Du.[:ZCB,BjXQir6%J`3A#`hkY*M)mCbuD&'6n;
%DN>GSja!u_W"9o[1W;NWkh?CkSk:bm('-CS'4O?&b/EdH97GDZJQkl/&Z:iC`1>EHFLEqK^s*L2ktNWLJQok;j2MG]o#O2)7=s68
%JMF^8m5G5c<7Fb$7r5,b*YL/_f%<+MJs16aQt85!G@'920jpUE`Zkn.Q_H9P#?_N*=PK'EVAXLmmEEGqGV1smK9#9.Sab]%B;-,Q
%[L)q<R)LrqFRF,Qrj:k*%,>5El=?Atb(HjFGbbepmAQ8fkt]j,X!abiqTE(^C"6Ti__GP/q9s/R-l&Rqcf6V'+$'%@HsorN"uET]
%D/SD`I)n`#:-HI>`]L+,%oIC4W/Jlhd;D.K#DSgW@>RN'H(PM]p'?'/fm,-8^.tsFb($;bZT3oZl27o&;P6K.F^Z1MBR&1bdAjf"
%`Sa*`\)"N*'E:8f&tR%h\h!#m^4>[b`/tiJo.`)aN<d.7eu%R8D@p8l,8-'Wi3+*s5.r8FF6qIIhNU,<d7.G_1`"J.jsKomVYusY
%l%l4I,%f#-*ni.d0.##L`Trn@j$+j;AU4jJ,<ARqs!`dW8.=T)cFMaYm4Td5Da'n4oc-2ecsJurSB$'+5#N$ljs,0klm#$BDa'mc
%oRid#7)/PRQ=/A8.H39.d<U)hG=nUeHpe%U4!g"t1t41J;WW1,TdeH>l",RcrlqXZXH4>A5PKZtAVCo/ST"<Yp18qq12Y$t(#!,i
%Iar"`6Z0MCF'52JOoBKi(!]Np^Sh+T$:i#B+Bh:hURPS<mH7G!]^9ZUkZ"Sh00F?t,SXk``6ic%$P0oa1?Q5F[ISh+ToX<^=^622
%P>eSQ?[1f'<3)uO4QHg!ZT-LXj2/_(ni\A7nBa(=D7:O31%\Qa*fA#Khfe3oGYE5<iC%BDj'R&pk+&*R*P)KkN-XBUpPfQ%rpKM#
%IGpkA?fqhM4S6ATd-T#A(EWD`L7RVH6Z\K^SA;RH]?)]goUa'DoSfs;00Jl5q-7d_EA'Fr9Dhu"gG]cnj-'i]II7^B#gMqQn8O>j
%lY.t6jG`/IgYpr_)>VPo*dY<TkY.E*_F'Yj4<qEa\F@j,>]%d4I0>!O4S2AX[`(L+Ic7!0/LNr1:Ntck%5GU63fSLFU%^a3You+_
%`-]FVLYa32VWW-F$P333a3EPZ6_9G&I,!VAeiDuKLQb8[#qe>^8rb_C$pu&*Zlsq^NQdBrVf;3k$aUQ\G!1`k&%umCS.goASEdsY
%mhf4_qI-B3&%ta[Z%^#Z-bf)scL]VS&$(>-r:t#2GW:^WS)V:P5H=Pg/j,);hKCk;mQH86TE!pg6pC-pLI81G-DUID2Wf^KY#c;E
%b3]Ti4S3h'd*rjQH7!sb4b?gAGj):-bl-\]QgK(WTssUQ'`B`5Kni#>bAu@r`83fWKnnNeGjInZGN#7iD28*G<d\.s3.m#>LC4X5
%9\$UuTVf6gcoG*uhf`Z81\l`[hR=NZA_P'=*dS&gc*;U&7q^G5E4C3upHq?<oYNs#`-b>+YqA//JaM^b_F(6>/"8b?()J#qE#Nb`
%M=-.u/j(u+38Sglo;><3iLu0+@&qJ,7G@cqLYgNkHJ8!-*XY;VLd$!&6;DX]Tm)[f8>=?U8U$2,Y>0T+U%`DZp:/D)00Jl5/$(@'
%qf6\P`J/KD,L%IlS1YJm@3h^&^cfR"@eqluo*B^2KoUu`-dT<1L3]#,-^`HG[;6ETX'_TNN/23./ejI)_=Om/<_&M$@)^?si9E[C
%&6t-s*66R(oHGr/eE_:C?7$M<n".SOQI_DQ+3/[s:IKLNqsjBQ]WtU7V8GA*MtchZrI-/^.:+-aq7Gh.qVpUtL&BA3lge_crm=kA
%>TS=.,X6'7n%53q-Qe-:bB3UAEUWee;XPO=?%/;&Rb+D2n_iQ+'O#p1a[JN\n+<6M?Y>L\[nc"5\)1K&>[?T;e]$Ho]A?"29@Dh?
%7d0iMH4rk?N`W^)(Vc!+g/9HYmI%'J"iF-4j.MPuD+6F`g9+D>G.+7,eW6G(>%jO!V:1WhDRZmWefB-SYOkki-PbuoOC`lYIhs;5
%WKRQR[,O`?,iD7JS)d5OpO9=h`D>f[_MO6]a`lS/p%.psbY`@1ZW/k9aJ@E<Y%5:##e^MK!/sIPVQ='P>VCPMG?]ofi/a)>LjNJ6
%YHc(9o$ZpY@VV[+>roSK*NZn[mVch(jl8bIaAmqfHGkWB[H,a+:LK5SYr?%F?OM#r:N=T,]musAZtl443H5tN/i>6K=O]'-W'Jr#
%SE9TQOVg0ZXkh:I>&Z"I9WonQLQuf+#:4^5.F<?5cC<Q@rE.$UQdnVj\hkh<md9JdL$/-R>b`:*Om9&8p%(6s`G\!2E_#5&Y83D_
%jmP'3cPJ<\@L]BUd^[j,<-PM.@q67.bO:-"@KK,@>mlde5`+;Tr*5;ET.jJ&^>\8C)ZBK]X%2CaqZ>"?c-=l"9Bb>2H@+Lshq^7!
%Foh2%&_3i0H8T#^`>?(]MX_l?^:9JEj96j`@8)(C^@c);P(XWeMu+Uo`CYmX<A#<:Q]5ViTlB6V<]+3F)_m%jSTPela-l#?:F&Vg
%qNCRc7gf5pB]GB@-):#%#VAs=aEUD"q3iI'(4cusn]I>BP4D7<<>.B/kZf;:hojQ`;t?-[>J5NJM/=HUmu!8&n`?YUDm,nrXV+7-
%f/V9\(^2.<(/pCE]NcpSe"LCSZb%C:/;icuEfisg@U0J5Y"ZVuPB!KIS_@S6/g!e[6BcG;TskoMhWQ;pYI0Qfnu9&iB1qIf1<A,C
%mQnsB[?#X%_]M*L!K>-28n_&ujLtR:Y`+b&gHsHZ#A%p%J%mX8ma"s1FnVq_Xfu_rLM&B/PsVGI_Gq)BTY0UCL/-KJ\_k@QmpdX9
%7<rU!j\Dhj$nbZBYG#0QkO'&cS_&kT:ZI-E.GW_H@;dW)DskS-<a7)-1uPL]Os!=)H!opF%UqhTfQr%[+^tQjBd-,b2\7d"55:jq
%#RKr3km5A@"#BTq]ZA>Vb+9F[/dNTuZ%m8X7RnLk<&J(b?!\i/PEK]LiFao>Kh-Lg;Bq0r;=r+f(5)rb$qKF>*]/D:0'2a%=`T]u
%f=1)=#9,T>IK:!7O,VnR%t#Nj=$GUl%mm"`8GCM[Hl+T"IKH&5!QFFGO^tL0k4tE^cF8[OoJp&%o>V=mgW>quh!8UM#.eCob=$2]
%4bSJQ-5T2TJPq^CjO3^9$:aI^'ZEG(ae!\cg#jX#7an(sGn%6o\@ts`*c;Bd=Ph7;j,HqkKCVs)hJU16FZCEo0U7+Q:;]OY[XXLI
%mb\ROn%9Y-I-gq,mup@'GdZe7f*X588i35R_MP"ur;*do0!!Z'r8TB>.ik-DZ:N&h07oi:cIVQ.5csICprPiR.34Y[FdPft+_UP8
%i19dl"?BQ<"^%6?KTDI=bE:-,?0q0R++VE!eP5/ua8M--J0<-51C0kh^Ni.R@V]1g.0kJ4j)rTpZ?:@O,k8t%Ku6n:<)ZGoH6,T4
%>a1OZg]KQ_Z^@*R@[e/fk&O("51r&[%P"qjb15Ip@tsUj/Z<a<g`fM?QgRJY;<a>7=OnmZCL=!*\Y4T!M8t+%*2N!F#<h-F32V7Z
%er%o1b@6>(V`4plZVO0Lh3JO7:Y5)?MYPZG[_efm85kkT]qY'99^BL"g#I>;mW;NUW>6S($n7WBa)CS(C,Wba`r^feFRZiUm>I=F
%e,h<k")+H_A8H9"L3ZL9)HV]mU$[R#P+#*F%rfOD]SDf4lZIJO.B%qF4G-CmlM]O5-%?LB!#!]Dc:ch:l#?;V""]N?qZ</^b0&+m
%[0$W;U*Z&UnD40^SN_>`9O2NeXq0n(1!,(urK1uQ0:5V;2WkGtfmAj`b<h2V+Bqj([743#bsUdI+bc3:<CJ^3Q9<(V:6%mJF*Ob`
%f'AL4NBu[m)[r"]JD+k`pWA'&K&g'RlOGeFM`r%tf9W0nd%JkUcHHIm9Q4-Q([Z(<q[[9XQe#Y0W6PBR::>+E>lgP?-;c^/"^U_*
%6JXcBSs@(.j;B,pkBmE!+l-7rC6j"9rQ,KeU6G.(G'8@gbJ[^Q9*Z3WZhEklouqfNA(SDX6Y.gXeYhSu@Fr.U5ud%;`LZ[(P>u[?
%DM.>$JKA4Jc/,/3pUEYbY#Z;k*`7$FkHtp_gr;)a8_uWSg)t'tP<l>FYftA5&0;7E?80b=XX]KX9Sp!So(C!^CZq&46&V4S5`@no
%8[=Qdq;.r6KL_.1K83BX#e+m+o5#Vk;'0mVGL'>l)%k"QV\UJXpD=JZe0*p22CtWfJ3i@7)J)9k"qgR#@e2gf]pXH+T(F'7b0.oU
%:IYS#+H(??SfYKu!t5+'KN-gSD;8Z@RWf^hVKH[l7ftRJ7Lr5B#1.-Ilocr)2dS:ML#/pn"VQJ?c075k)qiuX2';FZ#TL628@m7a
%85Kg>(S-bpel]RV(4ost-*jG`H#@Oci([m80%+7<+nFcK_IceY:U(AD,I/fi-?"DHmE#eJHQ/j3F<?X9p!4Cl+M9OQGh/n9Ss-D0
%W[i!cUA8QAA5<_N]$,9!fpM+TmH#uO`W9U%/$+iSK&k-:UYM'HS52oOkZ;GF.6,7[+ZE0fbO-O;dnDA;SE>=hLW&k2$n`,P/L5Aj
%6le!Bc,T2N3A'=3Bmu.OS/1Z=#_OZ'a)fgddX/DH&b_NBjs'1YN3LEq'-^jhUaI%BYfN:dCdAhNNtD[[Z)8*UAi;?^,#*Gc@%>9j
%:6rD*-13RChqMe?oCY<(\eps`A`hBD8/g(8M:Ib)C5Vmdg>r\77>3NHU8N^T/+9Ra]R@8]&Q/bPVNh$S(`o_3R+"j3l>j@RM$"hH
%)Z\+TGl,i&Cd5LDl,,5)SDB1Ik][/*0L`@C_T!UQKRCD7D,Z37=SZ1>a!=6WYrMCs!r51,McLfSQ-dhE#53NKB1Z.mT.QelY4QgC
%q3c)s(/if,"m!^E0`"\ZJrf2FE;?r4$nh!#mg8&2%U-6O)JG4fkfGMg#L2H7_sB0b%EN6\B#`Y!$c\PE+4SGI80%\^]DZRFN^s0f
%-peM@e^mc24/#'=\/lkuB@uXC>H.j"C,S9.[C]Ee'"=KK[e<71&iV8H7Xp4B]XCJKn[H3*(ZE7?"u1hij!Y.ulkK_FmX\O5=cH'm
%0B%=kqpR6OmZLg8WaTQoE)h+K:fUYH0CPp/``3B%+En#YaB2cqer4<5^!stFc!@oi8FUb;[:4eXGM<*2W,d!.In-ZS5O8_Z'"@n`
%:7/Q9'OZ,2_F'k8HOfHfF9?DljQaIZPMW6b#P!kaV5+`-drajA\[O)UY0.]o?OqO25<L,O,oDc"!q%#'jlgmiYR@H9GW8/ZbnSa7
%E]!NP25CCnXDi*g(5a2@XX8U4eJkg&^s"oF;aRbY+UZ8GYlcEr5>6?dc-bJd[N#fT&1qgk]NY$?LH!4AT1Qb*#V+AICOu<cCqC'&
%+jpo6,.L2\6R!>3d)?oBCFL'R_IkkY'Z`3sQU4#Wn?""X_WL\NrBn9Vdn65!@[=c-U2OUG$-,9a0c6bIG88"TU=,aj4%>pIEFefE
%R7"`q/l='*flo5q[+=,=/(_bbK%=Q"A*8.u)#a5T'jSt\K#-R>]8f(P^1m3..:[G?/MB-G&MRp`21eNt6.6qjGh;$eb*45]*s[jt
%3LUP"/)o8DVbRogou1dZ#F<&)pIO=Z2Pm:6-fpmN!2Fsh4$;'T`^s%Pr7F(dP@TrR1thf627\j_\2gh25::4MC(E&b$Zp^]!=pbe
%70$`!7$_H[G[,km:@>uo)?Z%5Ro_E)Q%G1V%r6hIjcY"uV1a#Enn8'2l7.=OoA2*P$j!_iiG'Wo#IhJERrWXa?]-l8oc;g7\g*c`
%P?+lB`6R?o8rLpr,'Hf8/Ci6ujlO2m8!j/d]'PJsml3bSNfr9/+4EJ'6gR&sP;rXA;aI[0)K/THpMcTkP,$>f[fJgN3f$Z"'VrX+
%`A;"B%4.&XG"tXu+Ou*t@XSd[K-*tTD7uI9S,8K\.mL>[Q@-O3.&mK,2r!65QP&20F-t7JjtbcD"RUaIS#s;&6eE(o1W0k:k49D]
%%U*U\pFZMfq<&ph*Nrm>^`&\=jmT.gF9;h)2gfSNX*-t1OV,r+[p_ph(tF>eh64J_]H[*`oGO739KE_/ELg=c>q(5H)De9bid,B'
%QapGZB^os8b7=%FlHMq<R@GEB8Sb;uZD4$SqZm6WG!)if.AGB`ii'B<LKPUcl'msU\VGN?5MI)H`^,g5@S0,$$R'1AB6SrNBUN$p
%[(R2:eE>T#?+6./AsLubaUuga'^-;sZgqF=;).(Z>_L2oY\&$AE`/%X7:%-70X`hU`e:Fb`\K)9*)SdAoX3s)2VIisol=GXd3Gr*
%atG8,8)%RtR1V#d(W8O>p9pNcQCbs(1JcL783Z_6-XOR]ACku1+gEtrQ@cu+@V63>f?l4B`07PW.j016%\ZE3,h'VJ!B7Y)db@V.
%FSN`0$)SbX8q*[s@\eN9WhK&)\NhjZ!J7O&O\Keo[X)p`j+lp5cP<L$)7Cr[rl#?`2PqD]/9Z>(O+M0?_o%iU3`;9NPPhsCB$4f5
%fW:K$1T)q@9]NIH`&V_?R=&0Kdm0%\X\3,iLM0%SP*EDlEqK;NFNq\Q3KG0D/5\:V#TDWU#7(oeh_71Da&15.U9_`*O'#DKWaBOP
%2bM=IGB"iL>q!:Jeh][YL\Je[lg[kuG'd_u4JHWT>d-25Yg(fM%hd-ens&!Hk^`g.@\nV!Y(GoLG9k]hqcREnAu+u/U+L29?p1\6
%JlT(A,T.0``qF9k9k#$p9@F59=k1AK(Hj<A!Lm*@)!k[0Bd5/074m95]_uC"D1(.QCW[H/S'Fj^QP/gXoI,W;ChX!j8$;SK?dn4V
%"cV)nG`^uS"2J3*#4Q#`etfA;neD;^@'-mC66s8Tp>(09FNp"+kVra-4jip3l#9pW,YKQ.ZmUgofHJYuld&]Xe)\U5Bc_a&KMgGc
%56;3fbE6<EPa,X.4?mbhgalQTMZr3%KnKsG;1/U)?\@V\Fqh4hRh<)qY`\>b)nT+\E0Wc-p5LMWVO'WG>S/RZq]e-bSHVm/9JrAA
%$IS??-AZ&$OOlc)]&-m]X)D0JGu^FN+]PkX*!>#nZl_[8<#!uZT&klPkTG#>:6g^)o@u_4E'JRRh;$`MG.4q7g+L,R\\-)RXOcg)
%L%\)90&DoV9c?Y%5%e)ibO>Pp>TO>YTmJ;aYb@'bb!Dd"19qqqJAO^r*O==VCb9R_L\9C"cCJCG$?H]6-L\-Scm(rk@s[F4`O&n+
%%@>'N7?ds&0u1f7^4si[hZh_8eea2,E]1_94:NtNn1CeqOVLj^elVhAF;'=UonLUg[(ZeRfF>'(%ZlN`8I)rCAi%4fp0?Zdh1%R0
%bPG]<ck@7(DJIPTp@ZsIO!HNKZA3dEI4.D1a<'>l'#`,Fd0SE8EP;474VjBaRh@QkfV-k7P<?THlj,co/pYGQ4.sZu+8?C/L.nAC
%4VKns#I/=O.r]J="35RmB'^k@6hu/&S<_:G+Ip*dk[m:]`0W>K)BCnrWV#''!#'B/+k*t0'4i\/\s/Uk9=Rc&ZVsCmgl8UQ+uVOO
%/koNUWg'Q;^KD[?3qS3-l"`2U":PCF%P#MJ#1UIueEZhCV8kOFQ4F[M"p\)NqB23mT&\bSEVon@=^RUf.675Fgm&B;[TG/"8Oaj)
%mCjV_=R7ccL`GQ03>>R4Y]Qb:A+!G[ka2$7,U=SB-W`?9ZBI"4'W>0eA):)h[o_Agd0uku*'H!n>7'"-&pbHFAG)s`CPnf"P..9?
%T<5?,'VZ4dPl<JH'Ul?Ldq01[dmtX.r.uSN/5j8`s"U<Ga?^0(`Z&P\"dIm`YggC*JOT&aCQh(qCg7+j%&K%'5s-]SAgi?9()RZP
%(+HW&!RnP0O!fX?G^m<h[<[9OXIIYSD++Xp[$Zsc._/:G$Dj!b=1ANVl,`-)ZB!#R:JBlafOe$[HNd<G;VWU=p4-6S1Q+Pqr)/!7
%=3-]@qFdC,>hJs`B/F,^e1Yu7;ep4noS]9ff#[_qk)?1Nfc<cON8@]%l[([fBn?@[-!=/rYqqh`SX&t'G")QNifF)Xc=eJl8BYRd
%lsFZ\Tj$1<N-8'I/C%q0nma_UWO4WVs-['W(crdfSC*OYSN2.jNNipNVV'Qcg;2Q7c!0O:H8BWIPCH]Y'<u'@L2V_C'!XfWNG%89
%9Z53r4!NJ(Kp[)qln7"48m*D7C<ZWa8Qkoo@L%#VlSdBK&NaN>/DFRmMOjVU-pR*7i7mXTX4X*Q']0*NBShDl;=&,8Z\LCP3sVuH
%hr[b-g6JEd+J/-c?[6G*O%slCPZNftZ)UGbZ[)Q(0q:J>9k1IjIjU*K+[HkgK78P!IYq4gYp+Xa1M&u$O.V6#qO%Q9q#3U'&j(Ku
%dqSQ)9!NFI_Ie:7%uI?,.:A%*?Qsh"kInVmr5iKqgi#hl>O[d+`3KW,+cF2)PbK\hkIO)&NYQSjS7Y/0W_54K,k!<:Wl.@nh^hI"
%YJYL@iH$&0%H)aiJ+6Mm.:CHK"6*U0^5Q/(E\bQ-4'sAi]=96f?9gLuajnAU*r9Zi9'BaU^l1/s;BXenLU3t<)heBsc^a.ee-I'k
%r<Zc`:$c:r?kS)'F)pnbjj^Ms1?b3&TVh;$K<F(?jm#9DT;jiDSY'&Z5jb`Ao+BYGgr^6VD5.?JR-/*Km]Dqgr(oNt!tfaJ`H)^P
%jB,B'UM%sB'IULt@gO)qQ\u$XEc*0X\'%Bs"Y/]r%@1(&I!O\MpLe?WrC1t_EJ*$T%pm8/aV^ueoCo:="q$](<fN2LF@>KC1I/0'
%&[lUDI]fju>OJVuT1<(T>AJKW5bAGDIE=I$iX)JZ5L!$\:56t/@NW%f,/T9/@W%+=aK:R@!/A.=FmOF0^Y=g=Q%1IC1]54kCqP")
%StaY6fR,#t0'/hi$PIDm68.`HE)DSp=$9$O9RH('*5II?RJ^$.Y(Q68CtEM$Kns#Z<f@YCOupDLT6PTJMB&6Vj#Tt%31c\\&OI0S
%HnW@_CXR*f%T*)i5rFZV_6'KW"gTa7Vq0\ORX*D<`P6l:QB.@k0cf!S1AGPk*To-[ee:?7UGO+Eb1R^(DM9!_6Oe%S`8YIb?)_2m
%pM3u!-6DSmA^7S_iY`l4k0!fjdA3k#/5R*"WcC^,UPL\Y;n7oE:9WGF\CVaQD\"U-QR^>(G'[MHZ)NsfriN&[#1u1i?E>l6I>sa)
%##B-sXSV+4`4nI)r)GHd/U1,kKbr'$onB!Mnp:5IA-?%G"Xi@a3a9Nb=G3Q7r1^Mdb_&>XMr5DA/RfbP6GWMNZUOk/YVhTCZl2U%
%l#\&5OHl31l"V>i0kf.MVqo@>UD8U1rO+HT><K5FbL`k"]@a7;YNgW)kM+P'=2!,pX9[aQbM<)G9$c+im92XaAR<BP/TTLj[o><*
%O_/:fhpS@I]nMBHErJeEgU=/T/"N_ZN#0?ZTO=Q6MppUXaC&9`Y%?,3i)3i5"J\So'T@ci056;->!dlcgs/<,#Al$c<p0g8#nocL
%&CtE3FfuV#T6E+jgNn=,Bj&!8lGf,ZB)gsb%:AKQCYS]/ETukm=a'B9_a9o!_1hHJo>u!q'ZL?<]n29m'T?Wb2Kt,)j8IMq7>6`'
%#g+^pqO*!KAeB&7W)Mb)8bIY,\JVMNN"``k_<d"kD8D_r(2Wld0[@Tt'G&uV*^u"i[gq$.(OUD1^$W?)Y*1Z&'U-K\]!C5'`1Mj`
%M8;;/:(o]$:D8B&@[rg.@NNCo\%#)WF-?:KMRYd>aE2Iim9JSqF0Y8XHN]1PcK8JV0tGSORclKNP`i(_>BiQRH(6_;iXTp)3+qVZ
%c`]pPWiuh>_@#+b$E\$@QX$YL.u9S[FHLF[hEfPi^)`>Q*_VNYcQ2,K'&"jRH8k*<*n-3URQNggZK5V^T'fPGRENEUUMsR%,OpDl
%ai;KPi-CY\]t7q-=?MF#-629XP;HD(`u7%klTBs>pd^iGC&NfT&,:]o11+C;&F6Q[hc/X*7N3alHmL2gmTG`,<AOFF`c5qkP4;6^
%O7Z>A)oe"HWq[e<\]C)0c_%eZqdjZ:\XZgePfMc#U-Z^gFLuUj]pr/r\/8WU8;sD9SH9(\rOGF`l,NYSZCstdpf\T2-OVUs:tO>L
%XG>$;!FZ327+HZ<C+e==kluoiO*I1<na<k';68-ca-5obi\%]tJ:(e7RhuA>/b=1b-=C)Qm3FtQX2*Z[0Vl1%UNGn"RtmY@97#\2
%$#)OgY`lt)3.J0cQA-,kbEajJiCQFZ?9FE=2GVh^pt3+Bq4qgcGhM3[FuTTZSsF&H$]P+E(oNEcom&]<4!=jEO?IZ6b"alNI*0a[
%V9m6]@l.e7j(%u_-!]q!+\1eU3Rci_lpuiT;mVJTiALlJ@KUu#H_P9\fU(f_I(K\ql\U3g0;*E/07r(j`j<2F%+m.Xq2NR)Qgt0"
%a]W_5iNsGBDTgs\Mak<^Nj*L`^Lm/^34e3C3"FJZDTeU:\Li3BRIKF+#WoS_,so3j1!bhOKGNe@crDTd%cg_87YFV+^@od-^g(oM
%#ak/d7$s`^83DfP+=Y]s%eh.f!$1SL+&(Z26%ngk#pB@KTK^k\VOXsLb<5T7'![8c&0ECNSBj!3@0UcJjHt]?c.O`:3r<qY$cr'.
%5j[(*W=BRcQiBa6K]t2..n6D')<C:2=!ZqP6\`99o$X(`RagW'oVUtG^$gp`Rl?oZq3Z]?/.FFgKP8iAEHYitQMVr*$\@%p5J(_.
%BZ$m%a3N2Ok3V3a)2Ve1QnqLUYS3e[*Sn`K(H(MAF#Y#a*(D3d.($7CqefWlp_^hN[NV2Oa&Z?sp`)sTER*9()^Poeq48gDh0Iks
%h3WtO[!-n!(!GDr)XMP>BH`gDI+l3:'Rf5)jts8jh,Q#Lg-i<YX1N>m0WUY4B&hISO5>!Mp?kl;&e!+,kX]JCf"C)oLS]uJE6=1L
%k$:!ln(bZb=;ZaFdX*ei#d2s1>hTtX9#V$NGp-%aIleg)N\4*i/8]e0Ah=r7js"+,F?Fiq5?h)jI91.jMmTAnX*d\kJ4P2>3PogK
%^CrobBYo4I9YJ31,2/i,`X0XkH1C3_3j;\omW<@D^(<YONB7`>#MKSO,Fb9:*[DY8p"h(L<=6'\,C)IFD.!,q(Q2.sQWFjufqOgW
%>Jo;'>>)BSeTLk/4Y5qB#q,Y'@;ERgSb:aVR.*F]X)&kL(,.X:1Q?l"5aQX=_UakM\l:LFBV*m8D<ZlF-^7@PjqiiXm@Mb66?[js
%*KII2KPV2Ss5Vf3)RiBF@:oD-*Q@4`&qt:J+ec%l_ab/chC?_t%')HkXVgYs/]L-TSG[djTFl0Bbd(lr;1B(hjZX<r;g(irb<\B_
%oT@$o5g\R\I/G=^g7'm92n?Pd*$PbsF!&NA:?F%TqEakLZ4Go,Fom-ceo3u^WMWTg*9#%;e@OI(2qoeue9MJB<^&pdQ03)LmZS4u
%+!k>R,Xi(XC3-"p@tS!2fBL!^of%;*a7(o0RBcg83NX1(B5?KZjC_U-G*R^id*Hoqqu?),iUeBP`iNM;'dK[N=1G_5h\M>g^WO6$
%qR5P1$Tr(jhD0L`U(j!C]p6Dc-B&2MmA$"7X!V^)TaM2K?.Sn*%On-eAF&]Deku7(H?\d93C*V.i'7-5V?=,e$7NIq5BM:!<13W#
%ol'm%J,%b_r\jj<'KBhn.kgEd\"@S<qi,d"h#/J%:7g8_+'n?u"7#tgquqsr"BGORklo5I]+EZ)H9keCk'iKq)>q#CbM7$p!Ib.*
%;Ms]f8P1H5.AeC:.?/gg8P>l;93Ot]P"&9%>,8=FJ,Oq(3Ip!OiW$XqA1;I;G^,AQ[5iI<mE2DqY,;m59hr`>>u^u6n1:]^;Q7%m
%YUM\6j[:Z!.11@AC-+Ql/,,P7JIW@-k++WR:.k"OQ*F-,UoNYR-)%.9WppF'b0XQ#HWS4E#Oq+n5RSRXWJO_Derg&.dX`eQ!^fmr
%;G&eg22t+@3ZZ\4.30N#RSM2IWc&B.!D(W)Lb?XZ8h(:R@EA(/!ak98R$:>kc"BcBR@;\,)lV+?lT.0Blb5B3&[5*nR%e7J0PMu%
%dPW%PX3"HfXea3S:#T5IMh*i`P%VG1dkd]cRkkl^$VcKBR]9RuC[%33b=P?"`\RXi;:k'#'alBC%O7^FA:sI^lLSZJLa9B1,,HS:
%,NA>hW;G]c7_f(%;\PUo!rF<B8QA[k!k4Y+A3H&ADHDA9OhDEC9M]?Q^*TJCW`Vi+4;5eIe9-(L-(tth!I<^J1)5Gp-sNq6cU9=I
%0I07_[6Sh]B%DBO"s[N<<+@@+Ti`_5!`C=ElX1RUKL%EZ3^'eZU_=RG$Qu=<dW$2iZ(sdM9Zo.^=-MdQVXQ.%N[ZIF[o(cAR8EY&
%)2s(L4AAIPb48`%PaIn=/M.jd"GfNQVe9$]SA9q*P):RXKN/eboU)_q+GsWl582!dYNti)-?>ZmLa/(?V:)S5CU+pQ-&F#QFOc&9
%1`eN.8'm&=V8uhOe9$"K<df%B+cZc.Bke!kBfH,-3Z<;q+XPS!_l!3*8lAu6$FQFr$'jD<!Ek*"p^=%%b>:[FklQg99G6-'2's^@
%=X";.ob>4_"_9)kJ#LB815qfn!9CO%H\g^AZ4LVi!qC,bE"WJE)&dq%V..QRU>&9aZAN72;bMWDeSW*u=AkK&cYVF2KQHFT5WDo#
%,tQD`U^h\X#[p%'%0VNf5ogu!L-u89ehiHqP5QQN3JHdtY/KC#P!+KeC$Z%G;Fr2lo$@LB$UIsk\s3W6Q&_*:PQZ"S'"0\u^cn=;
%XO*YO9"*b?e0@EgVk/d1^c$;%A#bgtoQ@/G_LSM&o"_gO;c5[<AN_&,VI]Qk<0("?(dO6`,,K8(8LYR6<)B173ZDT>#7sd9mpM6a
%<&/#:VZ<9N[K]$-d$:tQ"0KuW1@%;SG;qfHFAjFe0W?\"p_LsOr0UG?fa8lO`tFhOH^I?T:a<=ZYQd![Uu[3*HNkI@$nrJs%B1qF
%KCqL]m1%4BY_,e\"V$&Y;Jj<,e/_!_Vf"PY!T7a^Ag9YEPYY;eO[4A.O9(^X1cu]p?jma`:)SSDJJ?X,#>7?X#YUAO&/O2o&=/+F
%%bV.3FEDj%%<4od6/=4q(e-_M732NFVirm6T.ERBLJTb.6IWG88h!?ooE3d0+H&#Q8Ft+>5\_3J-;&"C:dJ+$?4rP6J7`R13iJnA
%d'Zt2!V4e;d,$!B5_kqgS-3k6=(I5,-\F1?<$bN=F?kO85;)YCM2@:d`FPENOGO)tMrZ.f$!C\E!R]R5@=S>U-8kKjMLbcXD$=KQ
%BGK@W+qt$pbD$F=:U4ebAEsKd^-hWGo1/la=[Hs:b(8'<HiRr[NXq=f7"^PF.Zpqu"'GfN$Tq)%'\s`5.BS^)$tMkcO#Maopa-"M
%(Xm\.8_H_Qb*aHB]%J?"Bkdd/TRg"@Pd3KZpP![=6Q\`8TG\q^>Cqt<WWUI,;@-m)VUD:O'N8E/PjMl\0MSC"3MV4Y:ELon>(Ski
%M$Y$GLE$jJ,4UMNg:XGa[ZW>YR]9QGKWYs]YsO5CdZXR&]gn"o:-E`oKW*69PgD[,QW,<@3@1a;3@/&;-fhXNV$'ZGdl.+h<[t\G
%%UqFn#-gHh"tO@V#4"X'GALf/dG&XZW]8Tf3>'_*IJ]`p:/=3gRZ(9q_O0\_YpO;uJXmP6CJ>"e<aiiS,`7TtW$VP)jE-P\G7$hA
%fqKgVI(IL86<U!-LfX;A['g96".2Y/)g!L$C\EOl%WU/UgeUCo8JH=_I;PXdiK=XB)%j5j$;.'h$aeuJKTaT)JBK66C82PX"X#b(
%:^P&i;-H7_Q&%=%$C$GE[.+,Qc_R)><!!3!<)RD^GecTaPo+sPb@io\/->u4Iph_FPn47p-tsP;<OGq48J/XAdh+?MP@-3)?l?^j
%b.VC5'`P\(D5#ES_<IZ/Wg?b+gd,Ml[>-sH"Un@qPbf.W;:?+qhR**/_DWo!r"'Q\)>Z`0!!B\"^tpTq=\s7iW##I\'ofF(-pH!=
%V03b&8\f]RAQ;iqN&lJ3c;nTbZtLST8lS5R"qC\Q'=5K%!)&kP8sm#:mSYelRk:*?(i6Mo`NMlrGHBmO'j`5'rkR58f$OV@1tWpa
%j.M`k]&[6OTlLRML&t):&(F]:M1%<t_3@<:@?hBP72.t.71s@n_)KA0)21Z1=p%5q<eXTMD[t?s_f2Z>JRQeI#s_3?_=@j)*mp"b
%nd1KsR1'ci73N\*APu*mVQ%@ad:$(D%q(rp!<ofq8m=e"JC.>,1drRf#VO]-Zu5jId@qaQ@NEtp:f$6`Rh$?LZPLH^8d9mT$r\qc
%o=tLR*Xq_!G'6b"-`Wjo&0Up:h5%2ieCq8D`E\bZFMN9s^]Xf=b,coh^WjGrY9li((&Hcbs+bt>$)Bp_panTJSj7f_;B9bQ@<?`]
%XZa&sUbB>W=2Vhga4IVTS&^OP1Y%bIORaR0[DVGlF0jt?ZDM4S+?SOM-u$nObq4>N8\O.nm(ggtjh.K@R$fO:m=5td;J?T&b-IUe
%E6N+;(GFQpHb6)?0!+!&\)tu2^Xf0_&f73`>,bQA0.a66)L(.PLi3^c>b,)fNqn!+/)pe8:KsPnCX:Y%AgR?CH^gh1o7S1HCtg_;
%P%bhr>A_&*5SrKR[2(@ToF:mjeocbNrNoq<UW^bDXop`?O!Cc3(SKlm<,9I!^:L=GYm/ufUs%PJHL9KO@;YaDJF9TkdFs8%'%p%I
%e'%i^M_UJk=O5\%/UXDcD0Y0D47t)XJ6T'lo645C?8gOrIqL@^Cuq,#O@*t+oi1Mg]Q2,6rlu*ikM/g[RMfL30r4@(C)K*@79^t:
%?C\bFf=cI%Z]b:]]hQr)KR7WTAJ;JE;4hlP>67Sc<$hqY?#Z7=Df3:V>p`iC.-H$%J_<fT<EH1LUpg`pMIjI$/U\pKK%%kFV5mG&
%,PSW<S*(5'T4;67856);(Jd;<IB@U,&Io)?\AlWOKe]9pS+J(G[I)[H5Y`k=fe,N_?E)K_>T)i_>m20dDj<5(p<%AUW`]/2&Z@:Z
%S.L%?N,5h6#:_A3ZO3"5$:Ik3]SV'0;XHK"U[pe;%t26Bj$;'7MlEQnfN6)hdgGd_<]d+]CnZ'.OQcofn=`S)<+cj%%*l9)@i0EL
%Gr&.P&01;%2J:#!L$%I^`7\GY]k^@e0FEb+:n0n7k4,"WO@aDbK:ng'Qdr.XPX.H*PKPur7h3bT*0$)PWadsNrd2q1_nqpF0&0Ok
%QBVVl1%m]R)Q,aC'Of]%_gl=bJ/.INXF@J&9$VKA%4F-IBELH*lA^INGld?.lJS!r)EZR#8Ki;<U&D`*d;jPb.6Y(^>e5iMIUaG1
%2:"tY<\#(g#NjR)(4hRI?#t\&CLunK/CtP;^#!ub8Zm,PjE&Tl0@t^bXcZ*4_VL5GAHt/^YG+"d\.7YNC7g>!169BWWSc1Le+UkN
%q^<2KfU*&ROgkca;,dr"a:Xf*B_dVoEL.NH?$c4)GSN?7eauQM;3Lra](>^"?WJ0_EbjXg:.P++F;kd,KMuA+Q\I$KH1#Je#@@M%
%9,@tRB?iVI1%ER#n98ElZmk,0oB:a"j3T;AF%HkmD^Bd]<l4S9pmJ\?15sl+`hd\A'sIh;BVsY*dlq1`mJCrZ%pYPP5X>RbEG6D>
%"Uka7j4JT4O'"sMr`mYLQR;^bGV_'%a$PWSp'KJhnPm`]LeNqDp@uY(E@d&>*RNU/7&H#A9_nZmaL>[-`0M9J-$FlMTsHlK'=N,C
%;_\eVRPk>J.iisg$k'JAo/N30i>#"5_ID6nk@,L"1pMgq2%p54YV9[ToDuN4j&7*34IVRTh&%a7BH2@f%0&n8oh,+7XgIQC`B<X'
%ih)2d'6@@0.WM;5_R<W1(%]59M>NrcB&],e0]-#7dKaI?CnD&[@*pfE2QnhZNQ/5)^h,JbkD_:hLkW5)cc&"#Bc?&\fR>'/`kb^Z
%1CWGPl=R#fY`SYY\Y*l[UoC\]c8j`#Q)6n?k[UO=m%@6jl35^+hPi=H=)(hS?a69)MZa72W&4C<8u:53<%?.!\56m_m,">ccD?Bb
%Hm7%h\UTikm:;Xm@ntI0.$nP`PY+l$Kg[P\12/5H`Gm;?`_(g(kYPce0kp>7Pt;Xq1a5XFg3>FnG&PQ>VpWF@51+$nZmb1kBf,L!
%ZZb@cq^cG<4/b!)H:#*&:Ra5;dF9W?G;[FEEi+Y>>s"*ZqbVPp>E6^ufumD;bmrUbo@eIHZ(4YnP-#gb5dHY_"Hj3N!m+JY,ETk+
%X`?`m(kH5p;#)>_NliHsb?"V`%c5t3gA)unBKsjggTS:4BRoJ3O_+^/+8V@kfjcDX@(m\*:jG@:lp4^`Fi=!Mou*/oou'nBou%'k
%>BK=jd*cjRV"$5f12.Z.*[ru45Vd%3d$QXAcO(*Ba;L2=V/pN8C=N!0'%A[lK$'nB^JlQ)Su4>Xp<o3tZ\.uf]lk_sD!;%c-H^MW
%Uk)W+:K98B$^G>EKM)CbOp5#GYFh''%kpG0=k?MA*E.3pb`8i2Rf,V8dVLo^QY%mSa>>u%CWgL'dsN@R3n'm!+eXe,ZY:=7Ro^Ld
%m%i+sT^leH(f4jNUB*[j%^ihNmSoM[<`MA-6I#M+&o+j;ND[$KY*>@q]XR+4F)#/WT9pno]&?>GG*)<k9GqE)m%?+*E3Z)TSY.`0
%+Lp#Io&D4`W,mE3"dM`dJ#QtA/PdUTm%l5#A-_QTHL57+:G,]6mm4Tl4d"]9:lg(oM%-h`QuY#@c<F(0CsPSDnVU`/e9UCDZ$g=L
%&bGXdfLiWEfYDilmQL(ka?/3g:<e'495W_>ZnbRP2CckMfg4`M[$&4H;G_Wr/ROE6[0esl`-M,L7:+74V=A</4H3FKQ`dui*PAlF
%[1d=b9>:M6#&!]kAa.:;WAoIX\X56s<kk0V@b*e<T]SC6C[0]>/i'Jl!4)Z:a_[r@9!bgH^^Bg8>/S.XJ]Ko&puYVe"8@!+gm\&:
%q=g$s\#)&oP.n$T-tOHb.o@'SC#IRd3ABdBLDjW[E56-B0pPUM4R3/Afdi3905t\Ld2fHZXKi;F[qasSTI5e!1tosG6$N&XV;MO$
%dhHT:d``&)oC%67"6hQ'.1d<uAc^&;M5cG+@i;K->4P:]eI1.NN7sf:q9(8BJ6SLdEXd>*T!L;;CFW()0]3]HHQn\kSnbF?I-*u&
%_$H`MN<\FXPq',:&N\1Zf7$r?SjmK3kV`%/PqkA5Ac_WamIZiN5uA4O\?Ta_KudNE0+.d5V-RG/.aVVd4qQp8[2'?LN!6NfV93VR
%PY^=B00fnPWO.D2@)LML`Zj%pn=a.FKO@_efY<H+@"Xo7\\!>o5S[5^8l`fs)X%L8VRa/#U*hKWM$@06AL":X*RMZ).]m.;-_N!#
%A$3ZX\@66$.)b6d+2LTTJC\G2=qt,-J2bbu":cj3+JpkWJnM^rlY0#!C:uCRVKp;Wqqe3@?k\m<nS*Bi/O5Z`9!ste0jSU0.hfpO
%)HeC60h./c])XF.V-9qN1:EJ8"Zp[Adn[0))n=3sgI;u%qs6q^p0sX`[UK&$F22Bt9P%/REq\BooLcJKj-?rgfW/fjm]F&p@2+o'
%h52mMfl`la%a=<M^ddRf)JIDtjOdj2b*2qX'K3a=@n>W9ehVEaMRGoR]f:`9IKm8_/(oF0gN;K.7%qdA2(nY,6tN-TE(NmOF)a4`
%W%\TU^._44U`.R,!F#Ip[6uFhg>o>8qEjVPgK?FSiB!mVf2"YRM61l8*?*VMeuGu`r3nFn[PUUW=W';oAZo'K)1'T:<kW/Omd8_R
%2O2l";2uNrAfd-l9j^#P$??@Wq47r>4'Rb&)iP/3:Dt<e!D8f;M+F];D!e,9lNsY1JRqdMNb4NpZ>neiM\aJ_IJL@eKL##g)>SOc
%JM=.9Z`flCfA&M9<^e`o^-1u$$J_STOl^\9]ebAt+./fsL=2d)!F`[c_<*"sY%-<7dO95=o7#8:=Yj3c1bWVABXW$bOB""7k625T
%!)uj1'pZ&WjqA@d52f3Z2j&ej]o)>*qcJRSaq9jECc5BB1mQtii_.Q!?\;tlCn&5@PS5Xp=gU1oBPhi87mDZg2Fe055(k?X-@<pL
%=H<[#"ABQ!s30g)`O,663M[;.&>U#]hQre"ND"%QZ3hL0:UTKrX#1)CjgaI)$^d+if/0NiYQEP/C`'H<CQT4O?+>1O//TAICL1Lf
%,Ep_EY`ko/<1r*gM7Z**#,VaEf)n3RhO`lXlP&b.FH:p05=.@:hT6bY"tddF%ICTdUPJ"p`$7Mid.kK[2tn$^jO-d)fX$1)j-"h@
%]7l(MK`J[jaN893e#bK%fYrsZ5eH%YS2XROWI[eLKFH,-[&Xfg1+nnuKUEcK!;eB\H-2:h*50PR*))1+\'&a`>Vr.,ZTe)uBn<1A
%)=m5OgSq8c<?$+7M,;ZqNKQGAJu)#e`<%lIS6@'[Wd-t=(J!JDoZq-P'r0*F=G?PuhAT35m!3M)CkLnF#%)DH0AG^58U;KH\#27U
%q?22t%?=F.>fp0c2J[:33Jm:17i$7*aN0^h''TBlEQH5N-9OhLGY<`.!Y.8?kM0S`_<`4n'?m@bW>'/X\<D;toNT3&KaJfTCcEHZ
%%;fp6&gcR@EBDj=l%8%@(HLG..WPVIK]u7%iB;Y@onD/E$JQb;!Hmh_32R[2PHf/!Ai_#*S3GPmA=/C)b%)46!S_6"%10h\#>0'I
%p5'4'ZIp91(kL24H"18r]")1jp6D?I8I>,XNm-jNF%VrfVEe&rJqOd_4`:/`)Nt%"V0<!o+a)&odT)p4rk,Q1"55PnH1.(L,Zl%:
%OBTRpV(sTqJhSqDE_B!RM4FM\-8BQ$9`djM,ra+1,,]'3[io$LD+J6S)\i@"(9&4`+Gjd40:bT/eKGl`e1+`lcL[-9auD!+4G0Fh
%RTkW=\d+`Sh2mXQbRtO>\Bu\Op+A&XZqF(SGLD]<Ji"D+9(*o,\#*Zfll%5u8V+NUATO;AO[LIeWH25aP\1HQl(#Pd%%gtr<CqGb
%+e*p64EN?Njm2It5d1EX?rG"MlR>K_X2qt^G@3k]@liAo=?j]f`A&b8.9usL0mC$(N^oZM;CT[2,mhE>NZ"ftqVaJ[4J)%c+MDnC
%h2r5('TVC;ggO+hT3Y&_5ZWtLJ[CR4M!hg"2cm'`[ZP#$W:WG\4\qA",);PDF>5gY1='gM3':1f""fcDCdLDLG-qNtFocg9Ic`2Z
%%Sqd=&+Un@8.c^I2CT:[mQ:%+'+fM9RNbP%fVTi*[dd>9@0/imHH\jV1l(2Np&oBr\;8B-6[$kf/*fegaX!2V!%S$\'!3TQ<,d7%
%165_1M[Q%6isY#Q&8l=J&r;E1KF1Z93[IcZOW,6O8&OQ8MHpC#Lr(O^Vc<>b.%TPZ+*'26Yd@&h:%!8GO`5Q=^F<RNW(_G"F,@t\
%b]?l!:@[X8T>Ntr@Q9HC/T0P;LP57=C,`s;!No2aX\gcF=F-<E2?q`?!c>*`)SC+Vbl5,8Y0(i5X$t2mC\t1P58,V5,gBA*5_;*:
%5i!*@PtCD7Vc^fA4ioFoM=;il*=;=^:4Y%PA.]C^df]n*Rn2C-'Z*)YYh(8\Ha$r;+NL?['(2Gd.o>cKBc\gH!B&7*d&p^5Q>%>:
%>du9t-D=P09[$Q`F.HV.lk,@%fC=G-`;-j'H225&bm'8r*?\J:o;nD4Z`F.OpGC6gc'$=E23L9$ED!VO+%KgN9WUOsd_[r9(>)rU
%jD"^7hQu:2cBK0g7$>&^9RM,HkFr2&.p]_JAbEus>=,*tX)kuDHI5,?RN#hX*UL:@m,M&en0NM?nYENgrG[SbPtiMGi):U!F2'S5
%[&N>Sirb,JNLUddq(1"2#Ia;NBoNBT.\ZP;WhdS7nE,ZSQDu4Ccju@*E]4$gi+QNnGtt,]q4&F'Ua.t:.b:iMUpm8dp%ef=QZJ=V
%<j\,1\$'h4b_<^6=2_ngD3"9MADe.#MEUj87E3%)?(rV>FFoORg(_,OLBk')PH25Mel/T2c8i0_e2a6i:ep\@T4R[tL&@i28Ru-a
%[AMJU.=H*-^J<I:ADT2WIkG8L*(Ls69L0sQEU+Q[nA)G"$DVgFFNAp1Rj$[Ya>1G.TS#*=83O#p:5L$G$o--FP1BDfkGq:8dWigD
%o[P:bdWAWAc==Vq(0%2.<1ho"!33hZ!sN`R82<3CYmNcsL=GA''=Q/@#B8M1nOT#,KP@?;0\d$SVh0MbjnM"[pSO7PhRt8h>XgUp
%&@YY!>(X*aiJNgR?a=h!e,P/]P$K,,E)+S*Aam%tJh*=C<*eb8"KF)/[#F,\<;^cFKoUQGh*cRml>Lu[F2Vr5F;!W+@GEVS`5nn@
%9qfHR%?OgorkaW91=75#iciM3#^5_J88-l^Ro[uoC>st#'N[TtoXfe-C@6gXbBbTscT!iW+aeVTf@MCChkVF4oXH\U"N(TS]Z.o;
%bd/pQmD7I4lT9=rdPnC8fW"(S$hX^)%6!1'2`=@0Y"'2u9*'T"S*gRtm';$O3O6j<3K;H5Ui"D:hCW%!ge?j^Y>)_\K+%F870b)(
%D^)6clV>tR:rj\#kocIfG+)pE"IfViO>7%mlPZ+`&n(-H.%2%X_i&G^.?G60A7pjjIVL&tDOWhc73(Yb40Q%9Z'M_?k0Kq^5Yd-<
%W)l/^;3Y&Ea(]m+1-gQM[]gQKb#+1P_et#b':X@rcZLsQj-9E7P3#6u8IoT]O6K#,@CdRJji.$>V37.#*:T?*SamjLf]s2)87:5K
%I_"cYG;aksq1!nKB`7'gHj\VScKks6(2iIK^&f//\U!`Orq4a\o(jqZ*mOM5[fo^7A9"!]`?$!1Hj,W.r$l#:4o$<>PQ1PP=l9&Z
%?A@Kp!tRPg]:3l(rC9:P"CE+8\X&%sl6gBoIXf4Y:0GRG!h(VNe>O3N9lU-I8cW31"FW1d=5B/>&Ice=5:J,6"e,hsP0A&i*a*h9
%6/`Bjf*:7(PTEr+T<OUUrKEDQ?3(]M:HQ%SFL`L]20!T#\l(b$HVL)(H5n"6<oSN\%#';fpgBF,iYQ\_Ifr.0pJ8qhFd]^H''m#5
%.I\@Ap4``iotX2uK^HJD<75h^k/*V9jfKj:DDdhD6cM9!/+sP`ako<3/(UQVI:p*M:p&)6omMK5N.^*2+2Q\;4dG^+.JOdf[Do+O
%OQ6d0(qIIm!6Jm]^*8B.'<7L&9`><PjR8_*'t][UW^a_Q"Ub+,hs+ZY/Cp"LK"&<RQ*h'<&PD](:!X$flWW2Tkln4AH)5u,p20Z*
%UobujT'6?e>3'g3#/+nHJdZsC+=u5P#K)`iJh-Zo-Y7->K^/qj%I1MO*`[:!"[@UB#XTi&j<;H6rWn8>n"5j;.pqmZGd52nZGm86
%CC^ouaUOrc<<[LHF8SZ/#$+S]2JRd'ku#0`]]T9#5(a^Eg5:FdCjDX4o)m6FgqL]Y&fn^J$&_Lu\'jHt[W9:Zk%Me`Ch+MP3_9=^
%G$qBVWH>[pjZ!`4^6/88.$^K+Nu5#3cjmqE6.Ue`96R0]eB_p#9X%NSH7L0Fq\Jgnn\_5ITe4;/N^^CNS%.;0Y^9T]#G0Wdqr!&j
%&6Mm:['*1>pB@B!bSG0eW<^<uD_H2G)6kW$;b<!.#Pob\i-D"6(OWF?FHJnm$gRD",;ua%D>UIa_0X;N?:W"eX1U7"@=(X`%Qq*P
%p&Kn/aCFOeU!!%1^o6N31La=3gj/r<d/^IUk(RV7!:iP8H=._5TAP"R;S-$^(t\Fb?1&0L%X;aH;[5/E<3NG&GbRSf8F1jIZl[#H
%j&89?X<&5M#(G]SWun8tV=/i:I;-A+o<_iV9:'PKZ!2Qmh%6%N%>4quhoA)h5?#9'fW2a@CI?=[k`ZBMP]ng6XWu+OEiIU)l_nhH
%+&I<t[Xt.g0?JODF@boUQ\S\t[QH3V@GrVB/,^#OaU[03[/05Y97Q=PKI:B95].2c\%dC7];]V+lLQoO0<?/3':Ug,_:iZCJCd61
%%!]OagS5R,SF3le,>ph-g:s/A*)Ddm4>Udcj&S4B$U*=]H],!"*a6/B_bbiXGH%REH6A7j#)$Ep?mnNO;hc%B^r%W]PGg+",6l=-
%RaO&+asr3Zg2Yj/INnR=roGH'e1JuSm\e@8Q]@mKF8-7%>@dX$6VDq-6DS/u\])`)%6>W[_+d\P8"!>%p2f$)%.!l1&:$\#_2EJo
%;KQBE"S?_lci_qL6XJlm0*)RX6]QG(0F`;MM.M;nE889VH_gN[gDSiCptp]4^%ro$0>O\32Gj8O2U<SmcW<@#K$a5V5m]9k>;rVo
%="f4H]be,?XVWnbhO8dEHu`.NLbZX&JX'ImUS.OVHoDM(Ru32HZfmtK+sX$[N^aMFYA;i2;;d\ZrBQTF^`uSIA[Y?i?Y6eR^\03e
%'$B682KZTV'"!4:CMZZ>d)KG_305Vq:,/gE;d=hhHq!(doEbRl5S@>E?XH,dLa$;kc>s'VD*]J3\:)J5f\pbaAZq=c18t+b2tu)D
%@Pq6o[A$@YfaC_1<5=$2qh3CfabkZqI[rg=r$n@!M8"WR'`_(U9)]IO("fC@1j^8MS`1S^OE6VT[fOi"7RZBR,.22Z3/;J"07i<T
%LfM:?BgnH8Z_+-:XK8*&NndiP/K\G06eCn*2Ut<Q50K_!'F`JX&6WDtc<!?&:PTKd!G69g!N&^K0eRH$+-8Zt`O">4SmqI$q)`&.
%n:XhB-FE[UG2g&o<ZNBi[o(mTlBAfH.A0A56F"lL31T-UN#0jNBL=7\RCl+P%C/;QD"BNjd&Vdk&s7I3.XOL&G=u8q0>K'AdV1SH
%V`"?E]P*!K3-&r0[2WAB.ap,CWlkE'VfQl/1GL!W#as_r9%\oDS79s*=KCD>j2,jVoGHC8#:*a7?ak\B?%Z@knor%<?jWs8D_a_D
%5F,6oF'3`.(34?RgTPm/3+XsDgr1!<Xbj&h'jhPd!:K"Xl!RG&[+l;RJPf3(>G`AJs.cuG*(OZi4K-\.:I#buBM[:!NGQ\nOAuNY
%BN8V1bQ!/*E+*ch*>W[6UJ;VHV%fCos2j2@H*NBSeLY!B^r5Bs1UaX,R`E_oiN)`XQdn+50O9G"%9Z]8KX'X1^UM\X&<X)K2HTm:
%'=?1V=ki\8$-jMo=ORZ*A\ZZIc(Q2Q-Wk`:S6uf]aadXe0O`k!^o3n9`AT:QHs?2a@96UbgE*Z#i5iTc[]A'QfhN/a&F1SZbJB)&
%oP<<;"(=o"4#b_)%Z&F&R*ZVeb23f7K-cI(M<F?jL=]iWpGUlpaS8'6Knfge7.(RVT6JaeqF];9<)TlIJ]r\F:kaQ/m"j!ZR*_1P
%BCCXX_%X,Gg[Z1<IFk\c+qe)RlS_YREi2Q]+CMWV*.fa3DBU>.HFb4I2KJq.iZqk1obMum\1>6aV0Fb?:aktK*V&\`@1Y(TG82H+
%nHRe&VN[e2G(TuL=ujK(>_k#aG2!:!2!ViA4hM^U)j$>c]VP_:&hItIfE!Y[dtN4cF14TQ.cACg*<;,pC)/ZJI5n7oN._uq[-<So
%+B>!eKS8:K?+P"d+Zj15B'3RY?[+sS!E[%VFAVqc.qHC+X27K-2.]+tT$n_OhJ6N?LDIVkNlV0I*m%l'1c"@m7dP*`'gP1"We]=$
%/GUM-PQ1Q6InsMY*r,K,at2Rl3;D2m]T`u*KH^.9\<=TkiL`pOO;YGCOZMFYCBO+l;W;ADjH&4krr,Jl:XkD.8Qr89[DTg^"R/9W
%)'tmP&Ice=5:PnC\Kfqq!ZhT<`,0WO0G`ur+2M/eT#u@!UB7dSD28n\7L6I,3)&!0iu.L=n';/c+B4S0T,;c]lOsM5o0)moGjCQk
%ZG(lQ@b%.XDfKQEJQie,7kQC\[=&0Fo(Pr&qS3ERA*5PI`r:e3]!*l?/+Fjo%I6AI^Xb/K":_GZhQ8"?`5,LX+l66WU3Q6!0I2/J
%Uo\Jg'o^bL2rTuK++"Y0N4&?>O5R,H:M'Li+]()<G)DAj'#E0(L'(p3Ig#LEjJf5!5q,\E#onRP$D.u4H2q:aKPMkFiEn>8,8cTY
%Io=i2@0MZIVBBkrKG=`!&VQ4J;e\^eq?[Odh`iRS>L?I3Fe&0$&Q\\ZH>*<q@:]\/YekU1`GA[L=M[)'Oh2O-XWXS2YG$,?-*6H?
%P-C*fH'5C0Dl!hMA]O3JHL6r^f[*.:$5CEN4!J;@Q\[Kf?:AIjP?'TgUu-8#gR=e?<q%NBMhh10%dZm.==-LAftN-;*]tJ!nhf4G
%<k8lE2Xo:jf8[;GgA/fo8WAjZ2qeT[l"E'6`EV"\,HcP_W$17=E<Z&2X[spRShWu/0^?gS--7\!QD]jH[aL/KEW`cT]l*2%e]p\U
%9'?KBY/K[t]X!+.h2#'SmRD$J.OTClEAt<ZNOuH<K/$K:dZq\T@CPsCDA8CdU_iNJ*BmuADTFr0qVDZ#B\`[K<`7)SG=*8i:cT53
%L_=XlL@%Y"L7"l__cF?l_hQtdFRP"3cs'#%UYuGIA><*.\oTYPaXA+*>SQsVUOPT6a[O%^:)j4K/#LV"GrhFO>a51[je?R:)Acs8
%>cB+jG&PW@B;3=FDS;]JMbOC6<XE,2lc9sCAAaX1_M?gK4=WlsM>2ZobtPuP%,HJFn(?@D[F"a_S<A9Unl/B+<k)%"2XK:hf?Pf?
%9_pZ="`>Q!I]tP!OD$Hi,\<5,i*k0Z5I=9(2i)COn^r?P77*/h&tHuOgNHB(`S%t)7`gso0hSn&ND[!6pD1Gc7S.F\'."i/[@@k\
%E)]=@8%q`TfKl3!n5_Jg22i?!gc-^Z]OEl0e"E4Ej$^g=SJ2\-1fD7u[ZVhXnD9bg:5\hT=3?WlP)WQ;<HtUe\*i!9m66?biu!.;
%n[]jHZU-YX!2Rgan%S;QlFr@XGMcH0Fl*D[g[h-9Si'*Z[t(Be.8,td<<B/3p?^N;=X?.Cr^#8Ncl*);BI,'J*;W!2'm.guMltHD
%4u:fG=o2XN;J@G(iCYWR_0^f@40^%hoUAZMkW_EY-nZ]8'&QOeW1oXbl/nks`OjMAG"h_+2c<&&qlp^-Lr=t`,WS6k$dgH*FB[(O
%>(Th6n2(]Vi5iTcGB+!<K'LO,ECi\na(r\KSFT!%,Wm@U`+#(WEq'JTmWTKG@j/i)fb,3iAEE99f>/,8<B#41gb@^cH`2QApGUmm
%-#btE,QuL=P9dY<.9E1/^fQ>R4Zq[c-/(<\^#YmfaoE-6rim#EM/3KX9X=55`9OQ>C/m3=$/X%g<D08X5k[+mkp;FMiBJpB9CV9e
%*h*sbam'>WT][-kP)J)rs'/WDJR9$%iJGL+:+,T0(LgBH$+6KH_$"YLTL3%.=NJ10GCg,&.3qic)P,r>\I:!*+W4]?EaWb2>K/(B
%@"R[k?rmEGA0Jr+fb,3oAEE99f>/,8<B#L9?fAlkZg-Ji]o@4l38V4dL[/9ckRE:aG^pBf,jqj'_M!8Mh9Flu+hks^R5uO$c/')%
%d<k!DLtBHVC/m2Kpn8MR:^9MYD7l:QA(09#mDU]rWoiP4"5F=Pm1`LlLks`j[tI3+(9[!EnLAe#d.3I:[<'kA+Bo5UiPp_19AMTL
%^<dX)MfC$OCXtK^^9jGtYn3[KCqGA*4P"-(M!m9o0J%Cnhj:e'@3PA'INq>4Fu%^M==8_G[WAX*@>";7lK<]Dj+tcuh\+YC=SY&<
%Fmt(CA6AZ^3O%f,aM!SBFTPoJ8%C@S;NfY#!J-<+Oi$H(mR/qVdCG0&nIXif,<jpn6<b0THUk^UQI'BXXV6fR;_;FK6tC),0a*^a
%&S45jHC+]@!0bem=ch^7IGk7"nM:qg/<2<QOZcb5N`ZHI?'#%LG8'^O"WY(\cM8RIB/=E8:AOC5\I_uX.q)Q?cG]4S5faiq,0&m"
%&fUFQjmS#W_%VRJ_=RE'_!A4dHQ2F<O9Aod=4o#GOM0T`1*G`j,L%5R,XaUqA`,Nk@u_7Gkec"D/L%@QNX:[GiqY7Gl;3+6S5j],
%8.r<O`ViU<6U%mIgQOr@$p4oqDXfq"HpnU<lVr#hWLpDVpua%&HW!1&=7Ie=66(Ai+?OFam-tClP.s6?T?n$>LX55!Hi%dO'u@57
%fC)d7rWn8>n"5j;6jY;TPC$-%KK/b\^a'su?X*(kE$^#6UoYq9aBfZoJ*_;t0GM-^5D"5fT#u@!U[o%hmFrHq\;_*ul&=A14CKE'
%q^3[QO[?K_1%N96.glb+Y`_5&H`oPsoiRQ(_%HD/n\`2F/e(R1<Rn[D5CtE]q^5r<YrfB+1+L=&64SatnC17dD1nKQg1mA[M1W6r
%`FK@QAN9J=5krDM]8qtJ^m4irPHpc"GO0HLI`5V0#=GaHq'3E$jf,>"6!@);`3rYb`F@T%(Dq>WQ2D6L\*BlsSihJGS%H1:NW][o
%?Q3)YZ:8Jk-[u8#o(Pr&H6Q0"#rTGDr,D/5JQ"I)?aq9T,IioOIo=k,U/57>)0<S1'W#4\%_%I^6*Z'bTIA;4X-MQZ'EsrjDMCD0
%-V:NWK$'b=^JkEVSu4=lp<nX\Z"(9:]QO?FB]]tXU1!PP,<5XPDc7Je/u(*KJRSja<%OEI=m7)!TI?'k0*LleaG<`oK^pM!&!]>`
%kG\$0]kjN@m,5Q?YFRlig\F715ZR%<4u+Mn<<^Nf1^:o/.YFJ>X)DitGPs6T,P%g@Z(+@B1]kYiU%0T)*0ianQ`Va*41Mc_[1art
%4.j"b><`sK?n9('"$<I:JZ[MC*Jhu3EjgEnlG3+e1'dN%;!,Q"[P.r0m,"8ac5cUL])hZ2+u+pU2pAm1bLc.dAI#=VC8Z.+XVWIA
%TO,,(SJ&)>l\=e"l\CRuGJdIiG/K'jRre%Qd**j=Kc_.o5QMao+VD)(A5MWc;CHMXdEfRZUep!:k(AXp/Eg'2Ze>qc;!_O=Kjr6S
%-kq$mb+[J(H])2lM'BD#M+"V*RRX$ehV)URU]b7+m%DcT+DR2u(B[7(^c"sNc*+7B.Lo7^G=eR^^Jl,jSu:!bp<o3rZ%Mcd]lkU=
%B7d;6$R!9p6Ua$\;G=>g6MK.%K1N8"LK1QOe2/*Z&1Ptj?B<oP#/9.%<d.m`.J>E[8?q8j7#J*g,?!md]g],q8.f)&7&5Xj'5%@\
%`"P7D<1F9!K>IbY6T5P<h6dBc`uq@bXVa$n?'GX6^uLbV":/-K%q%%nGlTpNDp<(\!ISno>CR/=lfs27p4bcJ=hV%jg'_2/Y?Nq^
%P4/-_)",apF[PqEF[O7!qdD#0qI'KpmCDu/ZY]VRHV@=\6+IR&,.EP$!SNr[&p1`.NFE-X7Ss`QgH7YKMZPc,pF9f<8i[nYc!j@;
%pMF8Llb8IWZ7,FPPsqs1p\)7C(.E'&[pW(k">=8!MFa0a0\Tdn>Vq<>_bPrLdM#MR\EZPY!(a"!c>s8IdNQ&P7[dHT45tDPKN?XE
%UOYU'@d'i06LJ^'nL.#G<#iN6N`(bQV?k6_Ajij4$'U/@E"55a)P+ck%KTEf`1Be.'-Viq]FLN0Wu?6t!7_I5f>3Sr)fIhGFDlk+
%s2^tN..j*`RgokXPi:(8-U<b=ALR*t!&?["o,Ih+FGN)RZ6hp;N`[;aTiEu@-nqM)0e?BH,-n]J`hS'3bhtg=7tH+MiTbjmo]Pln
%UmbdjYDktJ(cLPNMaalo,X]Ll7[`bi(LY4cA6R*rTn'YVYP#R5Nndi_j%s,A1)>)p:_`[L"mIle(SV:CMjR<Ph%(+r,)9W"gHUMm
%==F^f:a3iL9_f;EG=T:MQI%*")&-=Kbhai-^qG.TrWJ+KJ'XTiR.VjQHoM0Lot`2<#*lp/-ON0t+a0njD)[-fh(>1dJ61kCGkmq)
%Wu5ckkT'9TiAGT8hS.em]J\Fp^oQ+AB[&ZmWkDPF<u]Cn)\=mnDX#[K]CL-\Mt^bUeLPiZj/PC1[as8Z'ALqnQGcs3$dnXVd]GrQ
%N.n[(NR\RO,sQ48Jl3lFcJa<B/Y4LEmZkC9j])CQmd7V^nngIt.D<027r5g1KQ1)e8`lMO:W/(1I,,FhZsNPiicVJYEBEpmIIm.n
%/EG[-gI.Y_&=[*tk7]oYo)[Zj+WT?2KPOcG?"IE6(a`n?`.cish%JGS?J.E7(%>a3a_dKmL8c7)Y<Y?^gV/NFN(qeXDT!0o*-"j"
%dRA`3a9kSC;a*PKPkD8Y;f5"Eh2kV=9,IgqbMK'VYJEPCmCUal[QVIJ&Sk)n7$m:5\(7u"("Nk&A;5U_k@%#]b_VOp"(&\h$[]b5
%h0+<K"%VeH]29lIs+6GlaHV3Y\:T4=J1U4A6aA/9[WH@S#n.I8a\H@PLb#`?6D[,Pr"l)-=QuWQOX:*&?#t6"%(WicYp=dD1iZ\e
%i-thPD(KiO/n??b5Vf>KiX+Qr2]2@I+^TH%K\quWJ;)8NG/3W",Q>KN$#YYB#E5AJ!n'2Qh?G`W*g)K\_$]R4OAQJoAS&^L=CTa8
%<t(Z*,bGoU`]7KK:@[:u/%>c/"5"2)(EgU1U![mH7sl9ZcNB?gN0>'+%A!g/>aL,dA+2Te?SBW6BG2<7LmLNKb)CUqBo,3O9KW$4
%mUn><QJqFcbZg6`l!a?L+:"VXUT,(nO$a$lR>_Q0n9M+f-k_r*"MB7AO!k^X0&cDP9KBN'W$-O0O9)!D**eJqLMBNA;o1:EINFS7
%:_9K1j,Tgm/WDWWhO^UslOshE&ie_+!gohR^5i!p,8?kJ3`rPDfS:)gm5Rsu.q*]<M$%olHolkX<!`\.n3e&WK74js+VPpV#,Fi[
%/1,I8j*!2Y6RH!NPi'rne"Z\19N0HAp*=Xe:'=H^h$^WtM!@OF#],"P4;Ykf#Wm@.pt>I14W'#/M</3tG"mWE,^;>bSuP2.imiA#
%:;elQ."[D/>H$I"ZC#H`6N6JHn(::;Sk]_;#J)'oEAI)qOiZd@IP2Si$P(Oee#G(=`it,t5!gh[=blL6KP&E_:uG%Pp7_o85=11T
%/c^)#oI,J9j[53X?>`p26kTcU;GLq"LDUR6#!BA*MMYr&UNN.h)0k^IUs&4U?-2B!8s;7<mNX5VZ44]j9?X^4_dWY@q35msRg-(B
%&e'b.@aU6q]IH54,a)E+f"&n8$uF65OacZ.Vu"4%q2$uR7p*ToJ7=O.(`;5-F^;7S,R@?S7&+lKDK%hR(:D>3_t-_80B2;P"aFCP
%Dbl;coa-G>52`M_[bpgHXE7R/;NgF/#L<MWV&epFn82<9U,\So0b%Xun3Z=pDMJL.=(!]IN6,-IOBk,?HRB6[.=piAAEe"m(nf5<
%E)Xd_8/s^!H@/s1`t$19>Vb<UY<bT-A77[cQ8j$f;]0V;9"Lhl*hKHp_dFVI)IN\.=fcSI-9GTJZOW(lK/A=UKns6Z%],FPDSF_a
%aN3,u$R6K0)C$iofE#^<=Z'Y<^5&VqG0+oGEU5YI8'qF1ljil@CD$o7EU3`>:7VPhM.=T-8sUKMYGb:WBSXO+[5`=020.b$EU830
%9G-Cmj4LVrkcjHar@kokT7HC)7K1J[rDtHHa.N@oT>(4rO=gM'huE5ETDn!IJ,>!Ss,[0Wh:J:ulM#f*e,KQt^\m2#s61&Dr*Ks3
%X5Em\T1u$EDh%YRo?0Aqk?n5;s8NJuXPY2Ip.rm'6O^_,iOob!+Qgo^GH!X"^B9Ad.:]cr>RlK;k;W/87.P3oo(PJdAVf/s\(CsQ
%1$#(s+FW6n0e@odHPK#fGlg8`5K1Bm>Tlk!ERViTJ:@i#G*cCr!iUgf6K&OSq$CC2hI"e,q3/N/)K2'-""NcC)rL9.k03?gk0/%=
%/lR'e=RDb)#jl;60YV.I]aZ4*W95Pd3R=;-h9'PbrJR2F+q\1k0B]/_2;sZ#n?SFp+"Cfbj^UIRS@N\=+.+S=43Wu]s,+?r$Pld9
%.]1#c;E5k>CXt]=#gNhV']&)`[>=!(EO`6e9I!4H"0M34D[G@J:\^PB?co!"?bYtgJD\<.)mmqjB*/BIVPrM>L<g+hcK,q6QcL@D
%$kJ@8Q35F(aO]+[KWVThZ"JVgqC@jQ^n77g2%IAtLVfYXHUb3h5dcqKYBB=MPP2c_?T<0-__9Nn`4$lYb<?(lq#*B%k0klL+9JSG
%jS]qc&JDe=JH'Se5CIg-D9*Y/#*>YS+")l&Ib1rf+HmIlW!g(KX-D9mKZOQY_<f)*332P<j@0<:K5b>W7Y0H?G]/0%'I[u+h@B92
%U,`lFOc62':P('H.G4a#E:VC$dNffcVGe$\N8V/F3D$nF<4!JAF<]9kC6pTalI*@l_.,,X:rb/EFVd:.K/.jg+dBZ/HPUBk*51s7
%$i>eb?O-$7X%*nLMnOKaH%kp$*2I4D;A6B&[j$3+GV.M=M05A7jX*1Tq;;d4Nu?E(X_-bSOpJ8;m$pEa"i?CAQ*0?1EZW<CFO>U;
%0^k,e,%3GHBVU<`1-8><(9.Y.,%:7dc_bnKT-\I;4?,M_P<Q(0[hV_f)_250aIYq]m>SZ'OqIEG"9+pf_1tn&kd+H*7]eRki?oWF
%8VLNrc71D9UkrGE9rMHcq!m]L>h%0&G)d3u<-!-1^%+Cn?/(HUP89snF`utV:%7E\:h*h4ABf71\U`%J.B6E\pKOQA8mMS'0dNV$
%,D9O1pb"6CE3<2'Tn6QuK0VLp[&[.*Ej,A0hp;;a6*C!*].!X8e(%QUfBY%Nk7Bcujro@Qs!Utj]m^$SQS91u&/q>q^@FpKH\8Y_
%_ZM*-"O.0ig+gAIT'Dp:"J3T3qYVM/nVj95FTdg3P%M1-_LA0<!9.QHOF[\<6k5&31iL^'dkPrO=eIf1q,'1`hX&^(TI*`:SCLdd
%?uU/bZ5sq9;*;k']&N1M%ct))\I8csORj/8fPmfBh"4Q7oZ\u'Ec`b66@D<K?]ohUAOJok`"E^L:j$k?\g#5mJ`I?6b1LO'@q@MY
%IqN!CJ?"4m![4sa49H]`-#ouX1-?EH,.^3;Geg@@-X*tH3`B<_&'3;@=NHtR1R5T,BB""9q;\"u&A"cKXnq,cpSn,O5A_SBdP\s>
%OmK8MbrK-Li0<b,l#]H!L"OonBP:"118^so=pIB*,`lFJ*76l%R94Pq!13586M(SPn.:7JYomKq<R]2UW\[Pu>gR=Y+P;j&RR:T9
%CIA`=;&gGV&5MXh#p@Cp!"4pB$,ooM8mEETKN_7<8?jTcFMTk>4I;GR7j6JsFUX67R7H-=<pZC2>8j+`WEU[I,H;%]-eHX+N,"JR
%g>5K/%h5=CNYPJ1-6;Z(*qXJHV.OcfHK-V5cZ'C'Ok\g7Xs;@I@lQH"[l'm$%q(tL?6u\VN#7S?_Q%h9bOC>T&BuK9'1O2Y'bC-,
%.YfS5d?:ku"+-1I:p#:Irf@F@G]o`%kR\;0/A5u+kB6AYeDL@Hh@_Hd/hIVI(lkd5(A'>qI%8LJ!5\eOYSPe56$>)p2r\,kXC0\A
%2f,Xjb<Y?]*JEG;@VuJ'H3qs[gcpKi_$O#UG7\R_SG\7',RUL&kr,?.WHgN,.gU^MSnAA2UnDr7iQVM3I3]-f`/8U$L(uUD(YA.W
%1_CnS%S3Hu2CoNOY0r!O*nZ_R.BPea9rED1E;"h)73!BL1gmPjG@3&a,5DJ*%m#Qo1G0-J?'%&aWchhEKLaUBmY-3bYBo=j'OFL&
%hR:"NTcMMTf2&Y/gga?$%#4>eUj+(ckmVaXEtHk,9o,Xkfj;%sXVXPW53+&R&AJ\aU0V[*IQTLKN<a:a18GgE2nHE77[R+0O;;0*
%aHT*s/#W&*>]#<rg?<kD*(&>'P;Z\qadO4U0:jFU$j"_l!E?Y_[:P>.&[VokC0R?Wp_77ZRmPn?%-7324Xq$0mMoZR;ZY>:,Z9C\
%[4DVuMr8u6_N+#:o@nuk6f*[P6o0qNKU@6]E^?6p43&56*W*8sr$`Q9U,-3b`ANY0&Blp8U$A$hGbRH&bWNi=[iq_DR%t1eftGck
%WjhD9'T!@X=BkF;2,6eh>&TL[!9?1:]rm!IKDf2L$"G'k#d0:^l?DqXE"-0+DH$ikF.:,f0H7*G$R&qIaLIGMc#U.^/SGqoLHoC"
%`k9RMdZi($)heV,T:Al.g[sOWD\*AhNWR^"\ta3^^a+<leg^^+ESJ^CTCha'!YQKP8hrR^#'*VC?TUk>/(T`$4$\8Mc^0m74Qs)d
%f,I8[!>Qt>B8G'QM]!'qHKA][Hmlu;/mU:B3M3kuX86JsGTW7t:p+^(fBfUl!IdVD5V7$i.<]$SKic&aRh8p>33Vfg5PLX_:9B>&
%VCXXO!%J!Sq-Uf&?sZn@'Wfmka>C2l-!9oJgnj-BC9WE`PjUZ;O$4gWZ?2'tRW#IGlk'1o^lcp>B0D8=HEY1'E.[b%8.adU%D@H)
%&Z+0;Vb!;te`EiWoE[2_?`?3W(0m!t*8]"EDq>We4/pYpGEK^<aGprhibCd`eTVD-.WX$^k[+AOZ6'tjMp+_gV"8P-MZf$8jHm&>
%j=FTd$hI\E=o0$_)=o!n8Z'aP2:6'-Vg!M#h3'EH(nQeaWelb\,@Q$:#s3Dt&GnGZDt4T%l`H(9P`*%/!dNs)HWI\2[Y!I23eo++
%J7U.';T:E7_S@mj<F;<*"Rmm0HS]0$/QLWW6NtBf2'SlSSo4]]8CPY;Fs56IZ4<6/8PW\TqU,uo6r/OF1C\Id<9Zar2%Wb3:9c>$
%@L;3`XUC)6A%[GfEIm::]"!85_[R0K]ao$+K4e-'<elnf0ao1"J\\l@p+0VSq`1I395&mVK6<j-<bu8gGZC`rjrK%Da[E_1Qo^Ds
%#MEc)d9]OP_X"Ng\LE1V.m3P01=$GEj64?3!SI9'5nA_qhYN`h+bGQ[+W3<A9rMG5aug8<IlM2@jOEi]0;=n/Fa0"q]6kp6;nR:S
%?$^c'4`Z$_QrPKOqmT5$R2%8)+FYIX7g-0/<P>ZC0lK,?l,!"flRsN:<oT?BS/"C2lbP#*&^FZ-`8cBCNs0"/i.1kcC9pd:2)t^o
%ApipR0<7M0quDW>HWCjqC`q4m:nrR4/Q[)ZKaZlOB6XDhC"g$1eM:/7]+&B&;aQY*:)gMXe70it^796]XD&fRWut3_0b@?r.`-iW
%WA],.Eo><j:'d[62h"n372SB(3ic@9<qk8-<3Y(RcS0T/7-=aZ'^ZUqU66#oV*&9N!B(g<ZIB-s;Xr<Da@M*QC3+;C2OpKXZ!+f3
%2TkKbd(tWnUg!L90bG?%.9oS)CM2*:\`osn`=-9s,#.ObkEIk_?j\)56R#&&WoR+^.CbYJ5hPA$-bO7_DDG\N*MPdg`^8b//o!?g
%=&i6JT0@#$54gYGS/$,(I08Z[dT1Al`L.r:bU./h<AgLu'I)_U+l?fLIiKT2&Z+Y(fg)jA/GU7h8C#XWP,C->.9^"[H.X:J1DkM'
%HW*qX#ff<%Gug>*'WH56]#_%2l?*1$P!]lq%t9H-&-;V!OpCJUSUW,EoP9d6%D8e3EunWCe#7$+7SkbHEu3&u,a,B65d'6Z,=,q7
%4fUpUPqjl_8O]qbV5/h?A4UG79]GI?JQ"!?4KsW,mAetmcBfo'p.NmIj]'dAc2-&09))^C/qZGS`4A2[pK%B,.N/S'T$S\;Ur!"?
%k*E>eI]6'(mXY@V\kb[T"s?k7b!QN"+<pF*f.<JEOK2R`,!"mQUf2"N+uBN'C:\=*Wgq4Njd!SOc#lgW+X/a>&PA*ODH#jWpjjDg
%TOa>-%jGP;o$X`rf2f"ql/M<'0-iA.K$k/[/+"f>0D+G-Q$)u(Go2uu"TMo:e_bn9Z_l!>4`cpo$muZ/%r\?F%)I]KA?u?t#X>OA
%h,\@5B)8.XJ^pu-q*+tLHo(`);U"dJC1?m/X70`t2fP2ao;R<1h"74=%C;K%iBXZ6B_rUW8,s2OVTMR<T\8J_oT.&=77C"7IgReq
%C/o9&J$AutDYc#FOW3\pfZ/'tS*chpe1&OcZ2J`FZn%OI92T6+ro;DT+U?F6Ve8hiDruO&`@$Gm`95KJ?aKd-=Zlr[5He#L+?0=q
%K9!<Cs5?BZlDeFHa)gDodK/?X3,$4l[XTB%2u^i(i5U8=-Z8kV\b'<i4<"5[TL[\[s1$K2p75Fd+X#/(ioY_]qhNtaQMmG^kgJ2t
%%JuN,72<am5ft%k)c-rEpEo5.1&klbLTZnpH_76W5$%\Y!/Sm'*MGK0'EH/9UT2B`!;R=$pn@a211)VIVZ>e\3Z5Eok=]`FN^.iC
%;p^L*:bWWf[O;-g6'?q@YPr`W!=ZS;,@hY(I")n&3)r9N3-O9j(cr,.3QU(S"MBIk>%od*\7s`#:)a'A*D#Ol8M&/>;GG.Wic5r&
%*UnH99*^Gq;jckh5;==+b_Ag],rl>u^olW`#$g.&M4>lY+X\I-`(j`ka3eG8UcJPL3b:'Qo&,:8n"ZE];$4/[Gl4n)<+s1:'hKr1
%6;u=YQX<e@?[V.ZV0u6i"S5o^b-uO"U02VY;5sp_D&q-_0=?O2@R+J%6H.jq%Fl#Vg0)*JC&OsFI;p9b'6]c(.C[*d#/"37i=\B!
%&FHa53Gb<Ri')fE8pu*K,EF&GR;+O/[8T.<T4E[YN#;Ek`S?7T=/.*A&4Ro.*V%X4#;)P3.)SE5r6l]0!R!6NU$Wn):C]+rDDmnf
%LE*<*>Kf]#f4r1ML?j'CArQK[g_"M929NbWNlgk+gaF^/'FH<3VW0P2K;]Sd)?:,g+/gS4/-/Vs-!NcA/O2e')lBaVmCm<pqf?Gf
%?Hi=aqL#4FG]_=T&N6SHi$G`H(O7k&/,npM)u/i[M((=Qakt\hR,P5)1+"DY6ZR=h"GHG8%HO7Ib4#Ztb"e@4=5b->aoo(&[,`'8
%!i"AqnkPU'>,#Fh3>Va4Np;CR>bX.5-kgZsVn$2T-K*AVHb*-&E:N@OEsI@R5ogsU18de[3Ze\5H!\nB5T2nVkr-OL0kH;"-E'ZF
%HjST#]@&^107h%'lIktGODAMrF1qd!cqT@WcBfr7RPLB=ObZfK*8q8i-X%o(L*Z2WCUi<aYE$DbJ/=tj[%/j9q-&Up_O#d>XlW!<
%a@3P)N@oc^dRt$k$)kZ/RVU:skjBpuSLuW_/^NVnN7UXBgjLf)7[JWj#j^-_QS<A'9OP`5,OL-j"._,si/$P%HjP&t\TYPPi=k"^
%N@9+aDFce:[Bh/O&k^ke9,.'T[b)2rD[#cfk\LPbNCp#BQpGR5Hk*gA&m-;l(,N6aL?6+0SLgJl7BQc*>,.)*=:hEF]#p%tIOlGH
%JTH2(JLj[JV<&moYlD!V4L4[#56G%t%>._\Oc:osNN4cYT#!D=@o[Ehnh&37J0_E`N%TYcoR-%J#r]N)5aR"f.-_S</eS!<fFk]:
%*+luE[KQ<>SEeCc^j:Ytc.N^@hS>=\C^DN8X*(5D-*UjXiD?f_IO?&pN#,o<H6Z(9/,/$lHj2A%7[>`IOX5Nc?XI=M3_hK"Oc^s6
%+L"rZB]e!sNf:j]#nCDjS7`s;+L5m?M8^itp$5)5J<3t#cB[#d^pk#9e-d:u)tU&8:KKsBaih2:!PF:f.YK='2@0Q0\.\"abO"l@
%Q(Zg*SUi<-dE?1\9#T,8i#4#=7=5<Bd5.p.^iJMOPsG!PXodWU@%ag-G2l2*h%CN*!jae#98+n$%>&RGZ9B)^\.UJ]c%CB+8mjjd
%8U@WfYf/j/>&4MHd.=8!>650mErm7a@VmQC<5^BMIXZZ6QS:_`lOBZ2YgFcTL8gIQkRp^P^_Oh_90dJ:c1nYT6@7Tg%<Mn[:TqR"
%J1I.#1^ded@,'PK&Tm.=K?6G4\aaQRM0t0sQGo0*bc\>V\jWF;]Bjp%S0U_ai_/?"r9(2r0fa=89@t]-nKfs(C"C(dR/,'&WX$7+
%<^K1794SJTYkShB;\0s`nKkCh22p,G9B7EPAekt&P7H@lEli.Tp_&uqd]rQ[Zg/Q8m201SSf5n@J?fCQmDYEBjHj<<E4uJ!h5R6A
%0*1sqO]p[9^eiLnj,6$=o7c=S$.pja_M^&JOVO&3`sM\^?\2UNY&iVr5\X'@CZe>u(-r44I#5DeFqF!V?NLI?El5W<-.&(UMW>%(
%@4WuQW(jt\bjHT"j$f<=T[erQ!P)kh-SGa2Jtn$Vk&^n8<*9m7iY?@#Pih"J$+_!SHb@]OGj_>^SM#IFX/;F>!M(KRP)BMFJa.&c
%7sNs.C^KNHisKT/DJ\DCC^FofFa-W7/V-dX@H))0)oop`0P"ZdXNuhWJZOgT+D_A6Te@p_YU(^^O`=heLa(/@2LsYj2mNQI\rIQI
%&k0bPB1lX*%i[oH942ZWr<d@tXO#rC>65_)Aed23"B6F!hDe^`T0a<#Cl,7+RuK"No<*/g(g@'[KS,"3@nYaBDDsqLYpBh6fFgm+
%cCGHLI;*MS4%O,f]g-%B2mrjlam^dhfFk\8Na?q<"?MmTR^4<_+Wa)g>CnJ'Q.4f0$-ZiUB<`a^e%Wm9$>`rRs2_,O!)?E)PSZXc
%Uc5FZ:AHC%T%,hZ2)hZ@k1%Lb)cpK,Rjs65Q,rgG13+])"W+Ufk=XZ1N18;U8n=+bcCHIo[<OiOP2DBPOjYCSABHH1F[f"e_rW4s
%;`IdXF-YdBp[rN`nQX5r\Ve(N78t"C0,:AlLb<F2KDhA'CXLM^3O02mCq:p6X9omH/$-q$jh2"Wl?Z6BeYa]-V$s^r\MU,p*4fn6
%&6ld!Wspdf4&u1DZYJ(lgbEC7.c;$1SB@bu?@!8F?-t938gTL(]<WQ6BTe)3K=qUUCH/`u[J2)H=p_/^-cLV0l(N?eK5(&6WHp0@
%g2+5aa]E'fj9_9O]<7h:jNA46lQRa_e\_@HgU8B@Rb82PBrC?P!M#n!I$W)(<Zc!uQoC'KN-)I%45@7_,ng!a.!g`E2OAJ3(V)t2
%CMKZ)U["\].Nq64Z#WGdWH)<I7.9E8-:YUE3)n8H-ESg1a:S4g'\$F"OAS\>YC$,aPS\i%NVK#t1V?=\]Q.tk>)?aZ4u$Wu'RN!F
%amW!ZJB-qB@M(6HL4P8k_':;i5hgg_m*l-eBcHPt9iA_>13d'd#f']F_J]SA1!=8M=;C)%J[Q`iLrW!>JCj)+"3Y?sfF&6.,;`5Z
%NOIf<3C1Ng1)`S4caaft/a$Vgbp23W>bH8Xb/ntPb7"9ZC1Z58C*&+A+2RupZjh6tCo=oiF3?[o.%\d(RIqUl:5cKQ^E[<BIO*lW
%1pSo$!LYn[2EZJcCP3V)IG$+hko($m>m&13qOW[g%=2SZa_;RN_[Og0CH31m""s8l(7dD"CE/tm7(rk2&#PX/?\@e4atXZ=!sh&R
%7D8sgiLTWKXr?4SltFeN%OC/\<<N2qjg-SN"qYgk=+;,$ko+Z8G3$@l1Hku14OQ)f.6]2n->W%&l7-"jNTr@".U@Z9BE&fSKDhQ?
%:n=e@Nho_79FUbJA.7m[KFq@[%@f.2f&.HVA"*S?fN;(k(`R6OI97OdN"$Y&$,ktb%=migMm,L^M!&H0YX'(]LDk`'YT_KZlAM7M
%WE.`-i8@j6%gB:#[4oT)rIj1T7&VQ;T'+`C)d`I^@q0<*!]>bSfH>G3Yo"EFkjQt<)aNUD0/>HL4`c`AkZg!1*YD3oX/Ak"9AflH
%CTsuU)'emeIoj2c/H3/QMXsS_)_"7+*=mle,L,/h1.1l5K19X:FV,GWaoZ7iW_ZFW)LSQ7k]B%0&`uQHKSgTSJ,tPYB1ZpAbc1s+
%@eSDB^]Z#'].63s@BFU3Kd-e8aQ_oqe[?\2_57MR9QH`PO:Ig@"&1SG3h/uN<F"6QEOIE5#i)"W3:TedT+5B$NZ:Y(juii<7s5"4
%a_4,\XG6NU4$O)4I62r]H?^pW$8rd,g)o=F\8*RN3X-Z&Fa+pP&Y`4gIL&#)]\8Ochh?,*GHub_pkcoQp";b=Y'fb5LGtP\gZ9Xl
%g\8K%.7MG/ksBD^i>ZR:9Hl7Wjl@-[]6UBl]$K@l3T74U1T)I,ZnOEdYKUFA=@_Id=tt?Y"B#u.r9T4dA=0"aeU[=D8Du!\i:Ggr
%<Z24Y.lH_WU8/7<OQ2fo3XQejrYBW@N/KWJc,+X2A2MRn2I%kl'C_esR9$](Jr>Y!cuh;.^`b4@8o-7n<uL!2Ud>c<6k`l>IEt,N
%lF<.&aKiCUlXT$PRr&J'5GS\/pu\#,e=$%gC5^.ZI[`3gK7(36jJ"S2a@n/l>D@/[-G1A+R&:%+k-,-4/OI/7Sed?LY!WPl8Jt&t
%l'DhtqABA]P5]T9=^]jL`M&-Y=V*Ko_u6E&$q!">(gT'K3ip#njcG&\.\mZ\NK!rQ%/fW"Q@'AKH%dQs:*$bF]h_-38qX-A!/1^u
%Ztt)K/9Rm'%lo@SKY*FK+6#AO(Lc\<nb\2\$`=F1&4?VHe?5V63!'8D'#u1uC#-aWf@>qgll$2"YlJQ83ja6IXc^:cU*7D,oL4fU
%\-V/GBG\gSp!9l7\p>G?(E&8&s%u`(0TT3-"6t4HM;T8DY-Gau^]PXU!g*bU:/WANd=8kcMo6&]-$Ss6U;R`PiCj`TnqaMD(pqA/
%7(b;q9m^,j7.d51\=f*0`7(c(5]L`0!Gl48EuGY/Z*TeTH:=?.0-;q.Ssl?KY=0[fge;J8l5.Gk2<I.()+6OVM!0/P[gh@0;$ub;
%UFDD*0ZL&s_i75U3U#bQQp_Y!a\=T=&Y45,k<RF"JjuBm#]<],.%[T%*%:Ael7ML]0[5b#XYsEdJ93\]4<j27a7</MR^7IWpN7Mh
%\&4Muh\Cke3)(Sn+q]$'EV,tn,!S;^8Ap.gANek78Arj`;P4YZ0Hk/9pc+VtSr#kJWB_7?M*qjQGQSgO-k_@V1a8&A>T[N3M<OL/
%;E^@EM8U3[$[u.?]mV:2acU[WpHRToO],Ih+q1e>E?U[)Y5cskTHZ+BYGQ26eC[HEqVi/TWC0u;p1-h,7$o_92k\5<ndbhjLpO5F
%5TO<6BbQ:nlGqn/(at8-,81)dF:9N18Jbu__/X#QB7?XeU+d9f:IX-Kb/^behU&1Y)Xt!]f*8l4(n$1N+ra.r6u7A_\8mG%mH%MV
%,4U56jM`G!#=-C!]NuStn5(kP2o9C6Dj3r67>Y+27OE/4_9#*0.eN^PA0NY\60kn^M*uce!%i<,ZJP_Q-u+C)3:mNUaWm:r6"^iC
%iHn[:'2^=G4.3%G:J<,BZ'At*444XD3<<[#)s7i2Pj.?G-]E67gU?ODIBN#/K4L^)!0g0q%'M1k=^e!eV]AohGlft7ctec#fVkR(
%74)JNN+7(E_CgK8HRBKKi8q5b7,-WO0TK);B[r/O*'>M\&M-FVA0P(Ci$qPY&I0f?C0*/&gGRoo_oP4YJ$mir-JCsUa[C.]cXS15
%@DSbrqaMplL7"4/6o#@`(skp79>h![Nns:6f5]ruX^%U)UP.**m3q]Rj:a/.$NjaS+N9)V-"=fE>3b)[;0/)i[CAVd&2oCRK7Hd]
%9RUo;+<u[I0I%5cbXYPq7Re`a[LIhZObBstcfKRDUr`5s/T?OpC`c8U,+"*!S&Qo;'(L^`I"LSL"G4c?&i'6$LB5R[`oP@QfNWNV
%7j8NUHb<0u+q\b\*-rhBg$YOR,"=T(H<V@5MC<+SMaPG%W4kHS6H#A989GN!GdfqCp42']5kT\*Y_keRUCa-:))t/97.I?4"qe7u
%(]C]hK8:.I*bd?bMM.A#eiGRB!&B_#1PcmjJc_&hLk,9c1'S>#@!)(F63\$U<JY$)Vt&LtK8B+,O445`#lR6=(6Lo$\V$jEc6/ij
%MM#:F,#PA*SO19?Uu*'M##U/u;`,a7a"i0)=Kf([7,0dlY)>V7H"]/jLC>@E/=M<Y5t!FWVm.(,Pd[m25$%q#QW<I35fCRSBR(j7
%ELWuJ4])EG7.hFCnV&A[SZV;c:Dlf=+C@DoK1NGW;AXtARo_\aVW(o%2i"R3P<n9ikR8Y*b`k:\O.RkR81l'D5K"J-UHRWJM/\g-
%72KE[=t(%tU:GXZ"=!Oqh1QVr80^Hl:*AOM0CLOS%rjfQJNcJEC@-GsLO^AEa`I:i2$Gf\)L[E6LElRtTn6c&1Y^PL4Q&9BE694'
%EmX``j<97-lXk$7nrSKd4=$V\g=Z0Tqj0nrq>_kU*&Ft!Ob]m@^^P2Q&?gcP_Ulmslr]-W7NQ%%_n,9s+\l_$CcH]rdl1QBOb_`Y
%j6RpZh?&*RI&?fb,!<W).n$$EV]?K]Br5uWmi@m`OZgVhFgBiG*^[L'ZIRVq'$O!__TEod#<#ggSNXol0HGibH\hNuY!*,M4lj"q
%4`-;<NBL7[SZo$mH^:3^J91$t2]g"ZaZZ46H;[i^r<\ZK.4&UJB7ec]#\!si>b]VGBb[;4`*>qemg-Bp:$<_eHcuhXRV9s04k=2-
%,^t0+(o"L@/F%1o%&-?T`l2EC)7.^%9rM9rIl@%\X2npo1$)0\7A%ZJNk0;Y3s\-*82b(FR+[]=,YFj`nJU#PVZhTlQBT;kT`t$a
%Il=2GGGcEEc&P1\XHUWgih,JYBqCM)GI(41[tpbT[8.3nHYHi,h&Et]?(.!<jG5Je#VoR1ZYE3ONDsO):0uWHgn,ec1-*GrBeU7-
%nfebi@OC,[A\/tjlj4u^k,!67-D]$$PIEFrPDM/*Kp,o$<.saU-jB1(2n)rU)auB'\\!E=rnu5&.]KMn33e9*88LcC4b]"l42Fa*
%=&Ca][F4&0ArL<ddD8'.VKCPMdp8K"^^X&8jX<:36M+[R@fPuEi0[^X.&'n^)1ON'R5tD;\8!n^#n]<pW"k92aFIsc25,Ze\5^u9
%YY)]//b)X^OdSk<)B,hZ4@W5uaD,#GQW7AZ/>h'qn8TK3rn5C2#R"?Jqk5o:PU7NDe'uB;<8:?q?WV@cH5-iG<rTaJ:%P>FgO4+R
%<RnY,Q`eC7I+:pKXIejmZqls"=64-4&QquRaEL%-T<uZ.RElMLJj'j1?>pr*3G+e6?%#lG>nlJ$b_L_5G5-H+:fIb`\k6l5=hQ@4
%<Tgl%>&9ejcio]@OR+6c.mt9S9N"S5.8D7"?E.H!f'?%a*Bb8-LXA?6M#V,:jriG5IX7g73U!h1+E3;%X?#hd<%%(73El5Oi5gb:
%R!V6lH9)U'`Y(2\*;<q;/ToX7"I@Se<7[QZMe?1o3UY3N\,nGDmC/!0k8tR%D<7N,[]M5.\ue"2(N*57,2Tm7=spDQ[%G"Dd$^q8
%g?#Bl@8us:qhJfUAB\33WF$9>kn[]bY$:_mM@Lhn"RL)G4pM#-+A;]RJY.2V0>?lLQH=oCs+*k^76]#JrF=WcCWN$a[''MKpSYS<
%q!/ABJkHP_YDJL/c`OYIXp$o:F`4R%;:tS<NG511M`&dFq=r![o@r1#`P;DQp7MB@n,N+%hu0aNrqJ/G`<?2"s81X0rU_33pq-S&
%qWX'UrQX6ur4E"!e!JtjrqCp;e*m;.dsmj:qXSi[r9<B/rS`f%IJN]Rr8I*q+H\&HMnf%2s5Dl8p,E!jp,i:Z~>
%AI9_PrivateDataEnd
